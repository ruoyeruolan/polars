Search.setIndex({"alltitles": {"ABS": [[1370, "abs"]], "ACOS": [[1373, "acos"]], "ACOSD": [[1373, "acosd"]], "ARRAY_AGG": [[1366, "array-agg"]], "ARRAY_CONTAINS": [[1366, "array-contains"]], "ARRAY_GET": [[1366, "array-get"]], "ARRAY_LENGTH": [[1366, "array-length"]], "ARRAY_LOWER": [[1366, "array-lower"]], "ARRAY_MEAN": [[1366, "array-mean"]], "ARRAY_REVERSE": [[1366, "array-reverse"]], "ARRAY_SUM": [[1366, "array-sum"]], "ARRAY_TO_STRING": [[1366, "array-to-string"]], "ARRAY_UNIQUE": [[1366, "array-unique"]], "ARRAY_UPPER": [[1366, "array-upper"]], "ASIN": [[1373, "asin"]], "ASIND": [[1373, "asind"]], "ATAN": [[1373, "atan"]], "ATAN2": [[1373, "atan2"]], "ATAN2D": [[1373, "atan2d"]], "ATAND": [[1373, "atand"]], "AVG": [[1365, "avg"]], "Aggregate": [[1365, null]], "Aggregation": [[200, null], [353, null], [851, null], [960, null]], "Aliases": [[1365, null], [1365, null], [1370, null], [1370, null], [1371, null], [1371, null]], "Array": [[829, null], [1340, null], [1366, null]], "Asserts": [[1379, "asserts"]], "Attributes": [[341, null], [948, null], [1341, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[850, "avro"]], "BIT_AND": [[1367, "bit-and"]], "BIT_COUNT": [[1367, "bit-count"]], "BIT_LENGTH": [[1371, "bit-length"]], "BIT_OR": [[1367, "bit-or"]], "BIT_XOR": [[1367, "bit-xor"]], "Binary": [[830, null], [843, "binary"], [1342, null]], "Bitwise": [[1367, null]], "Boolean": [[831, null], [1343, null]], "CAST": [[1374, "cast"]], "CBRT": [[1370, "cbrt"]], "CEIL": [[1370, "ceil"]], "COALESCE": [[1368, "coalesce"]], "CONCAT": [[1371, "concat"]], "CONCAT_WS": [[1371, "concat-ws"]], "COS": [[1373, "cos"]], "COSD": [[1373, "cosd"]], "COT": [[1373, "cot"]], "COTD": [[1373, "cotd"]], "COUNT": [[1365, "count"]], "CREATE TABLE": [[1378, "create-table"]], "CSV": [[850, "csv"]], "Catalog": [[197, null]], "Categories": [[832, null], [1344, null]], "Clipboard": [[850, "clipboard"]], "Cloud Credentials": [[850, "cloud-credentials"]], "Columns / names": [[834, null]], "Comparison": [[843, "comparison"], [1352, "comparison"]], "Computation": [[342, null], [835, null], [1345, null]], "Conditional": [[1368, null]], "Config": [[199, null]], "Config load, save, state": [[199, "config-load-save-state"]], "Config options": [[199, "config-options"]], "Conjunction": [[843, "conjunction"]], "Conversion": [[848, "conversion"]], "DATE": [[1371, "date"]], "DATE_PART": [[1372, "date-part"]], "DEGREES": [[1373, "degrees"]], "DELETE": [[1378, "delete"]], "DISTINCT": [[1364, "distinct"]], "DIV": [[1370, "div"]], "DROP TABLES": [[1378, "drop-tables"]], "Data types": [[351, null]], "DataFrame": [[346, null]], "DataType": [[351, "datatype"]], "Database": [[850, "database"]], "Delta Lake": [[850, "delta-lake"]], "Descriptive": [[343, null], [949, null], [1346, null]], "Documentation": [[1376, null], [1376, null], [1376, null]], "ENDS_WITH": [[1371, "ends-with"]], "EXCEPT": [[1377, "except"]], "EXP": [[1370, "exp"]], "EXPLAIN": [[1378, "explain"]], "EXTRACT": [[1372, "extract"]], "Errors": [[352, "errors"]], "Examples": [[1, "examples"], [959, "examples"], [1379, "examples"]], "Excel / ODS": [[850, "excel-ods"]], "Exceptions": [[352, null]], "Export": [[344, null], [1347, null]], "Expression SQL": [[1376, "expression-sql"]], "Expression plugins": [[957, "expression-plugins"]], "Expressions": [[837, null]], "Extending the API": [[1, null]], "FIRST": [[1365, "first"]], "FLOOR": [[1370, "floor"]], "FROM": [[1364, "from"]], "Feather / IPC": [[850, "feather-ipc"]], "Frame SQL": [[1376, "frame-sql"]], "Functions": [[836, null], [848, null], [959, "functions"]], "GPUEngine": [[950, null]], "GREATEST": [[1368, "greatest"]], "GROUP BY": [[1364, "group-by"]], "Global SQL": [[1376, "global-sql"]], "GroupBy": [[345, null], [951, null]], "HAVING": [[1364, "having"]], "IF": [[1368, "if"]], "IFNULL": [[1368, "ifnull"]], "INITCAP": [[1371, "initcap"]], "INTERSECT": [[1377, "intersect"]], "IO plugins": [[957, "io-plugins"]], "Iceberg": [[850, "iceberg"]], "Importing": [[959, "importing"]], "InProcessQuery": [[952, null]], "Index": [[0, null]], "Input/output": [[850, null]], "Introduction": [[1376, "introduction"]], "JOIN": [[1364, "join"]], "JSON": [[850, "json"]], "LAST": [[1365, "last"]], "LEAST": [[1368, "least"]], "LEFT": [[1371, "left"]], "LENGTH": [[1371, "length"]], "LIMIT": [[1364, "limit"]], "LN": [[1370, "ln"]], "LOG": [[1370, "log"]], "LOG10": [[1370, "log10"]], "LOG1P": [[1370, "log1p"]], "LOG2": [[1370, "log2"]], "LOWER": [[1371, "lower"]], "LTRIM": [[1371, "ltrim"]], "LazyFrame": [[953, null]], "List": [[838, null], [1349, null]], "MAX": [[1365, "max"]], "MEDIAN": [[1365, "median"]], "MIN": [[1365, "min"]], "MOD": [[1370, "mod"]], "Manipulation/selection": [[348, null], [841, null], [955, null], [1351, null]], "Math": [[1370, null]], "Meta": [[839, null]], "Metadata": [[956, null]], "Methods": [[1376, "methods"]], "Miscellaneous": [[347, null], [840, null], [848, "miscellaneous"], [954, null], [1350, null]], "Multiple Config instances": [[199, "multiple-config-instances"]], "Multiple queries": [[848, "multiple-queries"]], "NORMALIZE": [[1371, "normalize"]], "NULLIF": [[1368, "nullif"]], "Name": [[842, null]], "Nested": [[351, "nested"]], "Numeric": [[351, "numeric"], [843, "numeric"], [1352, "numeric"]], "OCTET_LENGTH": [[1371, "octet-length"]], "OFFSET": [[1364, "offset"]], "ORDER BY": [[1364, "order-by"]], "Operators": [[843, null], [1352, null]], "Other": [[351, "other"]], "PI": [[1370, "pi"]], "POW": [[1370, "pow"]], "Panic": [[352, "panic"]], "Parametric testing": [[1379, "parametric-testing"]], "Parquet": [[850, "parquet"]], "Partition": [[850, "partition"]], "Plot": [[349, null], [1353, null]], "Plugins": [[957, null]], "Polars strategies": [[1379, "polars-strategies"]], "Profiles": [[1379, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[850, "pyarrow-datasets"]], "Python API": [[1376, null]], "Python API reference": [[849, null]], "QUANTILE_CONT": [[1365, "quantile-cont"]], "QUANTILE_DISC": [[1365, "quantile-disc"]], "Querying": [[1376, "querying"]], "RADIANS": [[1373, "radians"]], "REGEXP_LIKE": [[1371, "regexp-like"]], "REPLACE": [[1371, "replace"]], "REVERSE": [[1371, "reverse"]], "RIGHT": [[1371, "right"]], "ROUND": [[1370, "round"]], "RTRIM": [[1371, "rtrim"]], "Random": [[848, "random"]], "SELECT": [[1364, "select"]], "SHOW TABLES": [[1378, "show-tables"]], "SIGN": [[1370, "sign"]], "SIN": [[1373, "sin"]], "SIND": [[1373, "sind"]], "SQL Clauses": [[1364, null]], "SQL Functions": [[1369, null]], "SQL Interface": [[1375, null]], "SQLContext": [[1376, "sqlcontext"]], "SQRT": [[1370, "sqrt"]], "STARTS_WITH": [[1371, "starts-with"]], "STDDEV": [[1365, "stddev"]], "STRFTIME": [[1372, "strftime"]], "STRPOS": [[1371, "strpos"]], "STRPTIME": [[1371, "strptime"]], "SUBSTR": [[1371, "substr"]], "SUM": [[1365, "sum"]], "Schema": [[958, null]], "Selectors": [[959, null]], "Serialization": [[347, "serialization"], [954, "serialization"]], "Series": [[1348, null]], "Set Operations": [[1377, null]], "Set operations": [[959, "set-operations"]], "Strategy helpers": [[1379, "strategy-helpers"]], "String": [[351, "string"], [844, null], [1354, null], [1371, null]], "StringCache": [[848, "stringcache"]], "Struct": [[845, null], [1355, null]], "Style": [[350, null]], "TAN": [[1373, "tan"]], "TAND": [[1373, "tand"]], "TIMESTAMP": [[1371, "timestamp"]], "TRUNCATE": [[1378, "truncate"]], "TRY_CAST": [[1374, "try-cast"]], "Table Operations": [[1378, null]], "Temporal": [[351, "temporal"], [846, null], [1356, null], [1372, null]], "Testing": [[1379, null]], "Trigonometry": [[1373, null]], "Types": [[1374, null]], "UNION": [[1377, "union"]], "UNION ALL": [[1377, "union-all"]], "UNION BY NAME": [[1377, "union-by-name"]], "UNNEST": [[1366, "unnest"], [1378, "unnest"]], "UPPER": [[1371, "upper"]], "Unity Catalog": [[198, null]], "Use as a context manager": [[199, "use-as-a-context-manager"]], "Use as a decorator": [[199, "use-as-a-decorator"]], "VARIANCE": [[1365, "variance"]], "WHERE": [[1364, "where"]], "Warnings": [[352, "warnings"]], "Window": [[847, null]], "polars.Catalog": [[184, null]], "polars.Catalog.get_table_info": [[185, null]], "polars.Catalog.list_catalogs": [[186, null]], "polars.Catalog.list_namespaces": [[187, null]], "polars.Catalog.list_tables": [[188, null]], "polars.Catalog.scan_table": [[189, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[201, null]], "polars.DataFrame.__arrow_c_stream__": [[202, null]], "polars.DataFrame.__dataframe__": [[203, null]], "polars.DataFrame.__getitem__": [[204, null]], "polars.DataFrame.approx_n_unique": [[205, null]], "polars.DataFrame.bottom_k": [[206, null]], "polars.DataFrame.cast": [[207, null]], "polars.DataFrame.clear": [[208, null]], "polars.DataFrame.clone": [[209, null]], "polars.DataFrame.collect_schema": [[210, null]], "polars.DataFrame.columns": [[211, null]], "polars.DataFrame.corr": [[212, null]], "polars.DataFrame.count": [[213, null]], "polars.DataFrame.describe": [[214, null]], "polars.DataFrame.deserialize": [[215, null]], "polars.DataFrame.drop": [[216, null]], "polars.DataFrame.drop_in_place": [[217, null]], "polars.DataFrame.drop_nans": [[218, null]], "polars.DataFrame.drop_nulls": [[219, null]], "polars.DataFrame.dtypes": [[220, null]], "polars.DataFrame.equals": [[221, null]], "polars.DataFrame.estimated_size": [[222, null]], "polars.DataFrame.explode": [[223, null]], "polars.DataFrame.extend": [[224, null]], "polars.DataFrame.fill_nan": [[225, null]], "polars.DataFrame.fill_null": [[226, null]], "polars.DataFrame.filter": [[227, null]], "polars.DataFrame.flags": [[228, null]], "polars.DataFrame.fold": [[229, null]], "polars.DataFrame.gather_every": [[230, null]], "polars.DataFrame.get_column": [[231, null]], "polars.DataFrame.get_column_index": [[232, null]], "polars.DataFrame.get_columns": [[233, null]], "polars.DataFrame.glimpse": [[234, null]], "polars.DataFrame.group_by": [[235, null]], "polars.DataFrame.group_by_dynamic": [[236, null]], "polars.DataFrame.hash_rows": [[237, null]], "polars.DataFrame.head": [[238, null]], "polars.DataFrame.height": [[239, null]], "polars.DataFrame.hstack": [[240, null]], "polars.DataFrame.insert_column": [[241, null]], "polars.DataFrame.interpolate": [[242, null]], "polars.DataFrame.is_duplicated": [[243, null]], "polars.DataFrame.is_empty": [[244, null]], "polars.DataFrame.is_unique": [[245, null]], "polars.DataFrame.item": [[246, null]], "polars.DataFrame.iter_columns": [[247, null]], "polars.DataFrame.iter_rows": [[248, null]], "polars.DataFrame.iter_slices": [[249, null]], "polars.DataFrame.join": [[250, null]], "polars.DataFrame.join_asof": [[251, null]], "polars.DataFrame.join_where": [[252, null]], "polars.DataFrame.lazy": [[253, null]], "polars.DataFrame.limit": [[254, null]], "polars.DataFrame.map_rows": [[255, null]], "polars.DataFrame.max": [[256, null]], "polars.DataFrame.max_horizontal": [[257, null]], "polars.DataFrame.mean": [[258, null]], "polars.DataFrame.mean_horizontal": [[259, null]], "polars.DataFrame.median": [[260, null]], "polars.DataFrame.melt": [[261, null]], "polars.DataFrame.merge_sorted": [[262, null]], "polars.DataFrame.min": [[263, null]], "polars.DataFrame.min_horizontal": [[264, null]], "polars.DataFrame.n_chunks": [[265, null]], "polars.DataFrame.n_unique": [[266, null]], "polars.DataFrame.null_count": [[267, null]], "polars.DataFrame.partition_by": [[268, null]], "polars.DataFrame.pipe": [[269, null]], "polars.DataFrame.pivot": [[270, null]], "polars.DataFrame.product": [[271, null]], "polars.DataFrame.quantile": [[272, null]], "polars.DataFrame.rechunk": [[273, null]], "polars.DataFrame.remove": [[274, null]], "polars.DataFrame.rename": [[275, null]], "polars.DataFrame.replace_column": [[276, null]], "polars.DataFrame.reverse": [[277, null]], "polars.DataFrame.rolling": [[278, null]], "polars.DataFrame.row": [[279, null]], "polars.DataFrame.rows": [[280, null]], "polars.DataFrame.rows_by_key": [[281, null]], "polars.DataFrame.sample": [[282, null]], "polars.DataFrame.schema": [[283, null]], "polars.DataFrame.select": [[284, null]], "polars.DataFrame.select_seq": [[285, null]], "polars.DataFrame.serialize": [[286, null]], "polars.DataFrame.set_sorted": [[287, null]], "polars.DataFrame.shape": [[288, null]], "polars.DataFrame.shift": [[289, null]], "polars.DataFrame.shrink_to_fit": [[290, null]], "polars.DataFrame.slice": [[291, null]], "polars.DataFrame.sort": [[292, null]], "polars.DataFrame.sql": [[293, null]], "polars.DataFrame.std": [[294, null]], "polars.DataFrame.sum": [[295, null]], "polars.DataFrame.sum_horizontal": [[296, null]], "polars.DataFrame.tail": [[297, null]], "polars.DataFrame.to_arrow": [[298, null]], "polars.DataFrame.to_dict": [[299, null]], "polars.DataFrame.to_dicts": [[300, null]], "polars.DataFrame.to_dummies": [[301, null]], "polars.DataFrame.to_init_repr": [[302, null]], "polars.DataFrame.to_jax": [[303, null]], "polars.DataFrame.to_numpy": [[304, null]], "polars.DataFrame.to_pandas": [[305, null]], "polars.DataFrame.to_series": [[306, null]], "polars.DataFrame.to_struct": [[307, null]], "polars.DataFrame.to_torch": [[308, null]], "polars.DataFrame.top_k": [[309, null]], "polars.DataFrame.transpose": [[310, null]], "polars.DataFrame.unique": [[311, null]], "polars.DataFrame.unnest": [[312, null]], "polars.DataFrame.unpivot": [[313, null]], "polars.DataFrame.unstack": [[314, null]], "polars.DataFrame.update": [[315, null]], "polars.DataFrame.upsample": [[316, null]], "polars.DataFrame.var": [[317, null]], "polars.DataFrame.vstack": [[318, null]], "polars.DataFrame.width": [[319, null]], "polars.DataFrame.with_columns": [[320, null]], "polars.DataFrame.with_columns_seq": [[321, null]], "polars.DataFrame.with_row_count": [[322, null]], "polars.DataFrame.with_row_index": [[323, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.Expr.abs": [[354, null]], "polars.Expr.add": [[355, null]], "polars.Expr.agg_groups": [[356, null]], "polars.Expr.alias": [[357, null]], "polars.Expr.all": [[358, null]], "polars.Expr.and_": [[359, null]], "polars.Expr.any": [[360, null]], "polars.Expr.append": [[361, null]], "polars.Expr.approx_n_unique": [[362, null]], "polars.Expr.arccos": [[363, null]], "polars.Expr.arccosh": [[364, null]], "polars.Expr.arcsin": [[365, null]], "polars.Expr.arcsinh": [[366, null]], "polars.Expr.arctan": [[367, null]], "polars.Expr.arctanh": [[368, null]], "polars.Expr.arg_max": [[369, null]], "polars.Expr.arg_min": [[370, null]], "polars.Expr.arg_sort": [[371, null]], "polars.Expr.arg_true": [[372, null]], "polars.Expr.arg_unique": [[373, null]], "polars.Expr.arr.all": [[374, null]], "polars.Expr.arr.any": [[375, null]], "polars.Expr.arr.arg_max": [[376, null]], "polars.Expr.arr.arg_min": [[377, null]], "polars.Expr.arr.contains": [[378, null]], "polars.Expr.arr.count_matches": [[379, null]], "polars.Expr.arr.explode": [[380, null]], "polars.Expr.arr.first": [[381, null]], "polars.Expr.arr.get": [[382, null]], "polars.Expr.arr.join": [[383, null]], "polars.Expr.arr.last": [[384, null]], "polars.Expr.arr.max": [[385, null]], "polars.Expr.arr.median": [[386, null]], "polars.Expr.arr.min": [[387, null]], "polars.Expr.arr.n_unique": [[388, null]], "polars.Expr.arr.reverse": [[389, null]], "polars.Expr.arr.shift": [[390, null]], "polars.Expr.arr.sort": [[391, null]], "polars.Expr.arr.std": [[392, null]], "polars.Expr.arr.sum": [[393, null]], "polars.Expr.arr.to_list": [[394, null]], "polars.Expr.arr.to_struct": [[395, null]], "polars.Expr.arr.unique": [[396, null]], "polars.Expr.arr.var": [[397, null]], "polars.Expr.backward_fill": [[398, null]], "polars.Expr.bin.contains": [[399, null]], "polars.Expr.bin.decode": [[400, null]], "polars.Expr.bin.encode": [[401, null]], "polars.Expr.bin.ends_with": [[402, null]], "polars.Expr.bin.reinterpret": [[403, null]], "polars.Expr.bin.size": [[404, null]], "polars.Expr.bin.starts_with": [[405, null]], "polars.Expr.bitwise_and": [[406, null]], "polars.Expr.bitwise_count_ones": [[407, null]], "polars.Expr.bitwise_count_zeros": [[408, null]], "polars.Expr.bitwise_leading_ones": [[409, null]], "polars.Expr.bitwise_leading_zeros": [[410, null]], "polars.Expr.bitwise_or": [[411, null]], "polars.Expr.bitwise_trailing_ones": [[412, null]], "polars.Expr.bitwise_trailing_zeros": [[413, null]], "polars.Expr.bitwise_xor": [[414, null]], "polars.Expr.bottom_k": [[415, null]], "polars.Expr.bottom_k_by": [[416, null]], "polars.Expr.cast": [[417, null]], "polars.Expr.cat.ends_with": [[418, null]], "polars.Expr.cat.get_categories": [[419, null]], "polars.Expr.cat.len_bytes": [[420, null]], "polars.Expr.cat.len_chars": [[421, null]], "polars.Expr.cat.starts_with": [[422, null]], "polars.Expr.cbrt": [[423, null]], "polars.Expr.ceil": [[424, null]], "polars.Expr.clip": [[425, null]], "polars.Expr.cos": [[426, null]], "polars.Expr.cosh": [[427, null]], "polars.Expr.cot": [[428, null]], "polars.Expr.count": [[429, null]], "polars.Expr.cum_count": [[430, null]], "polars.Expr.cum_max": [[431, null]], "polars.Expr.cum_min": [[432, null]], "polars.Expr.cum_prod": [[433, null]], "polars.Expr.cum_sum": [[434, null]], "polars.Expr.cumulative_eval": [[435, null]], "polars.Expr.cut": [[436, null]], "polars.Expr.degrees": [[437, null]], "polars.Expr.deserialize": [[438, null]], "polars.Expr.diff": [[439, null]], "polars.Expr.dot": [[440, null]], "polars.Expr.drop_nans": [[441, null]], "polars.Expr.drop_nulls": [[442, null]], "polars.Expr.dt.add_business_days": [[443, null]], "polars.Expr.dt.base_utc_offset": [[444, null]], "polars.Expr.dt.cast_time_unit": [[445, null]], "polars.Expr.dt.century": [[446, null]], "polars.Expr.dt.combine": [[447, null]], "polars.Expr.dt.convert_time_zone": [[448, null]], "polars.Expr.dt.date": [[449, null]], "polars.Expr.dt.datetime": [[450, null]], "polars.Expr.dt.day": [[451, null]], "polars.Expr.dt.dst_offset": [[452, null]], "polars.Expr.dt.epoch": [[453, null]], "polars.Expr.dt.hour": [[454, null]], "polars.Expr.dt.is_leap_year": [[455, null]], "polars.Expr.dt.iso_year": [[456, null]], "polars.Expr.dt.microsecond": [[457, null]], "polars.Expr.dt.millennium": [[458, null]], "polars.Expr.dt.millisecond": [[459, null]], "polars.Expr.dt.minute": [[460, null]], "polars.Expr.dt.month": [[461, null]], "polars.Expr.dt.month_end": [[462, null]], "polars.Expr.dt.month_start": [[463, null]], "polars.Expr.dt.nanosecond": [[464, null]], "polars.Expr.dt.offset_by": [[465, null]], "polars.Expr.dt.ordinal_day": [[466, null]], "polars.Expr.dt.quarter": [[467, null]], "polars.Expr.dt.replace": [[468, null]], "polars.Expr.dt.replace_time_zone": [[469, null]], "polars.Expr.dt.round": [[470, null]], "polars.Expr.dt.second": [[471, null]], "polars.Expr.dt.strftime": [[472, null]], "polars.Expr.dt.time": [[473, null]], "polars.Expr.dt.timestamp": [[474, null]], "polars.Expr.dt.to_string": [[475, null]], "polars.Expr.dt.total_days": [[476, null]], "polars.Expr.dt.total_hours": [[477, null]], "polars.Expr.dt.total_microseconds": [[478, null]], "polars.Expr.dt.total_milliseconds": [[479, null]], "polars.Expr.dt.total_minutes": [[480, null]], "polars.Expr.dt.total_nanoseconds": [[481, null]], "polars.Expr.dt.total_seconds": [[482, null]], "polars.Expr.dt.truncate": [[483, null]], "polars.Expr.dt.week": [[484, null]], "polars.Expr.dt.weekday": [[485, null]], "polars.Expr.dt.with_time_unit": [[486, null]], "polars.Expr.dt.year": [[487, null]], "polars.Expr.entropy": [[488, null]], "polars.Expr.eq": [[489, null]], "polars.Expr.eq_missing": [[490, null]], "polars.Expr.ewm_mean": [[491, null]], "polars.Expr.ewm_mean_by": [[492, null]], "polars.Expr.ewm_std": [[493, null]], "polars.Expr.ewm_var": [[494, null]], "polars.Expr.exclude": [[495, null]], "polars.Expr.exp": [[496, null]], "polars.Expr.explode": [[497, null]], "polars.Expr.extend_constant": [[498, null]], "polars.Expr.fill_nan": [[499, null]], "polars.Expr.fill_null": [[500, null]], "polars.Expr.filter": [[501, null]], "polars.Expr.first": [[502, null]], "polars.Expr.flatten": [[503, null]], "polars.Expr.floor": [[504, null]], "polars.Expr.floordiv": [[505, null]], "polars.Expr.forward_fill": [[506, null]], "polars.Expr.from_json": [[507, null]], "polars.Expr.gather": [[508, null]], "polars.Expr.gather_every": [[509, null]], "polars.Expr.ge": [[510, null]], "polars.Expr.get": [[511, null]], "polars.Expr.gt": [[512, null]], "polars.Expr.has_nulls": [[513, null]], "polars.Expr.hash": [[514, null]], "polars.Expr.head": [[515, null]], "polars.Expr.hist": [[516, null]], "polars.Expr.implode": [[517, null]], "polars.Expr.index_of": [[518, null]], "polars.Expr.inspect": [[519, null]], "polars.Expr.interpolate": [[520, null]], "polars.Expr.interpolate_by": [[521, null]], "polars.Expr.is_between": [[522, null]], "polars.Expr.is_duplicated": [[523, null]], "polars.Expr.is_finite": [[524, null]], "polars.Expr.is_first_distinct": [[525, null]], "polars.Expr.is_in": [[526, null]], "polars.Expr.is_infinite": [[527, null]], "polars.Expr.is_last_distinct": [[528, null]], "polars.Expr.is_nan": [[529, null]], "polars.Expr.is_not_nan": [[530, null]], "polars.Expr.is_not_null": [[531, null]], "polars.Expr.is_null": [[532, null]], "polars.Expr.is_unique": [[533, null]], "polars.Expr.kurtosis": [[534, null]], "polars.Expr.last": [[535, null]], "polars.Expr.le": [[536, null]], "polars.Expr.len": [[537, null]], "polars.Expr.limit": [[538, null]], "polars.Expr.list.all": [[539, null]], "polars.Expr.list.any": [[540, null]], "polars.Expr.list.arg_max": [[541, null]], "polars.Expr.list.arg_min": [[542, null]], "polars.Expr.list.concat": [[543, null]], "polars.Expr.list.contains": [[544, null]], "polars.Expr.list.count_matches": [[545, null]], "polars.Expr.list.diff": [[546, null]], "polars.Expr.list.drop_nulls": [[547, null]], "polars.Expr.list.eval": [[548, null]], "polars.Expr.list.explode": [[549, null]], "polars.Expr.list.first": [[550, null]], "polars.Expr.list.gather": [[551, null]], "polars.Expr.list.gather_every": [[552, null]], "polars.Expr.list.get": [[553, null]], "polars.Expr.list.head": [[554, null]], "polars.Expr.list.join": [[555, null]], "polars.Expr.list.last": [[556, null]], "polars.Expr.list.len": [[557, null]], "polars.Expr.list.max": [[558, null]], "polars.Expr.list.mean": [[559, null]], "polars.Expr.list.median": [[560, null]], "polars.Expr.list.min": [[561, null]], "polars.Expr.list.n_unique": [[562, null]], "polars.Expr.list.reverse": [[563, null]], "polars.Expr.list.sample": [[564, null]], "polars.Expr.list.set_difference": [[565, null]], "polars.Expr.list.set_intersection": [[566, null]], "polars.Expr.list.set_symmetric_difference": [[567, null]], "polars.Expr.list.set_union": [[568, null]], "polars.Expr.list.shift": [[569, null]], "polars.Expr.list.slice": [[570, null]], "polars.Expr.list.sort": [[571, null]], "polars.Expr.list.std": [[572, null]], "polars.Expr.list.sum": [[573, null]], "polars.Expr.list.tail": [[574, null]], "polars.Expr.list.to_array": [[575, null]], "polars.Expr.list.to_struct": [[576, null]], "polars.Expr.list.unique": [[577, null]], "polars.Expr.list.var": [[578, null]], "polars.Expr.log": [[579, null]], "polars.Expr.log10": [[580, null]], "polars.Expr.log1p": [[581, null]], "polars.Expr.lower_bound": [[582, null]], "polars.Expr.lt": [[583, null]], "polars.Expr.map_batches": [[584, null]], "polars.Expr.map_elements": [[585, null]], "polars.Expr.max": [[586, null]], "polars.Expr.mean": [[587, null]], "polars.Expr.median": [[588, null]], "polars.Expr.meta.eq": [[589, null]], "polars.Expr.meta.has_multiple_outputs": [[590, null]], "polars.Expr.meta.is_column": [[591, null]], "polars.Expr.meta.is_column_selection": [[592, null]], "polars.Expr.meta.is_literal": [[593, null]], "polars.Expr.meta.is_regex_projection": [[594, null]], "polars.Expr.meta.ne": [[595, null]], "polars.Expr.meta.output_name": [[596, null]], "polars.Expr.meta.pop": [[597, null]], "polars.Expr.meta.root_names": [[598, null]], "polars.Expr.meta.serialize": [[599, null]], "polars.Expr.meta.show_graph": [[600, null]], "polars.Expr.meta.tree_format": [[601, null]], "polars.Expr.meta.undo_aliases": [[602, null]], "polars.Expr.meta.write_json": [[603, null]], "polars.Expr.min": [[604, null]], "polars.Expr.mod": [[605, null]], "polars.Expr.mode": [[606, null]], "polars.Expr.mul": [[607, null]], "polars.Expr.n_unique": [[608, null]], "polars.Expr.name.keep": [[609, null]], "polars.Expr.name.map": [[610, null]], "polars.Expr.name.map_fields": [[611, null]], "polars.Expr.name.prefix": [[612, null]], "polars.Expr.name.prefix_fields": [[613, null]], "polars.Expr.name.suffix": [[614, null]], "polars.Expr.name.suffix_fields": [[615, null]], "polars.Expr.name.to_lowercase": [[616, null]], "polars.Expr.name.to_uppercase": [[617, null]], "polars.Expr.nan_max": [[618, null]], "polars.Expr.nan_min": [[619, null]], "polars.Expr.ne": [[620, null]], "polars.Expr.ne_missing": [[621, null]], "polars.Expr.neg": [[622, null]], "polars.Expr.not_": [[623, null]], "polars.Expr.null_count": [[624, null]], "polars.Expr.or_": [[625, null]], "polars.Expr.over": [[626, null]], "polars.Expr.pct_change": [[627, null]], "polars.Expr.peak_max": [[628, null]], "polars.Expr.peak_min": [[629, null]], "polars.Expr.pipe": [[630, null]], "polars.Expr.pow": [[631, null]], "polars.Expr.product": [[632, null]], "polars.Expr.qcut": [[633, null]], "polars.Expr.quantile": [[634, null]], "polars.Expr.radians": [[635, null]], "polars.Expr.rank": [[636, null]], "polars.Expr.rechunk": [[637, null]], "polars.Expr.reinterpret": [[638, null]], "polars.Expr.repeat_by": [[639, null]], "polars.Expr.replace": [[640, null]], "polars.Expr.replace_strict": [[641, null]], "polars.Expr.reshape": [[642, null]], "polars.Expr.reverse": [[643, null]], "polars.Expr.rle": [[644, null]], "polars.Expr.rle_id": [[645, null]], "polars.Expr.rolling": [[646, null]], "polars.Expr.rolling_map": [[647, null]], "polars.Expr.rolling_max": [[648, null]], "polars.Expr.rolling_max_by": [[649, null]], "polars.Expr.rolling_mean": [[650, null]], "polars.Expr.rolling_mean_by": [[651, null]], "polars.Expr.rolling_median": [[652, null]], "polars.Expr.rolling_median_by": [[653, null]], "polars.Expr.rolling_min": [[654, null]], "polars.Expr.rolling_min_by": [[655, null]], "polars.Expr.rolling_quantile": [[656, null]], "polars.Expr.rolling_quantile_by": [[657, null]], "polars.Expr.rolling_skew": [[658, null]], "polars.Expr.rolling_std": [[659, null]], "polars.Expr.rolling_std_by": [[660, null]], "polars.Expr.rolling_sum": [[661, null]], "polars.Expr.rolling_sum_by": [[662, null]], "polars.Expr.rolling_var": [[663, null]], "polars.Expr.rolling_var_by": [[664, null]], "polars.Expr.round": [[665, null]], "polars.Expr.round_sig_figs": [[666, null]], "polars.Expr.sample": [[667, null]], "polars.Expr.search_sorted": [[668, null]], "polars.Expr.set_sorted": [[669, null]], "polars.Expr.shift": [[670, null]], "polars.Expr.shrink_dtype": [[671, null]], "polars.Expr.shuffle": [[672, null]], "polars.Expr.sign": [[673, null]], "polars.Expr.sin": [[674, null]], "polars.Expr.sinh": [[675, null]], "polars.Expr.skew": [[676, null]], "polars.Expr.slice": [[677, null]], "polars.Expr.sort": [[678, null]], "polars.Expr.sort_by": [[679, null]], "polars.Expr.sqrt": [[680, null]], "polars.Expr.std": [[681, null]], "polars.Expr.str.concat": [[682, null]], "polars.Expr.str.contains": [[683, null]], "polars.Expr.str.contains_any": [[684, null]], "polars.Expr.str.count_matches": [[685, null]], "polars.Expr.str.decode": [[686, null]], "polars.Expr.str.encode": [[687, null]], "polars.Expr.str.ends_with": [[688, null]], "polars.Expr.str.escape_regex": [[689, null]], "polars.Expr.str.explode": [[690, null]], "polars.Expr.str.extract": [[691, null]], "polars.Expr.str.extract_all": [[692, null]], "polars.Expr.str.extract_groups": [[693, null]], "polars.Expr.str.extract_many": [[694, null]], "polars.Expr.str.find": [[695, null]], "polars.Expr.str.find_many": [[696, null]], "polars.Expr.str.head": [[697, null]], "polars.Expr.str.join": [[698, null]], "polars.Expr.str.json_decode": [[699, null]], "polars.Expr.str.json_path_match": [[700, null]], "polars.Expr.str.len_bytes": [[701, null]], "polars.Expr.str.len_chars": [[702, null]], "polars.Expr.str.normalize": [[703, null]], "polars.Expr.str.pad_end": [[704, null]], "polars.Expr.str.pad_start": [[705, null]], "polars.Expr.str.replace": [[706, null]], "polars.Expr.str.replace_all": [[707, null]], "polars.Expr.str.replace_many": [[708, null]], "polars.Expr.str.reverse": [[709, null]], "polars.Expr.str.slice": [[710, null]], "polars.Expr.str.split": [[711, null]], "polars.Expr.str.split_exact": [[712, null]], "polars.Expr.str.splitn": [[713, null]], "polars.Expr.str.starts_with": [[714, null]], "polars.Expr.str.strip_chars": [[715, null]], "polars.Expr.str.strip_chars_end": [[716, null]], "polars.Expr.str.strip_chars_start": [[717, null]], "polars.Expr.str.strip_prefix": [[718, null]], "polars.Expr.str.strip_suffix": [[719, null]], "polars.Expr.str.strptime": [[720, null]], "polars.Expr.str.tail": [[721, null]], "polars.Expr.str.to_date": [[722, null]], "polars.Expr.str.to_datetime": [[723, null]], "polars.Expr.str.to_decimal": [[724, null]], "polars.Expr.str.to_integer": [[725, null]], "polars.Expr.str.to_lowercase": [[726, null]], "polars.Expr.str.to_time": [[727, null]], "polars.Expr.str.to_titlecase": [[728, null]], "polars.Expr.str.to_uppercase": [[729, null]], "polars.Expr.str.zfill": [[730, null]], "polars.Expr.struct.field": [[731, null]], "polars.Expr.struct.json_encode": [[732, null]], "polars.Expr.struct.rename_fields": [[733, null]], "polars.Expr.struct.unnest": [[734, null]], "polars.Expr.struct.with_fields": [[735, null]], "polars.Expr.sub": [[736, null]], "polars.Expr.sum": [[737, null]], "polars.Expr.tail": [[738, null]], "polars.Expr.tan": [[739, null]], "polars.Expr.tanh": [[740, null]], "polars.Expr.to_physical": [[741, null]], "polars.Expr.top_k": [[742, null]], "polars.Expr.top_k_by": [[743, null]], "polars.Expr.truediv": [[744, null]], "polars.Expr.unique": [[745, null]], "polars.Expr.unique_counts": [[746, null]], "polars.Expr.upper_bound": [[747, null]], "polars.Expr.value_counts": [[748, null]], "polars.Expr.var": [[749, null]], "polars.Expr.where": [[750, null]], "polars.Expr.xor": [[751, null]], "polars.LazyFrame.approx_n_unique": [[852, null]], "polars.LazyFrame.bottom_k": [[853, null]], "polars.LazyFrame.cache": [[854, null]], "polars.LazyFrame.cast": [[855, null]], "polars.LazyFrame.clear": [[856, null]], "polars.LazyFrame.clone": [[857, null]], "polars.LazyFrame.collect": [[858, null]], "polars.LazyFrame.collect_async": [[859, null]], "polars.LazyFrame.collect_schema": [[860, null]], "polars.LazyFrame.columns": [[861, null]], "polars.LazyFrame.count": [[862, null]], "polars.LazyFrame.describe": [[863, null]], "polars.LazyFrame.deserialize": [[864, null]], "polars.LazyFrame.drop": [[865, null]], "polars.LazyFrame.drop_nans": [[866, null]], "polars.LazyFrame.drop_nulls": [[867, null]], "polars.LazyFrame.dtypes": [[868, null]], "polars.LazyFrame.explain": [[869, null]], "polars.LazyFrame.explode": [[870, null]], "polars.LazyFrame.fill_nan": [[871, null]], "polars.LazyFrame.fill_null": [[872, null]], "polars.LazyFrame.filter": [[873, null]], "polars.LazyFrame.first": [[874, null]], "polars.LazyFrame.gather_every": [[875, null]], "polars.LazyFrame.group_by": [[876, null]], "polars.LazyFrame.group_by_dynamic": [[877, null]], "polars.LazyFrame.head": [[878, null]], "polars.LazyFrame.inspect": [[879, null]], "polars.LazyFrame.interpolate": [[880, null]], "polars.LazyFrame.join": [[881, null]], "polars.LazyFrame.join_asof": [[882, null]], "polars.LazyFrame.join_where": [[883, null]], "polars.LazyFrame.last": [[884, null]], "polars.LazyFrame.lazy": [[885, null]], "polars.LazyFrame.limit": [[886, null]], "polars.LazyFrame.map_batches": [[887, null]], "polars.LazyFrame.max": [[888, null]], "polars.LazyFrame.mean": [[889, null]], "polars.LazyFrame.median": [[890, null]], "polars.LazyFrame.melt": [[891, null]], "polars.LazyFrame.merge_sorted": [[892, null]], "polars.LazyFrame.min": [[893, null]], "polars.LazyFrame.null_count": [[894, null]], "polars.LazyFrame.pipe": [[895, null]], "polars.LazyFrame.profile": [[896, null]], "polars.LazyFrame.quantile": [[897, null]], "polars.LazyFrame.remote": [[898, null]], "polars.LazyFrame.remove": [[899, null]], "polars.LazyFrame.rename": [[900, null]], "polars.LazyFrame.reverse": [[901, null]], "polars.LazyFrame.rolling": [[902, null]], "polars.LazyFrame.schema": [[903, null]], "polars.LazyFrame.select": [[904, null]], "polars.LazyFrame.select_seq": [[905, null]], "polars.LazyFrame.serialize": [[906, null]], "polars.LazyFrame.set_sorted": [[907, null]], "polars.LazyFrame.shift": [[908, null]], "polars.LazyFrame.show_graph": [[909, null]], "polars.LazyFrame.sink_csv": [[48, null]], "polars.LazyFrame.sink_ipc": [[49, null]], "polars.LazyFrame.sink_ndjson": [[50, null]], "polars.LazyFrame.sink_parquet": [[51, null]], "polars.LazyFrame.slice": [[910, null]], "polars.LazyFrame.sort": [[911, null]], "polars.LazyFrame.sql": [[912, null]], "polars.LazyFrame.std": [[913, null]], "polars.LazyFrame.sum": [[914, null]], "polars.LazyFrame.tail": [[915, null]], "polars.LazyFrame.top_k": [[916, null]], "polars.LazyFrame.unique": [[917, null]], "polars.LazyFrame.unnest": [[918, null]], "polars.LazyFrame.unpivot": [[919, null]], "polars.LazyFrame.update": [[920, null]], "polars.LazyFrame.var": [[921, null]], "polars.LazyFrame.width": [[922, null]], "polars.LazyFrame.with_columns": [[923, null]], "polars.LazyFrame.with_columns_seq": [[924, null]], "polars.LazyFrame.with_context": [[925, null]], "polars.LazyFrame.with_row_count": [[926, null]], "polars.LazyFrame.with_row_index": [[927, null]], "polars.PartitionByKey": [[52, null]], "polars.PartitionMaxSize": [[53, null]], "polars.PartitionParted": [[54, null]], "polars.SQLContext.execute": [[1357, null]], "polars.SQLContext.execute_global": [[1358, null]], "polars.SQLContext.register": [[1359, null]], "polars.SQLContext.register_globals": [[1360, null]], "polars.SQLContext.register_many": [[1361, null]], "polars.SQLContext.tables": [[1362, null]], "polars.SQLContext.unregister": [[1363, null]], "polars.Series.__array__": [[961, null]], "polars.Series.__arrow_c_stream__": [[962, null]], "polars.Series.__getitem__": [[963, null]], "polars.Series.abs": [[964, null]], "polars.Series.alias": [[965, null]], "polars.Series.all": [[966, null]], "polars.Series.any": [[967, null]], "polars.Series.append": [[968, null]], "polars.Series.approx_n_unique": [[969, null]], "polars.Series.arccos": [[970, null]], "polars.Series.arccosh": [[971, null]], "polars.Series.arcsin": [[972, null]], "polars.Series.arcsinh": [[973, null]], "polars.Series.arctan": [[974, null]], "polars.Series.arctanh": [[975, null]], "polars.Series.arg_max": [[976, null]], "polars.Series.arg_min": [[977, null]], "polars.Series.arg_sort": [[978, null]], "polars.Series.arg_true": [[979, null]], "polars.Series.arg_unique": [[980, null]], "polars.Series.arr.all": [[981, null]], "polars.Series.arr.any": [[982, null]], "polars.Series.arr.arg_max": [[983, null]], "polars.Series.arr.arg_min": [[984, null]], "polars.Series.arr.contains": [[985, null]], "polars.Series.arr.count_matches": [[986, null]], "polars.Series.arr.explode": [[987, null]], "polars.Series.arr.first": [[988, null]], "polars.Series.arr.get": [[989, null]], "polars.Series.arr.join": [[990, null]], "polars.Series.arr.last": [[991, null]], "polars.Series.arr.max": [[992, null]], "polars.Series.arr.median": [[993, null]], "polars.Series.arr.min": [[994, null]], "polars.Series.arr.n_unique": [[995, null]], "polars.Series.arr.reverse": [[996, null]], "polars.Series.arr.shift": [[997, null]], "polars.Series.arr.sort": [[998, null]], "polars.Series.arr.std": [[999, null]], "polars.Series.arr.sum": [[1000, null]], "polars.Series.arr.to_list": [[1001, null]], "polars.Series.arr.to_struct": [[1002, null]], "polars.Series.arr.unique": [[1003, null]], "polars.Series.arr.var": [[1004, null]], "polars.Series.bin.contains": [[1005, null]], "polars.Series.bin.decode": [[1006, null]], "polars.Series.bin.encode": [[1007, null]], "polars.Series.bin.ends_with": [[1008, null]], "polars.Series.bin.reinterpret": [[1009, null]], "polars.Series.bin.size": [[1010, null]], "polars.Series.bin.starts_with": [[1011, null]], "polars.Series.bitwise_and": [[1012, null]], "polars.Series.bitwise_count_ones": [[1013, null]], "polars.Series.bitwise_count_zeros": [[1014, null]], "polars.Series.bitwise_leading_ones": [[1015, null]], "polars.Series.bitwise_leading_zeros": [[1016, null]], "polars.Series.bitwise_or": [[1017, null]], "polars.Series.bitwise_trailing_ones": [[1018, null]], "polars.Series.bitwise_trailing_zeros": [[1019, null]], "polars.Series.bitwise_xor": [[1020, null]], "polars.Series.bottom_k": [[1021, null]], "polars.Series.cast": [[1022, null]], "polars.Series.cat.ends_with": [[1023, null]], "polars.Series.cat.get_categories": [[1024, null]], "polars.Series.cat.is_local": [[1025, null]], "polars.Series.cat.len_bytes": [[1026, null]], "polars.Series.cat.len_chars": [[1027, null]], "polars.Series.cat.starts_with": [[1028, null]], "polars.Series.cat.to_local": [[1029, null]], "polars.Series.cat.uses_lexical_ordering": [[1030, null]], "polars.Series.cbrt": [[1031, null]], "polars.Series.ceil": [[1032, null]], "polars.Series.chunk_lengths": [[1033, null]], "polars.Series.clear": [[1034, null]], "polars.Series.clip": [[1035, null]], "polars.Series.clone": [[1036, null]], "polars.Series.cos": [[1037, null]], "polars.Series.cosh": [[1038, null]], "polars.Series.cot": [[1039, null]], "polars.Series.count": [[1040, null]], "polars.Series.cum_count": [[1041, null]], "polars.Series.cum_max": [[1042, null]], "polars.Series.cum_min": [[1043, null]], "polars.Series.cum_prod": [[1044, null]], "polars.Series.cum_sum": [[1045, null]], "polars.Series.cumulative_eval": [[1046, null]], "polars.Series.cut": [[1047, null]], "polars.Series.describe": [[1048, null]], "polars.Series.diff": [[1049, null]], "polars.Series.dot": [[1050, null]], "polars.Series.drop_nans": [[1051, null]], "polars.Series.drop_nulls": [[1052, null]], "polars.Series.dt.add_business_days": [[1053, null]], "polars.Series.dt.base_utc_offset": [[1054, null]], "polars.Series.dt.cast_time_unit": [[1055, null]], "polars.Series.dt.century": [[1056, null]], "polars.Series.dt.combine": [[1057, null]], "polars.Series.dt.convert_time_zone": [[1058, null]], "polars.Series.dt.date": [[1059, null]], "polars.Series.dt.datetime": [[1060, null]], "polars.Series.dt.day": [[1061, null]], "polars.Series.dt.dst_offset": [[1062, null]], "polars.Series.dt.epoch": [[1063, null]], "polars.Series.dt.hour": [[1064, null]], "polars.Series.dt.is_leap_year": [[1065, null]], "polars.Series.dt.iso_year": [[1066, null]], "polars.Series.dt.max": [[1067, null]], "polars.Series.dt.mean": [[1068, null]], "polars.Series.dt.median": [[1069, null]], "polars.Series.dt.microsecond": [[1070, null]], "polars.Series.dt.millennium": [[1071, null]], "polars.Series.dt.millisecond": [[1072, null]], "polars.Series.dt.min": [[1073, null]], "polars.Series.dt.minute": [[1074, null]], "polars.Series.dt.month": [[1075, null]], "polars.Series.dt.month_end": [[1076, null]], "polars.Series.dt.month_start": [[1077, null]], "polars.Series.dt.nanosecond": [[1078, null]], "polars.Series.dt.offset_by": [[1079, null]], "polars.Series.dt.ordinal_day": [[1080, null]], "polars.Series.dt.quarter": [[1081, null]], "polars.Series.dt.replace": [[1082, null]], "polars.Series.dt.replace_time_zone": [[1083, null]], "polars.Series.dt.round": [[1084, null]], "polars.Series.dt.second": [[1085, null]], "polars.Series.dt.strftime": [[1086, null]], "polars.Series.dt.time": [[1087, null]], "polars.Series.dt.timestamp": [[1088, null]], "polars.Series.dt.to_string": [[1089, null]], "polars.Series.dt.total_days": [[1090, null]], "polars.Series.dt.total_hours": [[1091, null]], "polars.Series.dt.total_microseconds": [[1092, null]], "polars.Series.dt.total_milliseconds": [[1093, null]], "polars.Series.dt.total_minutes": [[1094, null]], "polars.Series.dt.total_nanoseconds": [[1095, null]], "polars.Series.dt.total_seconds": [[1096, null]], "polars.Series.dt.truncate": [[1097, null]], "polars.Series.dt.week": [[1098, null]], "polars.Series.dt.weekday": [[1099, null]], "polars.Series.dt.with_time_unit": [[1100, null]], "polars.Series.dt.year": [[1101, null]], "polars.Series.dtype": [[1102, null]], "polars.Series.entropy": [[1103, null]], "polars.Series.eq": [[1104, null]], "polars.Series.eq_missing": [[1105, null]], "polars.Series.equals": [[1106, null]], "polars.Series.estimated_size": [[1107, null]], "polars.Series.ewm_mean": [[1108, null]], "polars.Series.ewm_mean_by": [[1109, null]], "polars.Series.ewm_std": [[1110, null]], "polars.Series.ewm_var": [[1111, null]], "polars.Series.exp": [[1112, null]], "polars.Series.explode": [[1113, null]], "polars.Series.extend": [[1114, null]], "polars.Series.extend_constant": [[1115, null]], "polars.Series.fill_nan": [[1116, null]], "polars.Series.fill_null": [[1117, null]], "polars.Series.filter": [[1118, null]], "polars.Series.first": [[1119, null]], "polars.Series.flags": [[1120, null]], "polars.Series.floor": [[1121, null]], "polars.Series.gather": [[1122, null]], "polars.Series.gather_every": [[1123, null]], "polars.Series.ge": [[1124, null]], "polars.Series.get_chunks": [[1125, null]], "polars.Series.gt": [[1126, null]], "polars.Series.has_nulls": [[1127, null]], "polars.Series.has_validity": [[1128, null]], "polars.Series.hash": [[1129, null]], "polars.Series.head": [[1130, null]], "polars.Series.hist": [[1131, null]], "polars.Series.implode": [[1132, null]], "polars.Series.index_of": [[1133, null]], "polars.Series.interpolate": [[1134, null]], "polars.Series.interpolate_by": [[1135, null]], "polars.Series.is_between": [[1136, null]], "polars.Series.is_duplicated": [[1137, null]], "polars.Series.is_empty": [[1138, null]], "polars.Series.is_finite": [[1139, null]], "polars.Series.is_first_distinct": [[1140, null]], "polars.Series.is_in": [[1141, null]], "polars.Series.is_infinite": [[1142, null]], "polars.Series.is_last_distinct": [[1143, null]], "polars.Series.is_nan": [[1144, null]], "polars.Series.is_not_nan": [[1145, null]], "polars.Series.is_not_null": [[1146, null]], "polars.Series.is_null": [[1147, null]], "polars.Series.is_sorted": [[1148, null]], "polars.Series.is_unique": [[1149, null]], "polars.Series.item": [[1150, null]], "polars.Series.kurtosis": [[1151, null]], "polars.Series.last": [[1152, null]], "polars.Series.le": [[1153, null]], "polars.Series.len": [[1154, null]], "polars.Series.limit": [[1155, null]], "polars.Series.list.all": [[1156, null]], "polars.Series.list.any": [[1157, null]], "polars.Series.list.arg_max": [[1158, null]], "polars.Series.list.arg_min": [[1159, null]], "polars.Series.list.concat": [[1160, null]], "polars.Series.list.contains": [[1161, null]], "polars.Series.list.count_matches": [[1162, null]], "polars.Series.list.diff": [[1163, null]], "polars.Series.list.drop_nulls": [[1164, null]], "polars.Series.list.eval": [[1165, null]], "polars.Series.list.explode": [[1166, null]], "polars.Series.list.first": [[1167, null]], "polars.Series.list.gather": [[1168, null]], "polars.Series.list.gather_every": [[1169, null]], "polars.Series.list.get": [[1170, null]], "polars.Series.list.head": [[1171, null]], "polars.Series.list.join": [[1172, null]], "polars.Series.list.last": [[1173, null]], "polars.Series.list.len": [[1174, null]], "polars.Series.list.max": [[1175, null]], "polars.Series.list.mean": [[1176, null]], "polars.Series.list.median": [[1177, null]], "polars.Series.list.min": [[1178, null]], "polars.Series.list.n_unique": [[1179, null]], "polars.Series.list.reverse": [[1180, null]], "polars.Series.list.sample": [[1181, null]], "polars.Series.list.set_difference": [[1182, null]], "polars.Series.list.set_intersection": [[1183, null]], "polars.Series.list.set_symmetric_difference": [[1184, null]], "polars.Series.list.set_union": [[1185, null]], "polars.Series.list.shift": [[1186, null]], "polars.Series.list.slice": [[1187, null]], "polars.Series.list.sort": [[1188, null]], "polars.Series.list.std": [[1189, null]], "polars.Series.list.sum": [[1190, null]], "polars.Series.list.tail": [[1191, null]], "polars.Series.list.to_array": [[1192, null]], "polars.Series.list.to_struct": [[1193, null]], "polars.Series.list.unique": [[1194, null]], "polars.Series.list.var": [[1195, null]], "polars.Series.log": [[1196, null]], "polars.Series.log10": [[1197, null]], "polars.Series.log1p": [[1198, null]], "polars.Series.lower_bound": [[1199, null]], "polars.Series.lt": [[1200, null]], "polars.Series.map_elements": [[1201, null]], "polars.Series.max": [[1202, null]], "polars.Series.mean": [[1203, null]], "polars.Series.median": [[1204, null]], "polars.Series.min": [[1205, null]], "polars.Series.mode": [[1206, null]], "polars.Series.n_chunks": [[1207, null]], "polars.Series.n_unique": [[1208, null]], "polars.Series.name": [[1209, null]], "polars.Series.nan_max": [[1210, null]], "polars.Series.nan_min": [[1211, null]], "polars.Series.ne": [[1212, null]], "polars.Series.ne_missing": [[1213, null]], "polars.Series.new_from_index": [[1214, null]], "polars.Series.not_": [[1215, null]], "polars.Series.null_count": [[1216, null]], "polars.Series.pct_change": [[1217, null]], "polars.Series.peak_max": [[1218, null]], "polars.Series.peak_min": [[1219, null]], "polars.Series.pow": [[1220, null]], "polars.Series.product": [[1221, null]], "polars.Series.qcut": [[1222, null]], "polars.Series.quantile": [[1223, null]], "polars.Series.rank": [[1224, null]], "polars.Series.rechunk": [[1225, null]], "polars.Series.reinterpret": [[1226, null]], "polars.Series.rename": [[1227, null]], "polars.Series.replace": [[1228, null]], "polars.Series.replace_strict": [[1229, null]], "polars.Series.reshape": [[1230, null]], "polars.Series.reverse": [[1231, null]], "polars.Series.rle": [[1232, null]], "polars.Series.rle_id": [[1233, null]], "polars.Series.rolling_map": [[1234, null]], "polars.Series.rolling_max": [[1235, null]], "polars.Series.rolling_mean": [[1236, null]], "polars.Series.rolling_median": [[1237, null]], "polars.Series.rolling_min": [[1238, null]], "polars.Series.rolling_quantile": [[1239, null]], "polars.Series.rolling_skew": [[1240, null]], "polars.Series.rolling_std": [[1241, null]], "polars.Series.rolling_sum": [[1242, null]], "polars.Series.rolling_var": [[1243, null]], "polars.Series.round": [[1244, null]], "polars.Series.round_sig_figs": [[1245, null]], "polars.Series.sample": [[1246, null]], "polars.Series.scatter": [[1247, null]], "polars.Series.search_sorted": [[1248, null]], "polars.Series.set": [[1249, null]], "polars.Series.set_sorted": [[1250, null]], "polars.Series.shape": [[1251, null]], "polars.Series.shift": [[1252, null]], "polars.Series.shrink_dtype": [[1253, null]], "polars.Series.shrink_to_fit": [[1254, null]], "polars.Series.shuffle": [[1255, null]], "polars.Series.sign": [[1256, null]], "polars.Series.sin": [[1257, null]], "polars.Series.sinh": [[1258, null]], "polars.Series.skew": [[1259, null]], "polars.Series.slice": [[1260, null]], "polars.Series.sort": [[1261, null]], "polars.Series.sqrt": [[1262, null]], "polars.Series.std": [[1263, null]], "polars.Series.str.concat": [[1264, null]], "polars.Series.str.contains": [[1265, null]], "polars.Series.str.contains_any": [[1266, null]], "polars.Series.str.count_matches": [[1267, null]], "polars.Series.str.decode": [[1268, null]], "polars.Series.str.encode": [[1269, null]], "polars.Series.str.ends_with": [[1270, null]], "polars.Series.str.escape_regex": [[1271, null]], "polars.Series.str.explode": [[1272, null]], "polars.Series.str.extract": [[1273, null]], "polars.Series.str.extract_all": [[1274, null]], "polars.Series.str.extract_groups": [[1275, null]], "polars.Series.str.extract_many": [[1276, null]], "polars.Series.str.find": [[1277, null]], "polars.Series.str.find_many": [[1278, null]], "polars.Series.str.head": [[1279, null]], "polars.Series.str.join": [[1280, null]], "polars.Series.str.json_decode": [[1281, null]], "polars.Series.str.json_path_match": [[1282, null]], "polars.Series.str.len_bytes": [[1283, null]], "polars.Series.str.len_chars": [[1284, null]], "polars.Series.str.normalize": [[1285, null]], "polars.Series.str.pad_end": [[1286, null]], "polars.Series.str.pad_start": [[1287, null]], "polars.Series.str.replace": [[1288, null]], "polars.Series.str.replace_all": [[1289, null]], "polars.Series.str.replace_many": [[1290, null]], "polars.Series.str.reverse": [[1291, null]], "polars.Series.str.slice": [[1292, null]], "polars.Series.str.split": [[1293, null]], "polars.Series.str.split_exact": [[1294, null]], "polars.Series.str.splitn": [[1295, null]], "polars.Series.str.starts_with": [[1296, null]], "polars.Series.str.strip_chars": [[1297, null]], "polars.Series.str.strip_chars_end": [[1298, null]], "polars.Series.str.strip_chars_start": [[1299, null]], "polars.Series.str.strip_prefix": [[1300, null]], "polars.Series.str.strip_suffix": [[1301, null]], "polars.Series.str.strptime": [[1302, null]], "polars.Series.str.tail": [[1303, null]], "polars.Series.str.to_date": [[1304, null]], "polars.Series.str.to_datetime": [[1305, null]], "polars.Series.str.to_decimal": [[1306, null]], "polars.Series.str.to_integer": [[1307, null]], "polars.Series.str.to_lowercase": [[1308, null]], "polars.Series.str.to_time": [[1309, null]], "polars.Series.str.to_titlecase": [[1310, null]], "polars.Series.str.to_uppercase": [[1311, null]], "polars.Series.str.zfill": [[1312, null]], "polars.Series.struct.field": [[1313, null]], "polars.Series.struct.fields": [[1314, null]], "polars.Series.struct.json_encode": [[1315, null]], "polars.Series.struct.rename_fields": [[1316, null]], "polars.Series.struct.schema": [[1317, null]], "polars.Series.struct.unnest": [[1318, null]], "polars.Series.sum": [[1319, null]], "polars.Series.tail": [[1320, null]], "polars.Series.tan": [[1321, null]], "polars.Series.tanh": [[1322, null]], "polars.Series.to_arrow": [[1323, null]], "polars.Series.to_dummies": [[1324, null]], "polars.Series.to_frame": [[1325, null]], "polars.Series.to_init_repr": [[1326, null]], "polars.Series.to_jax": [[1327, null]], "polars.Series.to_list": [[1328, null]], "polars.Series.to_numpy": [[1329, null]], "polars.Series.to_pandas": [[1330, null]], "polars.Series.to_physical": [[1331, null]], "polars.Series.to_torch": [[1332, null]], "polars.Series.top_k": [[1333, null]], "polars.Series.unique": [[1334, null]], "polars.Series.unique_counts": [[1335, null]], "polars.Series.upper_bound": [[1336, null]], "polars.Series.value_counts": [[1337, null]], "polars.Series.var": [[1338, null]], "polars.Series.zip_with": [[1339, null]], "polars.StringCache": [[55, null]], "polars.align_frames": [[56, null]], "polars.all": [[752, null]], "polars.all_horizontal": [[753, null]], "polars.any": [[754, null]], "polars.any_horizontal": [[755, null]], "polars.api.register_dataframe_namespace": [[57, null]], "polars.api.register_expr_namespace": [[58, null]], "polars.api.register_lazyframe_namespace": [[59, null]], "polars.api.register_series_namespace": [[60, null]], "polars.approx_n_unique": [[756, null]], "polars.arange": [[757, null]], "polars.arctan2": [[758, null]], "polars.arctan2d": [[759, null]], "polars.arg_sort_by": [[760, null]], "polars.arg_where": [[761, null]], "polars.build_info": [[61, null]], "polars.business_day_count": [[762, null]], "polars.catalog.unity.CatalogInfo": [[190, null]], "polars.catalog.unity.ColumnInfo": [[191, null]], "polars.catalog.unity.DataSourceFormat": [[192, null]], "polars.catalog.unity.NamespaceInfo": [[193, null]], "polars.catalog.unity.TableInfo": [[194, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[195, null]], "polars.catalog.unity.TableType": [[196, null]], "polars.coalesce": [[763, null]], "polars.col": [[833, null]], "polars.collect_all": [[62, null]], "polars.collect_all_async": [[63, null]], "polars.concat": [[64, null]], "polars.concat_arr": [[764, null]], "polars.concat_list": [[765, null]], "polars.concat_str": [[766, null]], "polars.corr": [[767, null]], "polars.count": [[768, null]], "polars.cov": [[769, null]], "polars.cum_count": [[770, null]], "polars.cum_fold": [[771, null]], "polars.cum_reduce": [[772, null]], "polars.cum_sum": [[773, null]], "polars.cum_sum_horizontal": [[774, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[324, null]], "polars.dataframe.group_by.GroupBy.agg": [[325, null]], "polars.dataframe.group_by.GroupBy.all": [[326, null]], "polars.dataframe.group_by.GroupBy.count": [[327, null]], "polars.dataframe.group_by.GroupBy.first": [[328, null]], "polars.dataframe.group_by.GroupBy.head": [[329, null]], "polars.dataframe.group_by.GroupBy.last": [[330, null]], "polars.dataframe.group_by.GroupBy.len": [[331, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[332, null]], "polars.dataframe.group_by.GroupBy.max": [[333, null]], "polars.dataframe.group_by.GroupBy.mean": [[334, null]], "polars.dataframe.group_by.GroupBy.median": [[335, null]], "polars.dataframe.group_by.GroupBy.min": [[336, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[337, null]], "polars.dataframe.group_by.GroupBy.quantile": [[338, null]], "polars.dataframe.group_by.GroupBy.sum": [[339, null]], "polars.dataframe.group_by.GroupBy.tail": [[340, null]], "polars.datatypes.Array": [[65, null]], "polars.datatypes.Binary": [[66, null]], "polars.datatypes.Boolean": [[67, null]], "polars.datatypes.Categorical": [[68, null]], "polars.datatypes.DataType": [[69, null]], "polars.datatypes.Date": [[70, null]], "polars.datatypes.Datetime": [[71, null]], "polars.datatypes.Decimal": [[72, null]], "polars.datatypes.Duration": [[73, null]], "polars.datatypes.Enum": [[74, null]], "polars.datatypes.Field": [[75, null]], "polars.datatypes.Float32": [[76, null]], "polars.datatypes.Float64": [[77, null]], "polars.datatypes.Int128": [[78, null]], "polars.datatypes.Int16": [[79, null]], "polars.datatypes.Int32": [[80, null]], "polars.datatypes.Int64": [[81, null]], "polars.datatypes.Int8": [[82, null]], "polars.datatypes.List": [[83, null]], "polars.datatypes.Null": [[84, null]], "polars.datatypes.Object": [[85, null]], "polars.datatypes.String": [[86, null]], "polars.datatypes.Struct": [[87, null]], "polars.datatypes.Time": [[88, null]], "polars.datatypes.UInt16": [[89, null]], "polars.datatypes.UInt32": [[90, null]], "polars.datatypes.UInt64": [[91, null]], "polars.datatypes.UInt8": [[92, null]], "polars.datatypes.Unknown": [[93, null]], "polars.datatypes.Utf8": [[94, null]], "polars.date": [[775, null]], "polars.date_range": [[776, null]], "polars.date_ranges": [[777, null]], "polars.datetime": [[778, null]], "polars.datetime_range": [[779, null]], "polars.datetime_ranges": [[780, null]], "polars.defer": [[95, null]], "polars.disable_string_cache": [[96, null]], "polars.duration": [[781, null]], "polars.element": [[782, null]], "polars.enable_string_cache": [[97, null]], "polars.escape_regex": [[98, null]], "polars.exceptions.CategoricalRemappingWarning": [[99, null]], "polars.exceptions.ChronoFormatWarning": [[100, null]], "polars.exceptions.ColumnNotFoundError": [[101, null]], "polars.exceptions.ComputeError": [[102, null]], "polars.exceptions.CustomUFuncWarning": [[103, null]], "polars.exceptions.DataOrientationWarning": [[104, null]], "polars.exceptions.DuplicateError": [[105, null]], "polars.exceptions.InvalidOperationError": [[106, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[107, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[108, null]], "polars.exceptions.NoDataError": [[109, null]], "polars.exceptions.NoRowsReturnedError": [[110, null]], "polars.exceptions.OutOfBoundsError": [[111, null]], "polars.exceptions.PanicException": [[112, null]], "polars.exceptions.ParameterCollisionError": [[113, null]], "polars.exceptions.PerformanceWarning": [[114, null]], "polars.exceptions.PolarsError": [[115, null]], "polars.exceptions.PolarsInefficientMapWarning": [[116, null]], "polars.exceptions.PolarsWarning": [[117, null]], "polars.exceptions.RowsError": [[118, null]], "polars.exceptions.SQLInterfaceError": [[119, null]], "polars.exceptions.SQLSyntaxError": [[120, null]], "polars.exceptions.SchemaError": [[121, null]], "polars.exceptions.SchemaFieldNotFoundError": [[122, null]], "polars.exceptions.ShapeError": [[123, null]], "polars.exceptions.StringCacheMismatchError": [[124, null]], "polars.exceptions.StructFieldNotFoundError": [[125, null]], "polars.exceptions.TooManyRowsReturnedError": [[126, null]], "polars.exceptions.UnstableWarning": [[127, null]], "polars.exceptions.UnsuitableSQLError": [[128, null]], "polars.exclude": [[783, null]], "polars.explain_all": [[129, null]], "polars.first": [[784, null]], "polars.fold": [[785, null]], "polars.format": [[786, null]], "polars.from_arrow": [[130, null]], "polars.from_dataframe": [[131, null]], "polars.from_dict": [[132, null]], "polars.from_dicts": [[133, null]], "polars.from_epoch": [[787, null]], "polars.from_numpy": [[134, null]], "polars.from_pandas": [[135, null]], "polars.from_records": [[136, null]], "polars.from_repr": [[137, null]], "polars.get_index_type": [[138, null]], "polars.groups": [[788, null]], "polars.head": [[789, null]], "polars.implode": [[790, null]], "polars.int_range": [[791, null]], "polars.int_ranges": [[792, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[139, null]], "polars.io.plugins.register_io_source": [[140, null]], "polars.json_normalize": [[141, null]], "polars.last": [[793, null]], "polars.lazyframe.engine_config.GPUEngine": [[928, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[929, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[930, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[931, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[932, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[933, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[934, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[935, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[936, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[937, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[938, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[939, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[940, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[941, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[942, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[943, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[944, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[945, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[946, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[947, null]], "polars.len": [[794, null]], "polars.linear_space": [[795, null]], "polars.linear_spaces": [[796, null]], "polars.lit": [[797, null]], "polars.map_batches": [[798, null]], "polars.map_groups": [[799, null]], "polars.max": [[800, null]], "polars.max_horizontal": [[801, null]], "polars.mean": [[802, null]], "polars.mean_horizontal": [[803, null]], "polars.median": [[804, null]], "polars.min": [[805, null]], "polars.min_horizontal": [[806, null]], "polars.n_unique": [[807, null]], "polars.nth": [[808, null]], "polars.ones": [[809, null]], "polars.plugins.register_plugin_function": [[142, null]], "polars.quantile": [[810, null]], "polars.read_avro": [[143, null]], "polars.read_clipboard": [[144, null]], "polars.read_csv": [[145, null]], "polars.read_csv_batched": [[146, null]], "polars.read_database": [[147, null]], "polars.read_database_uri": [[148, null]], "polars.read_delta": [[149, null]], "polars.read_excel": [[150, null]], "polars.read_ipc": [[151, null]], "polars.read_ipc_schema": [[152, null]], "polars.read_ipc_stream": [[153, null]], "polars.read_json": [[154, null]], "polars.read_ndjson": [[155, null]], "polars.read_ods": [[156, null]], "polars.read_parquet": [[157, null]], "polars.read_parquet_schema": [[158, null]], "polars.reduce": [[811, null]], "polars.repeat": [[812, null]], "polars.rolling_corr": [[813, null]], "polars.rolling_cov": [[814, null]], "polars.scan_csv": [[159, null]], "polars.scan_delta": [[160, null]], "polars.scan_iceberg": [[161, null]], "polars.scan_ipc": [[162, null]], "polars.scan_ndjson": [[163, null]], "polars.scan_parquet": [[164, null]], "polars.scan_pyarrow_dataset": [[165, null]], "polars.select": [[815, null]], "polars.set_random_seed": [[166, null]], "polars.show_versions": [[167, null]], "polars.sql": [[816, null]], "polars.sql_expr": [[817, null]], "polars.std": [[818, null]], "polars.struct": [[819, null]], "polars.sum": [[820, null]], "polars.sum_horizontal": [[821, null]], "polars.tail": [[822, null]], "polars.testing.assert_frame_equal": [[168, null]], "polars.testing.assert_frame_not_equal": [[169, null]], "polars.testing.assert_series_equal": [[170, null]], "polars.testing.assert_series_not_equal": [[171, null]], "polars.testing.parametric.column": [[172, null]], "polars.testing.parametric.columns": [[173, null]], "polars.testing.parametric.create_list_strategy": [[174, null]], "polars.testing.parametric.dataframes": [[175, null]], "polars.testing.parametric.dtypes": [[176, null]], "polars.testing.parametric.lists": [[177, null]], "polars.testing.parametric.load_profile": [[178, null]], "polars.testing.parametric.series": [[179, null]], "polars.testing.parametric.set_profile": [[180, null]], "polars.thread_pool_size": [[181, null]], "polars.threadpool_size": [[182, null]], "polars.time": [[823, null]], "polars.time_range": [[824, null]], "polars.time_ranges": [[825, null]], "polars.using_string_cache": [[183, null]], "polars.var": [[826, null]], "polars.when": [[827, null]], "polars.zeros": [[828, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[201, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[961, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[202, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[962, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[203, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1376, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1376, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[204, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[963, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[184, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[190, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[191, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[193, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[194, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[65, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[66, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[67, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[68, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[69, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[70, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[71, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[72, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[73, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[74, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[75, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[76, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[77, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[78, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[79, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[80, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[81, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[82, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[83, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[84, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[85, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[86, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[87, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[88, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[89, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[90, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[91, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[92, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[93, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[928, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[52, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[53, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[54, "polars.PartitionParted.__init__", false]], "__init__() (polars.sqlcontext method)": [[1376, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[55, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[172, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[324, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[354, "polars.Expr.abs", false]], "abs() (polars.series method)": [[964, "polars.Series.abs", false]], "add() (polars.expr method)": [[355, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[443, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1053, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[325, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[929, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[356, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[357, "polars.Expr.alias", false]], "alias() (polars.series method)": [[965, "polars.Series.alias", false]], "align_frames() (in module polars)": [[56, "polars.align_frames", false]], "all() (in module polars)": [[752, "polars.all", false]], "all() (in module polars.selectors)": [[959, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[326, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[358, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[374, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[539, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[930, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[966, "polars.Series.all", false]], "all() (polars.series.arr method)": [[981, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1156, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[753, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[959, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[959, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[359, "polars.Expr.and_", false]], "any() (in module polars)": [[754, "polars.any", false]], "any() (polars.expr method)": [[360, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[375, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[540, "polars.Expr.list.any", false]], "any() (polars.series method)": [[967, "polars.Series.any", false]], "any() (polars.series.arr method)": [[982, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1157, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[755, "polars.any_horizontal", false]], "append() (polars.expr method)": [[361, "polars.Expr.append", false]], "append() (polars.series method)": [[968, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[756, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[205, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[362, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[852, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[969, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[757, "polars.arange", false]], "arccos() (polars.expr method)": [[363, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[970, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[364, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[971, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[365, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[972, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[366, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[973, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[367, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[974, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[758, "polars.arctan2", false]], "arctan2d() (in module polars)": [[759, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[368, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[975, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[369, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[376, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[541, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[976, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[983, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1158, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[370, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[377, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[542, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[977, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[984, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1159, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[371, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[978, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[760, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[372, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[979, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[373, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[980, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[761, "polars.arg_where", false]], "array (class in polars.datatypes)": [[65, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[168, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[169, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[170, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[171, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[398, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[444, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1054, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[66, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[959, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[406, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1012, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[407, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1013, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[408, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1014, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[409, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1015, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[410, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1016, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[411, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1017, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[412, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1018, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[413, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1019, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[414, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1020, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[67, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[959, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[206, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[415, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[853, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1021, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[416, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[61, "polars.build_info", false]], "business_day_count() (in module polars)": [[762, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[959, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[959, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[959, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[854, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[945, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[207, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[417, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[855, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1022, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[445, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1055, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[184, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[190, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[68, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[959, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[99, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[423, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1031, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[424, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1032, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[446, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1056, "polars.Series.dt.century", false]], "chronoformatwarning": [[100, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1033, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[208, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[856, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1034, "polars.Series.clear", false]], "clip() (polars.expr method)": [[425, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1035, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[209, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[857, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1036, "polars.Series.clone", false]], "coalesce() (in module polars)": [[763, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[858, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[62, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[63, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[859, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[210, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[860, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[172, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[191, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[101, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[211, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[861, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[173, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[447, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1057, "polars.Series.dt.combine", false]], "computeerror": [[102, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[64, "polars.concat", false]], "concat() (polars.expr.list method)": [[543, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[682, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1160, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1264, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[764, "polars.concat_arr", false]], "concat_list() (in module polars)": [[765, "polars.concat_list", false]], "concat_str() (in module polars)": [[766, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[959, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[378, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[399, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[544, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[683, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[985, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1005, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1161, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1265, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[684, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1266, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[448, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1058, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[767, "polars.corr", false]], "corr() (polars.dataframe method)": [[212, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[426, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1037, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[427, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1038, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[428, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1039, "polars.Series.cot", false]], "count() (in module polars)": [[768, "polars.count", false]], "count() (polars.dataframe method)": [[213, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[327, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[429, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[862, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[931, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1040, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[379, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[545, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[685, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[986, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1162, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1267, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[769, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[174, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[770, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[430, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1041, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[771, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[431, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1042, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[432, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1043, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[433, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1044, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[772, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[773, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[434, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1045, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[774, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[435, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1046, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[103, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[436, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1047, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[175, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[104, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[192, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[69, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[70, "polars.datatypes.Date", false]], "date() (in module polars)": [[775, "polars.date", false]], "date() (in module polars.selectors)": [[959, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[449, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1059, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[776, "polars.date_range", false]], "date_ranges() (in module polars)": [[777, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[71, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[778, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[959, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[450, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1060, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[779, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[780, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[451, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1061, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[72, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[959, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[400, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[686, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1006, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1268, "polars.Series.str.decode", false]], "defer() (in module polars)": [[95, "polars.defer", false]], "degrees() (polars.expr method)": [[437, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[214, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[863, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1048, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[215, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[438, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[864, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[439, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[546, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1049, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1163, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[959, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[96, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[440, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1050, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[216, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[865, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[217, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[218, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[441, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[866, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1051, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[219, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[442, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[547, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[867, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1052, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1164, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[452, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1062, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1102, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[220, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[868, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[176, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[105, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[73, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[781, "polars.duration", false]], "duration() (in module polars.selectors)": [[959, "polars.selectors.duration", false]], "element() (in module polars)": [[782, "polars.element", false]], "enable_string_cache() (in module polars)": [[97, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[401, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[687, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1007, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1269, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[959, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[402, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[418, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[688, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1008, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1023, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1270, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[488, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1103, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[74, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[453, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1063, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[489, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[589, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1104, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[490, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1105, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[221, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1106, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[98, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[689, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1271, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[222, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1107, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[548, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1165, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[491, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1108, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[492, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1109, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[493, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1110, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[494, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1111, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[783, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[959, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[495, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1357, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1358, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[496, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1112, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[959, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[869, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[129, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[223, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[497, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[380, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[549, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[690, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[870, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1113, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[987, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1166, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1272, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[224, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1114, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[498, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1115, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[691, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1273, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[692, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1274, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[693, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1275, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[694, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1276, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[946, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[947, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[75, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[731, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1313, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1314, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[225, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[499, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[871, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1116, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[226, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[500, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[872, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1117, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[227, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[501, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[873, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1118, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[695, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1277, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[696, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1278, "polars.Series.str.find_many", false]], "first() (in module polars)": [[784, "polars.first", false]], "first() (in module polars.selectors)": [[959, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[328, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[502, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[381, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[550, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[874, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[932, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1119, "polars.Series.first", false]], "first() (polars.series.arr method)": [[988, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1167, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[228, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1120, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[503, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[959, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[76, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[77, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[504, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1121, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[505, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[785, "polars.fold", false]], "fold() (polars.dataframe method)": [[229, "polars.DataFrame.fold", false]], "format() (in module polars)": [[786, "polars.format", false]], "forward_fill() (polars.expr method)": [[506, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[130, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[131, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[132, "polars.from_dict", false]], "from_dicts() (in module polars)": [[133, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[787, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[507, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[134, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[135, "polars.from_pandas", false]], "from_records() (in module polars)": [[136, "polars.from_records", false]], "from_repr() (in module polars)": [[137, "polars.from_repr", false]], "gather() (polars.expr method)": [[508, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[551, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1122, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1168, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[230, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[509, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[552, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[875, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1123, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1169, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[510, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1124, "polars.Series.ge", false]], "get() (polars.expr method)": [[511, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[382, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[553, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[989, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1170, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[419, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1024, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1125, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[231, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[232, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[233, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[138, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[195, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[185, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[234, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[928, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[235, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[876, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[236, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[877, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[788, "polars.groups", false]], "gt() (polars.expr method)": [[512, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1126, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[590, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[513, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1127, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1128, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[514, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1129, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[237, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[789, "polars.head", false]], "head() (polars.dataframe method)": [[238, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[329, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[515, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[554, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[697, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[878, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[933, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1130, "polars.Series.head", false]], "head() (polars.series.list method)": [[1171, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1279, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[239, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[516, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1131, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[454, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1064, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[240, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[790, "polars.implode", false]], "implode() (polars.expr method)": [[517, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1132, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[518, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1133, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[241, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[519, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[879, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[78, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[79, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[80, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[81, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[82, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[791, "polars.int_range", false]], "int_ranges() (in module polars)": [[792, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[959, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[242, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[520, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[880, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1134, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[521, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1135, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[106, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[522, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1136, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[591, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[592, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[243, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[523, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1137, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[244, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1138, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[524, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1139, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[525, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1140, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[526, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1141, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[527, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1142, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[528, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1143, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[455, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1065, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[593, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1025, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[529, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1144, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[530, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1145, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[531, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1146, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[532, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1147, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[594, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[959, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1148, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[245, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[533, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1149, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[456, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1066, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[246, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1150, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[247, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[248, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[249, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[250, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[383, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[555, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[698, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[881, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[990, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1172, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1280, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[251, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[882, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[252, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[883, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[699, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1281, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[732, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1315, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[141, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[700, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1282, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[609, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[534, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1151, "polars.Series.kurtosis", false]], "last() (in module polars)": [[793, "polars.last", false]], "last() (in module polars.selectors)": [[959, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[535, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[384, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[556, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[884, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[934, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1152, "polars.Series.last", false]], "last() (polars.series.arr method)": [[991, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1173, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[253, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[885, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[536, "polars.Expr.le", false]], "le() (polars.series method)": [[1153, "polars.Series.le", false]], "len() (in module polars)": [[794, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[537, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[557, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[935, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1154, "polars.Series.len", false]], "len() (polars.series.list method)": [[1174, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[420, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[701, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1026, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1283, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[421, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[702, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1027, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1284, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[254, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[538, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[886, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1155, "polars.Series.limit", false]], "linear_space() (in module polars)": [[795, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[796, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[83, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[186, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[187, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[188, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[177, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[797, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[178, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[579, "polars.Expr.log", false]], "log() (polars.series method)": [[1196, "polars.Series.log", false]], "log10() (polars.expr method)": [[580, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1197, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[581, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1198, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[582, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1199, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[583, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1200, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[610, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[798, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[584, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[887, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[585, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1201, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[611, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[799, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[936, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[255, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[107, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[959, "polars.selectors.matches", false]], "max() (in module polars)": [[800, "polars.max", false]], "max() (polars.dataframe method)": [[256, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[586, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[385, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[558, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[888, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[937, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1202, "polars.Series.max", false]], "max() (polars.series.arr method)": [[992, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1067, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1175, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[801, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[257, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[802, "polars.mean", false]], "mean() (polars.dataframe method)": [[258, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[587, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[559, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[889, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[938, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1203, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1068, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1176, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[803, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[259, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[804, "polars.median", false]], "median() (polars.dataframe method)": [[260, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[588, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[386, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[560, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[890, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[939, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1204, "polars.Series.median", false]], "median() (polars.series.arr method)": [[993, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1069, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1177, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[261, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[891, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[262, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[892, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[457, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1070, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[458, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1071, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[459, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1072, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[805, "polars.min", false]], "min() (polars.dataframe method)": [[263, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[604, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[387, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[561, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[893, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[940, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1205, "polars.Series.min", false]], "min() (polars.series.arr method)": [[994, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1073, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1178, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[806, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[264, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[460, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1074, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[605, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[606, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1206, "polars.Series.mode", false]], "module": [[959, "module-polars.selectors", false]], "moduleupgraderequirederror": [[108, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[461, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1075, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[462, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1076, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[463, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1077, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[607, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[265, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1207, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[807, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[266, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[608, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[388, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[562, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[941, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1208, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[995, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1179, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1209, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[193, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[618, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1210, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[619, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1211, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[464, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1078, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[620, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[595, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1212, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[621, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1213, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[622, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1214, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[139, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[109, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[703, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1285, "polars.Series.str.normalize", false]], "norowsreturnederror": [[110, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[623, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1215, "polars.Series.not_", false]], "nth() (in module polars)": [[808, "polars.nth", false]], "null (class in polars.datatypes)": [[84, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[267, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[624, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[894, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1216, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[959, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[85, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[465, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1079, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[809, "polars.ones", false]], "or_() (polars.expr method)": [[625, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[466, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1080, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[111, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[596, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[626, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[704, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1286, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[705, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1287, "polars.Series.str.pad_start", false]], "panicexception": [[112, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[113, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[268, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[52, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[53, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[54, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[627, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1217, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[628, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1218, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[629, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1219, "polars.Series.peak_min", false]], "performancewarning": [[114, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[269, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[630, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[895, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[270, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[349, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1353, "polars.Series.plot", false]], "polars.selectors": [[959, "module-polars.selectors", false]], "polarserror": [[115, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[116, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[117, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[597, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[631, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1220, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[612, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[613, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[271, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[632, "polars.Expr.product", false]], "product() (polars.series method)": [[1221, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[896, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[633, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1222, "polars.Series.qcut", false]], "quantile() (in module polars)": [[810, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[272, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[634, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[897, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[942, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1223, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[467, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1081, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[635, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[636, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1224, "polars.Series.rank", false]], "read_avro() (in module polars)": [[143, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[144, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[145, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[146, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[147, "polars.read_database", false]], "read_database_uri() (in module polars)": [[148, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[149, "polars.read_delta", false]], "read_excel() (in module polars)": [[150, "polars.read_excel", false]], "read_ipc() (in module polars)": [[151, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[152, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[153, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[154, "polars.read_json", false]], "read_ndjson() (in module polars)": [[155, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[156, "polars.read_ods", false]], "read_parquet() (in module polars)": [[157, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[158, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[273, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[637, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1225, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[811, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1359, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[57, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[58, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1360, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[140, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[59, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1361, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[142, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[60, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[638, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[403, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1226, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1009, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[898, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[274, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[899, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[275, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[900, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1227, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[733, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1316, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[812, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[639, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[640, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[468, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[706, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1228, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1082, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1288, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[707, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1289, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[276, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[708, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1290, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[641, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1229, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[469, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1083, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[642, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1230, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[277, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[643, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[389, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[563, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[709, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[901, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1231, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[996, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1180, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1291, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[644, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1232, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[645, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1233, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[278, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[646, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[902, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[813, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[814, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[647, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1234, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[648, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1235, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[649, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[650, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1236, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[651, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[652, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1237, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[653, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[654, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1238, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[655, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[656, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1239, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[657, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[658, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1240, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[659, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1241, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[660, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[661, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1242, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[662, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[663, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1243, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[664, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[598, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[665, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[470, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1244, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1084, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[666, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1245, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[279, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[280, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[281, "polars.DataFrame.rows_by_key", false]], "rowserror": [[118, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[282, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[667, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[564, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1246, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1181, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[159, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[160, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[161, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[162, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[163, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[164, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[165, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[189, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1247, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[283, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[903, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1317, "polars.Series.struct.schema", false]], "schemaerror": [[121, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[122, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[668, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1248, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[471, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1085, "polars.Series.dt.second", false]], "select() (in module polars)": [[815, "polars.select", false]], "select() (polars.dataframe method)": [[284, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[904, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[285, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[905, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[286, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[599, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[906, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1249, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[565, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1182, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[566, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1183, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[166, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[287, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[669, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[907, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1250, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[567, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1184, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[568, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1185, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[288, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1251, "polars.Series.shape", false]], "shapeerror": [[123, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[289, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[670, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[390, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[569, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[908, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1252, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[997, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1186, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[600, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[909, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[167, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[671, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1253, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[290, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1254, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[672, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1255, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[673, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1256, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[959, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[674, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1257, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[675, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1258, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[404, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1010, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[676, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1259, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[291, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[677, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[570, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[710, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[910, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1260, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1187, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1292, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[292, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[678, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[391, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[571, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[911, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1261, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[998, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1188, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[679, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[711, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1293, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[712, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1294, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[713, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1295, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[816, "polars.sql", false]], "sql() (polars.dataframe method)": [[293, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[912, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[817, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1376, "polars.SQLContext", false]], "sqlinterfaceerror": [[119, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[120, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[680, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1262, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[959, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[405, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[422, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[714, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1011, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1028, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1296, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[818, "polars.std", false]], "std() (polars.dataframe method)": [[294, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[681, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[392, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[572, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[913, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1263, "polars.Series.std", false]], "std() (polars.series.arr method)": [[999, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1189, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[472, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1086, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[86, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[959, "polars.selectors.string", false]], "stringcache (class in polars)": [[55, "polars.StringCache", false]], "stringcachemismatcherror": [[124, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[715, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1297, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[716, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1298, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[717, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1299, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[718, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1300, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[719, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1301, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[720, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1302, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[87, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[819, "polars.struct", false]], "structfieldnotfounderror": [[125, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[350, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[736, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[614, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[615, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[820, "polars.sum", false]], "sum() (polars.dataframe method)": [[295, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[737, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[393, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[573, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[914, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[943, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1319, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1000, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1190, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[821, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[296, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[194, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1362, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[196, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[822, "polars.tail", false]], "tail() (polars.dataframe method)": [[297, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[738, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[574, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[721, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[915, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[944, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1320, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1191, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1303, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[739, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1321, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[740, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1322, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[959, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[181, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[182, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[88, "polars.datatypes.Time", false]], "time() (in module polars)": [[823, "polars.time", false]], "time() (in module polars.selectors)": [[959, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[473, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1087, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[824, "polars.time_range", false]], "time_ranges() (in module polars)": [[825, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[474, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1088, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[575, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1192, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[298, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1323, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[722, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1304, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[723, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1305, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[724, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1306, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[299, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[300, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[301, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1324, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1325, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[302, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1326, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[725, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1307, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[303, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1327, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[394, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1328, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1001, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1029, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[616, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[726, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1308, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[304, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1329, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[305, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1330, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[741, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1331, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[306, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[475, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1089, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[307, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[395, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[576, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1002, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1193, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[727, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1309, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[728, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1310, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[308, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1332, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[617, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[729, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1311, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[126, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[309, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[742, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[916, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1333, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[743, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[476, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1090, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[477, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1091, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[478, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1092, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[479, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1093, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[480, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1094, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[481, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1095, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[482, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1096, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[310, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[601, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[744, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[483, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1097, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[89, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[90, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[91, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[92, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[602, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[311, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[745, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[396, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[577, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[917, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1334, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1003, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1194, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[746, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1335, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[93, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[312, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[734, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[918, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1318, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[313, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[919, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1363, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[959, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[127, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[314, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[128, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[315, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[920, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[747, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1336, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[316, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1030, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[183, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[94, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[748, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1337, "polars.Series.value_counts", false]], "var() (in module polars)": [[826, "polars.var", false]], "var() (polars.dataframe method)": [[317, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[749, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[397, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[578, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[921, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1338, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1004, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1195, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[318, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[484, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1098, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[485, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1099, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[827, "polars.when", false]], "where() (polars.expr method)": [[750, "polars.Expr.where", false]], "width (polars.dataframe property)": [[319, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[922, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[320, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[923, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[321, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[924, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[925, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[735, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[322, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[926, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[323, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[927, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[486, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1100, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[603, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[751, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[487, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1101, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[828, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[730, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1312, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1339, "polars.Series.zip_with", false]]}, "objects": {"polars": [[184, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [52, 0, 1, "", "PartitionByKey"], [53, 0, 1, "", "PartitionMaxSize"], [54, 0, 1, "", "PartitionParted"], [1376, 0, 1, "", "SQLContext"], [55, 0, 1, "", "StringCache"], [56, 4, 1, "", "align_frames"], [752, 4, 1, "", "all"], [753, 4, 1, "", "all_horizontal"], [754, 4, 1, "", "any"], [755, 4, 1, "", "any_horizontal"], [756, 4, 1, "", "approx_n_unique"], [757, 4, 1, "", "arange"], [758, 4, 1, "", "arctan2"], [759, 4, 1, "", "arctan2d"], [760, 4, 1, "", "arg_sort_by"], [761, 4, 1, "", "arg_where"], [61, 4, 1, "", "build_info"], [762, 4, 1, "", "business_day_count"], [763, 4, 1, "", "coalesce"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "collect_all_async"], [64, 4, 1, "", "concat"], [764, 4, 1, "", "concat_arr"], [765, 4, 1, "", "concat_list"], [766, 4, 1, "", "concat_str"], [767, 4, 1, "", "corr"], [768, 4, 1, "", "count"], [769, 4, 1, "", "cov"], [770, 4, 1, "", "cum_count"], [771, 4, 1, "", "cum_fold"], [772, 4, 1, "", "cum_reduce"], [773, 4, 1, "", "cum_sum"], [774, 4, 1, "", "cum_sum_horizontal"], [775, 4, 1, "", "date"], [776, 4, 1, "", "date_range"], [777, 4, 1, "", "date_ranges"], [778, 4, 1, "", "datetime"], [779, 4, 1, "", "datetime_range"], [780, 4, 1, "", "datetime_ranges"], [95, 4, 1, "", "defer"], [96, 4, 1, "", "disable_string_cache"], [781, 4, 1, "", "duration"], [782, 4, 1, "", "element"], [97, 4, 1, "", "enable_string_cache"], [98, 4, 1, "", "escape_regex"], [783, 4, 1, "", "exclude"], [129, 4, 1, "", "explain_all"], [784, 4, 1, "", "first"], [785, 4, 1, "", "fold"], [786, 4, 1, "", "format"], [130, 4, 1, "", "from_arrow"], [131, 4, 1, "", "from_dataframe"], [132, 4, 1, "", "from_dict"], [133, 4, 1, "", "from_dicts"], [787, 4, 1, "", "from_epoch"], [134, 4, 1, "", "from_numpy"], [135, 4, 1, "", "from_pandas"], [136, 4, 1, "", "from_records"], [137, 4, 1, "", "from_repr"], [138, 4, 1, "", "get_index_type"], [788, 4, 1, "", "groups"], [789, 4, 1, "", "head"], [790, 4, 1, "", "implode"], [791, 4, 1, "", "int_range"], [792, 4, 1, "", "int_ranges"], [141, 4, 1, "", "json_normalize"], [793, 4, 1, "", "last"], [794, 4, 1, "", "len"], [795, 4, 1, "", "linear_space"], [796, 4, 1, "", "linear_spaces"], [797, 4, 1, "", "lit"], [798, 4, 1, "", "map_batches"], [799, 4, 1, "", "map_groups"], [800, 4, 1, "", "max"], [801, 4, 1, "", "max_horizontal"], [802, 4, 1, "", "mean"], [803, 4, 1, "", "mean_horizontal"], [804, 4, 1, "", "median"], [805, 4, 1, "", "min"], [806, 4, 1, "", "min_horizontal"], [807, 4, 1, "", "n_unique"], [808, 4, 1, "", "nth"], [809, 4, 1, "", "ones"], [810, 4, 1, "", "quantile"], [143, 4, 1, "", "read_avro"], [144, 4, 1, "", "read_clipboard"], [145, 4, 1, "", "read_csv"], [146, 4, 1, "", "read_csv_batched"], [147, 4, 1, "", "read_database"], [148, 4, 1, "", "read_database_uri"], [149, 4, 1, "", "read_delta"], [150, 4, 1, "", "read_excel"], [151, 4, 1, "", "read_ipc"], [152, 4, 1, "", "read_ipc_schema"], [153, 4, 1, "", "read_ipc_stream"], [154, 4, 1, "", "read_json"], [155, 4, 1, "", "read_ndjson"], [156, 4, 1, "", "read_ods"], [157, 4, 1, "", "read_parquet"], [158, 4, 1, "", "read_parquet_schema"], [811, 4, 1, "", "reduce"], [812, 4, 1, "", "repeat"], [813, 4, 1, "", "rolling_corr"], [814, 4, 1, "", "rolling_cov"], [159, 4, 1, "", "scan_csv"], [160, 4, 1, "", "scan_delta"], [161, 4, 1, "", "scan_iceberg"], [162, 4, 1, "", "scan_ipc"], [163, 4, 1, "", "scan_ndjson"], [164, 4, 1, "", "scan_parquet"], [165, 4, 1, "", "scan_pyarrow_dataset"], [815, 4, 1, "", "select"], [959, 7, 0, "-", "selectors"], [166, 4, 1, "", "set_random_seed"], [167, 4, 1, "", "show_versions"], [816, 4, 1, "", "sql"], [817, 4, 1, "", "sql_expr"], [818, 4, 1, "", "std"], [819, 4, 1, "", "struct"], [820, 4, 1, "", "sum"], [821, 4, 1, "", "sum_horizontal"], [822, 4, 1, "", "tail"], [181, 4, 1, "", "thread_pool_size"], [182, 4, 1, "", "threadpool_size"], [823, 4, 1, "", "time"], [824, 4, 1, "", "time_range"], [825, 4, 1, "", "time_ranges"], [183, 4, 1, "", "using_string_cache"], [826, 4, 1, "", "var"], [827, 4, 1, "", "when"], [828, 4, 1, "", "zeros"]], "polars.Catalog": [[184, 1, 1, "", "__init__"], [185, 1, 1, "", "get_table_info"], [186, 1, 1, "", "list_catalogs"], [187, 1, 1, "", "list_namespaces"], [188, 1, 1, "", "list_tables"], [189, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[201, 1, 1, "", "__array__"], [202, 1, 1, "", "__arrow_c_stream__"], [203, 1, 1, "", "__dataframe__"], [204, 1, 1, "", "__getitem__"], [205, 1, 1, "", "approx_n_unique"], [206, 1, 1, "", "bottom_k"], [207, 1, 1, "", "cast"], [208, 1, 1, "", "clear"], [209, 1, 1, "", "clone"], [210, 1, 1, "", "collect_schema"], [211, 2, 1, "", "columns"], [212, 1, 1, "", "corr"], [213, 1, 1, "", "count"], [214, 1, 1, "", "describe"], [215, 1, 1, "", "deserialize"], [216, 1, 1, "", "drop"], [217, 1, 1, "", "drop_in_place"], [218, 1, 1, "", "drop_nans"], [219, 1, 1, "", "drop_nulls"], [220, 2, 1, "", "dtypes"], [221, 1, 1, "", "equals"], [222, 1, 1, "", "estimated_size"], [223, 1, 1, "", "explode"], [224, 1, 1, "", "extend"], [225, 1, 1, "", "fill_nan"], [226, 1, 1, "", "fill_null"], [227, 1, 1, "", "filter"], [228, 2, 1, "", "flags"], [229, 1, 1, "", "fold"], [230, 1, 1, "", "gather_every"], [231, 1, 1, "", "get_column"], [232, 1, 1, "", "get_column_index"], [233, 1, 1, "", "get_columns"], [234, 1, 1, "", "glimpse"], [235, 1, 1, "", "group_by"], [236, 1, 1, "", "group_by_dynamic"], [237, 1, 1, "", "hash_rows"], [238, 1, 1, "", "head"], [239, 2, 1, "", "height"], [240, 1, 1, "", "hstack"], [241, 1, 1, "", "insert_column"], [242, 1, 1, "", "interpolate"], [243, 1, 1, "", "is_duplicated"], [244, 1, 1, "", "is_empty"], [245, 1, 1, "", "is_unique"], [246, 1, 1, "", "item"], [247, 1, 1, "", "iter_columns"], [248, 1, 1, "", "iter_rows"], [249, 1, 1, "", "iter_slices"], [250, 1, 1, "", "join"], [251, 1, 1, "", "join_asof"], [252, 1, 1, "", "join_where"], [253, 1, 1, "", "lazy"], [254, 1, 1, "", "limit"], [255, 1, 1, "", "map_rows"], [256, 1, 1, "", "max"], [257, 1, 1, "", "max_horizontal"], [258, 1, 1, "", "mean"], [259, 1, 1, "", "mean_horizontal"], [260, 1, 1, "", "median"], [261, 1, 1, "", "melt"], [262, 1, 1, "", "merge_sorted"], [263, 1, 1, "", "min"], [264, 1, 1, "", "min_horizontal"], [265, 1, 1, "", "n_chunks"], [266, 1, 1, "", "n_unique"], [267, 1, 1, "", "null_count"], [268, 1, 1, "", "partition_by"], [269, 1, 1, "", "pipe"], [270, 1, 1, "", "pivot"], [349, 2, 1, "", "plot"], [271, 1, 1, "", "product"], [272, 1, 1, "", "quantile"], [273, 1, 1, "", "rechunk"], [274, 1, 1, "", "remove"], [275, 1, 1, "", "rename"], [276, 1, 1, "", "replace_column"], [277, 1, 1, "", "reverse"], [278, 1, 1, "", "rolling"], [279, 1, 1, "", "row"], [280, 1, 1, "", "rows"], [281, 1, 1, "", "rows_by_key"], [282, 1, 1, "", "sample"], [283, 2, 1, "", "schema"], [284, 1, 1, "", "select"], [285, 1, 1, "", "select_seq"], [286, 1, 1, "", "serialize"], [287, 1, 1, "", "set_sorted"], [288, 2, 1, "", "shape"], [289, 1, 1, "", "shift"], [290, 1, 1, "", "shrink_to_fit"], [291, 1, 1, "", "slice"], [292, 1, 1, "", "sort"], [293, 1, 1, "", "sql"], [294, 1, 1, "", "std"], [350, 2, 1, "", "style"], [295, 1, 1, "", "sum"], [296, 1, 1, "", "sum_horizontal"], [297, 1, 1, "", "tail"], [298, 1, 1, "", "to_arrow"], [299, 1, 1, "", "to_dict"], [300, 1, 1, "", "to_dicts"], [301, 1, 1, "", "to_dummies"], [302, 1, 1, "", "to_init_repr"], [303, 1, 1, "", "to_jax"], [304, 1, 1, "", "to_numpy"], [305, 1, 1, "", "to_pandas"], [306, 1, 1, "", "to_series"], [307, 1, 1, "", "to_struct"], [308, 1, 1, "", "to_torch"], [309, 1, 1, "", "top_k"], [310, 1, 1, "", "transpose"], [311, 1, 1, "", "unique"], [312, 1, 1, "", "unnest"], [313, 1, 1, "", "unpivot"], [314, 1, 1, "", "unstack"], [315, 1, 1, "", "update"], [316, 1, 1, "", "upsample"], [317, 1, 1, "", "var"], [318, 1, 1, "", "vstack"], [319, 2, 1, "", "width"], [320, 1, 1, "", "with_columns"], [321, 1, 1, "", "with_columns_seq"], [322, 1, 1, "", "with_row_count"], [323, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.Expr": [[354, 1, 1, "", "abs"], [355, 1, 1, "", "add"], [356, 1, 1, "", "agg_groups"], [357, 1, 1, "", "alias"], [358, 1, 1, "", "all"], [359, 1, 1, "", "and_"], [360, 1, 1, "", "any"], [361, 1, 1, "", "append"], [362, 1, 1, "", "approx_n_unique"], [363, 1, 1, "", "arccos"], [364, 1, 1, "", "arccosh"], [365, 1, 1, "", "arcsin"], [366, 1, 1, "", "arcsinh"], [367, 1, 1, "", "arctan"], [368, 1, 1, "", "arctanh"], [369, 1, 1, "", "arg_max"], [370, 1, 1, "", "arg_min"], [371, 1, 1, "", "arg_sort"], [372, 1, 1, "", "arg_true"], [373, 1, 1, "", "arg_unique"], [398, 1, 1, "", "backward_fill"], [406, 1, 1, "", "bitwise_and"], [407, 1, 1, "", "bitwise_count_ones"], [408, 1, 1, "", "bitwise_count_zeros"], [409, 1, 1, "", "bitwise_leading_ones"], [410, 1, 1, "", "bitwise_leading_zeros"], [411, 1, 1, "", "bitwise_or"], [412, 1, 1, "", "bitwise_trailing_ones"], [413, 1, 1, "", "bitwise_trailing_zeros"], [414, 1, 1, "", "bitwise_xor"], [415, 1, 1, "", "bottom_k"], [416, 1, 1, "", "bottom_k_by"], [417, 1, 1, "", "cast"], [423, 1, 1, "", "cbrt"], [424, 1, 1, "", "ceil"], [425, 1, 1, "", "clip"], [426, 1, 1, "", "cos"], [427, 1, 1, "", "cosh"], [428, 1, 1, "", "cot"], [429, 1, 1, "", "count"], [430, 1, 1, "", "cum_count"], [431, 1, 1, "", "cum_max"], [432, 1, 1, "", "cum_min"], [433, 1, 1, "", "cum_prod"], [434, 1, 1, "", "cum_sum"], [435, 1, 1, "", "cumulative_eval"], [436, 1, 1, "", "cut"], [437, 1, 1, "", "degrees"], [438, 1, 1, "", "deserialize"], [439, 1, 1, "", "diff"], [440, 1, 1, "", "dot"], [441, 1, 1, "", "drop_nans"], [442, 1, 1, "", "drop_nulls"], [488, 1, 1, "", "entropy"], [489, 1, 1, "", "eq"], [490, 1, 1, "", "eq_missing"], [491, 1, 1, "", "ewm_mean"], [492, 1, 1, "", "ewm_mean_by"], [493, 1, 1, "", "ewm_std"], [494, 1, 1, "", "ewm_var"], [495, 1, 1, "", "exclude"], [496, 1, 1, "", "exp"], [497, 1, 1, "", "explode"], [498, 1, 1, "", "extend_constant"], [499, 1, 1, "", "fill_nan"], [500, 1, 1, "", "fill_null"], [501, 1, 1, "", "filter"], [502, 1, 1, "", "first"], [503, 1, 1, "", "flatten"], [504, 1, 1, "", "floor"], [505, 1, 1, "", "floordiv"], [506, 1, 1, "", "forward_fill"], [507, 1, 1, "", "from_json"], [508, 1, 1, "", "gather"], [509, 1, 1, "", "gather_every"], [510, 1, 1, "", "ge"], [511, 1, 1, "", "get"], [512, 1, 1, "", "gt"], [513, 1, 1, "", "has_nulls"], [514, 1, 1, "", "hash"], [515, 1, 1, "", "head"], [516, 1, 1, "", "hist"], [517, 1, 1, "", "implode"], [518, 1, 1, "", "index_of"], [519, 1, 1, "", "inspect"], [520, 1, 1, "", "interpolate"], [521, 1, 1, "", "interpolate_by"], [522, 1, 1, "", "is_between"], [523, 1, 1, "", "is_duplicated"], [524, 1, 1, "", "is_finite"], [525, 1, 1, "", "is_first_distinct"], [526, 1, 1, "", "is_in"], [527, 1, 1, "", "is_infinite"], [528, 1, 1, "", "is_last_distinct"], [529, 1, 1, "", "is_nan"], [530, 1, 1, "", "is_not_nan"], [531, 1, 1, "", "is_not_null"], [532, 1, 1, "", "is_null"], [533, 1, 1, "", "is_unique"], [534, 1, 1, "", "kurtosis"], [535, 1, 1, "", "last"], [536, 1, 1, "", "le"], [537, 1, 1, "", "len"], [538, 1, 1, "", "limit"], [579, 1, 1, "", "log"], [580, 1, 1, "", "log10"], [581, 1, 1, "", "log1p"], [582, 1, 1, "", "lower_bound"], [583, 1, 1, "", "lt"], [584, 1, 1, "", "map_batches"], [585, 1, 1, "", "map_elements"], [586, 1, 1, "", "max"], [587, 1, 1, "", "mean"], [588, 1, 1, "", "median"], [604, 1, 1, "", "min"], [605, 1, 1, "", "mod"], [606, 1, 1, "", "mode"], [607, 1, 1, "", "mul"], [608, 1, 1, "", "n_unique"], [618, 1, 1, "", "nan_max"], [619, 1, 1, "", "nan_min"], [620, 1, 1, "", "ne"], [621, 1, 1, "", "ne_missing"], [622, 1, 1, "", "neg"], [623, 1, 1, "", "not_"], [624, 1, 1, "", "null_count"], [625, 1, 1, "", "or_"], [626, 1, 1, "", "over"], [627, 1, 1, "", "pct_change"], [628, 1, 1, "", "peak_max"], [629, 1, 1, "", "peak_min"], [630, 1, 1, "", "pipe"], [631, 1, 1, "", "pow"], [632, 1, 1, "", "product"], [633, 1, 1, "", "qcut"], [634, 1, 1, "", "quantile"], [635, 1, 1, "", "radians"], [636, 1, 1, "", "rank"], [637, 1, 1, "", "rechunk"], [638, 1, 1, "", "reinterpret"], [639, 1, 1, "", "repeat_by"], [640, 1, 1, "", "replace"], [641, 1, 1, "", "replace_strict"], [642, 1, 1, "", "reshape"], [643, 1, 1, "", "reverse"], [644, 1, 1, "", "rle"], [645, 1, 1, "", "rle_id"], [646, 1, 1, "", "rolling"], [647, 1, 1, "", "rolling_map"], [648, 1, 1, "", "rolling_max"], [649, 1, 1, "", "rolling_max_by"], [650, 1, 1, "", "rolling_mean"], [651, 1, 1, "", "rolling_mean_by"], [652, 1, 1, "", "rolling_median"], [653, 1, 1, "", "rolling_median_by"], [654, 1, 1, "", "rolling_min"], [655, 1, 1, "", "rolling_min_by"], [656, 1, 1, "", "rolling_quantile"], [657, 1, 1, "", "rolling_quantile_by"], [658, 1, 1, "", "rolling_skew"], [659, 1, 1, "", "rolling_std"], [660, 1, 1, "", "rolling_std_by"], [661, 1, 1, "", "rolling_sum"], [662, 1, 1, "", "rolling_sum_by"], [663, 1, 1, "", "rolling_var"], [664, 1, 1, "", "rolling_var_by"], [665, 1, 1, "", "round"], [666, 1, 1, "", "round_sig_figs"], [667, 1, 1, "", "sample"], [668, 1, 1, "", "search_sorted"], [669, 1, 1, "", "set_sorted"], [670, 1, 1, "", "shift"], [671, 1, 1, "", "shrink_dtype"], [672, 1, 1, "", "shuffle"], [673, 1, 1, "", "sign"], [674, 1, 1, "", "sin"], [675, 1, 1, "", "sinh"], [676, 1, 1, "", "skew"], [677, 1, 1, "", "slice"], [678, 1, 1, "", "sort"], [679, 1, 1, "", "sort_by"], [680, 1, 1, "", "sqrt"], [681, 1, 1, "", "std"], [736, 1, 1, "", "sub"], [737, 1, 1, "", "sum"], [738, 1, 1, "", "tail"], [739, 1, 1, "", "tan"], [740, 1, 1, "", "tanh"], [741, 1, 1, "", "to_physical"], [742, 1, 1, "", "top_k"], [743, 1, 1, "", "top_k_by"], [744, 1, 1, "", "truediv"], [745, 1, 1, "", "unique"], [746, 1, 1, "", "unique_counts"], [747, 1, 1, "", "upper_bound"], [748, 1, 1, "", "value_counts"], [749, 1, 1, "", "var"], [750, 1, 1, "", "where"], [751, 1, 1, "", "xor"]], "polars.Expr.arr": [[374, 1, 1, "", "all"], [375, 1, 1, "", "any"], [376, 1, 1, "", "arg_max"], [377, 1, 1, "", "arg_min"], [378, 1, 1, "", "contains"], [379, 1, 1, "", "count_matches"], [380, 1, 1, "", "explode"], [381, 1, 1, "", "first"], [382, 1, 1, "", "get"], [383, 1, 1, "", "join"], [384, 1, 1, "", "last"], [385, 1, 1, "", "max"], [386, 1, 1, "", "median"], [387, 1, 1, "", "min"], [388, 1, 1, "", "n_unique"], [389, 1, 1, "", "reverse"], [390, 1, 1, "", "shift"], [391, 1, 1, "", "sort"], [392, 1, 1, "", "std"], [393, 1, 1, "", "sum"], [394, 1, 1, "", "to_list"], [395, 1, 1, "", "to_struct"], [396, 1, 1, "", "unique"], [397, 1, 1, "", "var"]], "polars.Expr.bin": [[399, 1, 1, "", "contains"], [400, 1, 1, "", "decode"], [401, 1, 1, "", "encode"], [402, 1, 1, "", "ends_with"], [403, 1, 1, "", "reinterpret"], [404, 1, 1, "", "size"], [405, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[418, 1, 1, "", "ends_with"], [419, 1, 1, "", "get_categories"], [420, 1, 1, "", "len_bytes"], [421, 1, 1, "", "len_chars"], [422, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[443, 1, 1, "", "add_business_days"], [444, 1, 1, "", "base_utc_offset"], [445, 1, 1, "", "cast_time_unit"], [446, 1, 1, "", "century"], [447, 1, 1, "", "combine"], [448, 1, 1, "", "convert_time_zone"], [449, 1, 1, "", "date"], [450, 1, 1, "", "datetime"], [451, 1, 1, "", "day"], [452, 1, 1, "", "dst_offset"], [453, 1, 1, "", "epoch"], [454, 1, 1, "", "hour"], [455, 1, 1, "", "is_leap_year"], [456, 1, 1, "", "iso_year"], [457, 1, 1, "", "microsecond"], [458, 1, 1, "", "millennium"], [459, 1, 1, "", "millisecond"], [460, 1, 1, "", "minute"], [461, 1, 1, "", "month"], [462, 1, 1, "", "month_end"], [463, 1, 1, "", "month_start"], [464, 1, 1, "", "nanosecond"], [465, 1, 1, "", "offset_by"], [466, 1, 1, "", "ordinal_day"], [467, 1, 1, "", "quarter"], [468, 1, 1, "", "replace"], [469, 1, 1, "", "replace_time_zone"], [470, 1, 1, "", "round"], [471, 1, 1, "", "second"], [472, 1, 1, "", "strftime"], [473, 1, 1, "", "time"], [474, 1, 1, "", "timestamp"], [475, 1, 1, "", "to_string"], [476, 1, 1, "", "total_days"], [477, 1, 1, "", "total_hours"], [478, 1, 1, "", "total_microseconds"], [479, 1, 1, "", "total_milliseconds"], [480, 1, 1, "", "total_minutes"], [481, 1, 1, "", "total_nanoseconds"], [482, 1, 1, "", "total_seconds"], [483, 1, 1, "", "truncate"], [484, 1, 1, "", "week"], [485, 1, 1, "", "weekday"], [486, 1, 1, "", "with_time_unit"], [487, 1, 1, "", "year"]], "polars.Expr.list": [[539, 1, 1, "", "all"], [540, 1, 1, "", "any"], [541, 1, 1, "", "arg_max"], [542, 1, 1, "", "arg_min"], [543, 1, 1, "", "concat"], [544, 1, 1, "", "contains"], [545, 1, 1, "", "count_matches"], [546, 1, 1, "", "diff"], [547, 1, 1, "", "drop_nulls"], [548, 1, 1, "", "eval"], [549, 1, 1, "", "explode"], [550, 1, 1, "", "first"], [551, 1, 1, "", "gather"], [552, 1, 1, "", "gather_every"], [553, 1, 1, "", "get"], [554, 1, 1, "", "head"], [555, 1, 1, "", "join"], [556, 1, 1, "", "last"], [557, 1, 1, "", "len"], [558, 1, 1, "", "max"], [559, 1, 1, "", "mean"], [560, 1, 1, "", "median"], [561, 1, 1, "", "min"], [562, 1, 1, "", "n_unique"], [563, 1, 1, "", "reverse"], [564, 1, 1, "", "sample"], [565, 1, 1, "", "set_difference"], [566, 1, 1, "", "set_intersection"], [567, 1, 1, "", "set_symmetric_difference"], [568, 1, 1, "", "set_union"], [569, 1, 1, "", "shift"], [570, 1, 1, "", "slice"], [571, 1, 1, "", "sort"], [572, 1, 1, "", "std"], [573, 1, 1, "", "sum"], [574, 1, 1, "", "tail"], [575, 1, 1, "", "to_array"], [576, 1, 1, "", "to_struct"], [577, 1, 1, "", "unique"], [578, 1, 1, "", "var"]], "polars.Expr.meta": [[589, 1, 1, "", "eq"], [590, 1, 1, "", "has_multiple_outputs"], [591, 1, 1, "", "is_column"], [592, 1, 1, "", "is_column_selection"], [593, 1, 1, "", "is_literal"], [594, 1, 1, "", "is_regex_projection"], [595, 1, 1, "", "ne"], [596, 1, 1, "", "output_name"], [597, 1, 1, "", "pop"], [598, 1, 1, "", "root_names"], [599, 1, 1, "", "serialize"], [600, 1, 1, "", "show_graph"], [601, 1, 1, "", "tree_format"], [602, 1, 1, "", "undo_aliases"], [603, 1, 1, "", "write_json"]], "polars.Expr.name": [[609, 1, 1, "", "keep"], [610, 1, 1, "", "map"], [611, 1, 1, "", "map_fields"], [612, 1, 1, "", "prefix"], [613, 1, 1, "", "prefix_fields"], [614, 1, 1, "", "suffix"], [615, 1, 1, "", "suffix_fields"], [616, 1, 1, "", "to_lowercase"], [617, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[682, 1, 1, "", "concat"], [683, 1, 1, "", "contains"], [684, 1, 1, "", "contains_any"], [685, 1, 1, "", "count_matches"], [686, 1, 1, "", "decode"], [687, 1, 1, "", "encode"], [688, 1, 1, "", "ends_with"], [689, 1, 1, "", "escape_regex"], [690, 1, 1, "", "explode"], [691, 1, 1, "", "extract"], [692, 1, 1, "", "extract_all"], [693, 1, 1, "", "extract_groups"], [694, 1, 1, "", "extract_many"], [695, 1, 1, "", "find"], [696, 1, 1, "", "find_many"], [697, 1, 1, "", "head"], [698, 1, 1, "", "join"], [699, 1, 1, "", "json_decode"], [700, 1, 1, "", "json_path_match"], [701, 1, 1, "", "len_bytes"], [702, 1, 1, "", "len_chars"], [703, 1, 1, "", "normalize"], [704, 1, 1, "", "pad_end"], [705, 1, 1, "", "pad_start"], [706, 1, 1, "", "replace"], [707, 1, 1, "", "replace_all"], [708, 1, 1, "", "replace_many"], [709, 1, 1, "", "reverse"], [710, 1, 1, "", "slice"], [711, 1, 1, "", "split"], [712, 1, 1, "", "split_exact"], [713, 1, 1, "", "splitn"], [714, 1, 1, "", "starts_with"], [715, 1, 1, "", "strip_chars"], [716, 1, 1, "", "strip_chars_end"], [717, 1, 1, "", "strip_chars_start"], [718, 1, 1, "", "strip_prefix"], [719, 1, 1, "", "strip_suffix"], [720, 1, 1, "", "strptime"], [721, 1, 1, "", "tail"], [722, 1, 1, "", "to_date"], [723, 1, 1, "", "to_datetime"], [724, 1, 1, "", "to_decimal"], [725, 1, 1, "", "to_integer"], [726, 1, 1, "", "to_lowercase"], [727, 1, 1, "", "to_time"], [728, 1, 1, "", "to_titlecase"], [729, 1, 1, "", "to_uppercase"], [730, 1, 1, "", "zfill"]], "polars.Expr.struct": [[731, 1, 1, "", "field"], [732, 1, 1, "", "json_encode"], [733, 1, 1, "", "rename_fields"], [734, 1, 1, "", "unnest"], [735, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[852, 1, 1, "", "approx_n_unique"], [853, 1, 1, "", "bottom_k"], [854, 1, 1, "", "cache"], [855, 1, 1, "", "cast"], [856, 1, 1, "", "clear"], [857, 1, 1, "", "clone"], [858, 1, 1, "", "collect"], [859, 1, 1, "", "collect_async"], [860, 1, 1, "", "collect_schema"], [861, 2, 1, "", "columns"], [862, 1, 1, "", "count"], [863, 1, 1, "", "describe"], [864, 1, 1, "", "deserialize"], [865, 1, 1, "", "drop"], [866, 1, 1, "", "drop_nans"], [867, 1, 1, "", "drop_nulls"], [868, 2, 1, "", "dtypes"], [869, 1, 1, "", "explain"], [870, 1, 1, "", "explode"], [871, 1, 1, "", "fill_nan"], [872, 1, 1, "", "fill_null"], [873, 1, 1, "", "filter"], [874, 1, 1, "", "first"], [875, 1, 1, "", "gather_every"], [876, 1, 1, "", "group_by"], [877, 1, 1, "", "group_by_dynamic"], [878, 1, 1, "", "head"], [879, 1, 1, "", "inspect"], [880, 1, 1, "", "interpolate"], [881, 1, 1, "", "join"], [882, 1, 1, "", "join_asof"], [883, 1, 1, "", "join_where"], [884, 1, 1, "", "last"], [885, 1, 1, "", "lazy"], [886, 1, 1, "", "limit"], [887, 1, 1, "", "map_batches"], [888, 1, 1, "", "max"], [889, 1, 1, "", "mean"], [890, 1, 1, "", "median"], [891, 1, 1, "", "melt"], [892, 1, 1, "", "merge_sorted"], [893, 1, 1, "", "min"], [894, 1, 1, "", "null_count"], [895, 1, 1, "", "pipe"], [896, 1, 1, "", "profile"], [897, 1, 1, "", "quantile"], [898, 1, 1, "", "remote"], [899, 1, 1, "", "remove"], [900, 1, 1, "", "rename"], [901, 1, 1, "", "reverse"], [902, 1, 1, "", "rolling"], [903, 2, 1, "", "schema"], [904, 1, 1, "", "select"], [905, 1, 1, "", "select_seq"], [906, 1, 1, "", "serialize"], [907, 1, 1, "", "set_sorted"], [908, 1, 1, "", "shift"], [909, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_ndjson"], [51, 1, 1, "", "sink_parquet"], [910, 1, 1, "", "slice"], [911, 1, 1, "", "sort"], [912, 1, 1, "", "sql"], [913, 1, 1, "", "std"], [914, 1, 1, "", "sum"], [915, 1, 1, "", "tail"], [916, 1, 1, "", "top_k"], [917, 1, 1, "", "unique"], [918, 1, 1, "", "unnest"], [919, 1, 1, "", "unpivot"], [920, 1, 1, "", "update"], [921, 1, 1, "", "var"], [922, 2, 1, "", "width"], [923, 1, 1, "", "with_columns"], [924, 1, 1, "", "with_columns_seq"], [925, 1, 1, "", "with_context"], [926, 1, 1, "", "with_row_count"], [927, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[52, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[53, 1, 1, "", "__init__"]], "polars.PartitionParted": [[54, 1, 1, "", "__init__"]], "polars.SQLContext": [[1376, 1, 1, "", "__enter__"], [1376, 1, 1, "", "__exit__"], [1376, 1, 1, "", "__init__"], [1357, 1, 1, "", "execute"], [1358, 1, 1, "", "execute_global"], [1359, 1, 1, "", "register"], [1360, 1, 1, "", "register_globals"], [1361, 1, 1, "", "register_many"], [1362, 1, 1, "", "tables"], [1363, 1, 1, "", "unregister"]], "polars.Series": [[961, 1, 1, "", "__array__"], [962, 1, 1, "", "__arrow_c_stream__"], [963, 1, 1, "", "__getitem__"], [964, 1, 1, "", "abs"], [965, 1, 1, "", "alias"], [966, 1, 1, "", "all"], [967, 1, 1, "", "any"], [968, 1, 1, "", "append"], [969, 1, 1, "", "approx_n_unique"], [970, 1, 1, "", "arccos"], [971, 1, 1, "", "arccosh"], [972, 1, 1, "", "arcsin"], [973, 1, 1, "", "arcsinh"], [974, 1, 1, "", "arctan"], [975, 1, 1, "", "arctanh"], [976, 1, 1, "", "arg_max"], [977, 1, 1, "", "arg_min"], [978, 1, 1, "", "arg_sort"], [979, 1, 1, "", "arg_true"], [980, 1, 1, "", "arg_unique"], [1012, 1, 1, "", "bitwise_and"], [1013, 1, 1, "", "bitwise_count_ones"], [1014, 1, 1, "", "bitwise_count_zeros"], [1015, 1, 1, "", "bitwise_leading_ones"], [1016, 1, 1, "", "bitwise_leading_zeros"], [1017, 1, 1, "", "bitwise_or"], [1018, 1, 1, "", "bitwise_trailing_ones"], [1019, 1, 1, "", "bitwise_trailing_zeros"], [1020, 1, 1, "", "bitwise_xor"], [1021, 1, 1, "", "bottom_k"], [1022, 1, 1, "", "cast"], [1031, 1, 1, "", "cbrt"], [1032, 1, 1, "", "ceil"], [1033, 1, 1, "", "chunk_lengths"], [1034, 1, 1, "", "clear"], [1035, 1, 1, "", "clip"], [1036, 1, 1, "", "clone"], [1037, 1, 1, "", "cos"], [1038, 1, 1, "", "cosh"], [1039, 1, 1, "", "cot"], [1040, 1, 1, "", "count"], [1041, 1, 1, "", "cum_count"], [1042, 1, 1, "", "cum_max"], [1043, 1, 1, "", "cum_min"], [1044, 1, 1, "", "cum_prod"], [1045, 1, 1, "", "cum_sum"], [1046, 1, 1, "", "cumulative_eval"], [1047, 1, 1, "", "cut"], [1048, 1, 1, "", "describe"], [1049, 1, 1, "", "diff"], [1050, 1, 1, "", "dot"], [1051, 1, 1, "", "drop_nans"], [1052, 1, 1, "", "drop_nulls"], [1102, 2, 1, "", "dtype"], [1103, 1, 1, "", "entropy"], [1104, 1, 1, "", "eq"], [1105, 1, 1, "", "eq_missing"], [1106, 1, 1, "", "equals"], [1107, 1, 1, "", "estimated_size"], [1108, 1, 1, "", "ewm_mean"], [1109, 1, 1, "", "ewm_mean_by"], [1110, 1, 1, "", "ewm_std"], [1111, 1, 1, "", "ewm_var"], [1112, 1, 1, "", "exp"], [1113, 1, 1, "", "explode"], [1114, 1, 1, "", "extend"], [1115, 1, 1, "", "extend_constant"], [1116, 1, 1, "", "fill_nan"], [1117, 1, 1, "", "fill_null"], [1118, 1, 1, "", "filter"], [1119, 1, 1, "", "first"], [1120, 2, 1, "", "flags"], [1121, 1, 1, "", "floor"], [1122, 1, 1, "", "gather"], [1123, 1, 1, "", "gather_every"], [1124, 1, 1, "", "ge"], [1125, 1, 1, "", "get_chunks"], [1126, 1, 1, "", "gt"], [1127, 1, 1, "", "has_nulls"], [1128, 1, 1, "", "has_validity"], [1129, 1, 1, "", "hash"], [1130, 1, 1, "", "head"], [1131, 1, 1, "", "hist"], [1132, 1, 1, "", "implode"], [1133, 1, 1, "", "index_of"], [1134, 1, 1, "", "interpolate"], [1135, 1, 1, "", "interpolate_by"], [1136, 1, 1, "", "is_between"], [1137, 1, 1, "", "is_duplicated"], [1138, 1, 1, "", "is_empty"], [1139, 1, 1, "", "is_finite"], [1140, 1, 1, "", "is_first_distinct"], [1141, 1, 1, "", "is_in"], [1142, 1, 1, "", "is_infinite"], [1143, 1, 1, "", "is_last_distinct"], [1144, 1, 1, "", "is_nan"], [1145, 1, 1, "", "is_not_nan"], [1146, 1, 1, "", "is_not_null"], [1147, 1, 1, "", "is_null"], [1148, 1, 1, "", "is_sorted"], [1149, 1, 1, "", "is_unique"], [1150, 1, 1, "", "item"], [1151, 1, 1, "", "kurtosis"], [1152, 1, 1, "", "last"], [1153, 1, 1, "", "le"], [1154, 1, 1, "", "len"], [1155, 1, 1, "", "limit"], [1196, 1, 1, "", "log"], [1197, 1, 1, "", "log10"], [1198, 1, 1, "", "log1p"], [1199, 1, 1, "", "lower_bound"], [1200, 1, 1, "", "lt"], [1201, 1, 1, "", "map_elements"], [1202, 1, 1, "", "max"], [1203, 1, 1, "", "mean"], [1204, 1, 1, "", "median"], [1205, 1, 1, "", "min"], [1206, 1, 1, "", "mode"], [1207, 1, 1, "", "n_chunks"], [1208, 1, 1, "", "n_unique"], [1209, 2, 1, "", "name"], [1210, 1, 1, "", "nan_max"], [1211, 1, 1, "", "nan_min"], [1212, 1, 1, "", "ne"], [1213, 1, 1, "", "ne_missing"], [1214, 1, 1, "", "new_from_index"], [1215, 1, 1, "", "not_"], [1216, 1, 1, "", "null_count"], [1217, 1, 1, "", "pct_change"], [1218, 1, 1, "", "peak_max"], [1219, 1, 1, "", "peak_min"], [1353, 2, 1, "", "plot"], [1220, 1, 1, "", "pow"], [1221, 1, 1, "", "product"], [1222, 1, 1, "", "qcut"], [1223, 1, 1, "", "quantile"], [1224, 1, 1, "", "rank"], [1225, 1, 1, "", "rechunk"], [1226, 1, 1, "", "reinterpret"], [1227, 1, 1, "", "rename"], [1228, 1, 1, "", "replace"], [1229, 1, 1, "", "replace_strict"], [1230, 1, 1, "", "reshape"], [1231, 1, 1, "", "reverse"], [1232, 1, 1, "", "rle"], [1233, 1, 1, "", "rle_id"], [1234, 1, 1, "", "rolling_map"], [1235, 1, 1, "", "rolling_max"], [1236, 1, 1, "", "rolling_mean"], [1237, 1, 1, "", "rolling_median"], [1238, 1, 1, "", "rolling_min"], [1239, 1, 1, "", "rolling_quantile"], [1240, 1, 1, "", "rolling_skew"], [1241, 1, 1, "", "rolling_std"], [1242, 1, 1, "", "rolling_sum"], [1243, 1, 1, "", "rolling_var"], [1244, 1, 1, "", "round"], [1245, 1, 1, "", "round_sig_figs"], [1246, 1, 1, "", "sample"], [1247, 1, 1, "", "scatter"], [1248, 1, 1, "", "search_sorted"], [1249, 1, 1, "", "set"], [1250, 1, 1, "", "set_sorted"], [1251, 2, 1, "", "shape"], [1252, 1, 1, "", "shift"], [1253, 1, 1, "", "shrink_dtype"], [1254, 1, 1, "", "shrink_to_fit"], [1255, 1, 1, "", "shuffle"], [1256, 1, 1, "", "sign"], [1257, 1, 1, "", "sin"], [1258, 1, 1, "", "sinh"], [1259, 1, 1, "", "skew"], [1260, 1, 1, "", "slice"], [1261, 1, 1, "", "sort"], [1262, 1, 1, "", "sqrt"], [1263, 1, 1, "", "std"], [1319, 1, 1, "", "sum"], [1320, 1, 1, "", "tail"], [1321, 1, 1, "", "tan"], [1322, 1, 1, "", "tanh"], [1323, 1, 1, "", "to_arrow"], [1324, 1, 1, "", "to_dummies"], [1325, 1, 1, "", "to_frame"], [1326, 1, 1, "", "to_init_repr"], [1327, 1, 1, "", "to_jax"], [1328, 1, 1, "", "to_list"], [1329, 1, 1, "", "to_numpy"], [1330, 1, 1, "", "to_pandas"], [1331, 1, 1, "", "to_physical"], [1332, 1, 1, "", "to_torch"], [1333, 1, 1, "", "top_k"], [1334, 1, 1, "", "unique"], [1335, 1, 1, "", "unique_counts"], [1336, 1, 1, "", "upper_bound"], [1337, 1, 1, "", "value_counts"], [1338, 1, 1, "", "var"], [1339, 1, 1, "", "zip_with"]], "polars.Series.arr": [[981, 1, 1, "", "all"], [982, 1, 1, "", "any"], [983, 1, 1, "", "arg_max"], [984, 1, 1, "", "arg_min"], [985, 1, 1, "", "contains"], [986, 1, 1, "", "count_matches"], [987, 1, 1, "", "explode"], [988, 1, 1, "", "first"], [989, 1, 1, "", "get"], [990, 1, 1, "", "join"], [991, 1, 1, "", "last"], [992, 1, 1, "", "max"], [993, 1, 1, "", "median"], [994, 1, 1, "", "min"], [995, 1, 1, "", "n_unique"], [996, 1, 1, "", "reverse"], [997, 1, 1, "", "shift"], [998, 1, 1, "", "sort"], [999, 1, 1, "", "std"], [1000, 1, 1, "", "sum"], [1001, 1, 1, "", "to_list"], [1002, 1, 1, "", "to_struct"], [1003, 1, 1, "", "unique"], [1004, 1, 1, "", "var"]], "polars.Series.bin": [[1005, 1, 1, "", "contains"], [1006, 1, 1, "", "decode"], [1007, 1, 1, "", "encode"], [1008, 1, 1, "", "ends_with"], [1009, 1, 1, "", "reinterpret"], [1010, 1, 1, "", "size"], [1011, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1023, 1, 1, "", "ends_with"], [1024, 1, 1, "", "get_categories"], [1025, 1, 1, "", "is_local"], [1026, 1, 1, "", "len_bytes"], [1027, 1, 1, "", "len_chars"], [1028, 1, 1, "", "starts_with"], [1029, 1, 1, "", "to_local"], [1030, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1053, 1, 1, "", "add_business_days"], [1054, 1, 1, "", "base_utc_offset"], [1055, 1, 1, "", "cast_time_unit"], [1056, 1, 1, "", "century"], [1057, 1, 1, "", "combine"], [1058, 1, 1, "", "convert_time_zone"], [1059, 1, 1, "", "date"], [1060, 1, 1, "", "datetime"], [1061, 1, 1, "", "day"], [1062, 1, 1, "", "dst_offset"], [1063, 1, 1, "", "epoch"], [1064, 1, 1, "", "hour"], [1065, 1, 1, "", "is_leap_year"], [1066, 1, 1, "", "iso_year"], [1067, 1, 1, "", "max"], [1068, 1, 1, "", "mean"], [1069, 1, 1, "", "median"], [1070, 1, 1, "", "microsecond"], [1071, 1, 1, "", "millennium"], [1072, 1, 1, "", "millisecond"], [1073, 1, 1, "", "min"], [1074, 1, 1, "", "minute"], [1075, 1, 1, "", "month"], [1076, 1, 1, "", "month_end"], [1077, 1, 1, "", "month_start"], [1078, 1, 1, "", "nanosecond"], [1079, 1, 1, "", "offset_by"], [1080, 1, 1, "", "ordinal_day"], [1081, 1, 1, "", "quarter"], [1082, 1, 1, "", "replace"], [1083, 1, 1, "", "replace_time_zone"], [1084, 1, 1, "", "round"], [1085, 1, 1, "", "second"], [1086, 1, 1, "", "strftime"], [1087, 1, 1, "", "time"], [1088, 1, 1, "", "timestamp"], [1089, 1, 1, "", "to_string"], [1090, 1, 1, "", "total_days"], [1091, 1, 1, "", "total_hours"], [1092, 1, 1, "", "total_microseconds"], [1093, 1, 1, "", "total_milliseconds"], [1094, 1, 1, "", "total_minutes"], [1095, 1, 1, "", "total_nanoseconds"], [1096, 1, 1, "", "total_seconds"], [1097, 1, 1, "", "truncate"], [1098, 1, 1, "", "week"], [1099, 1, 1, "", "weekday"], [1100, 1, 1, "", "with_time_unit"], [1101, 1, 1, "", "year"]], "polars.Series.list": [[1156, 1, 1, "", "all"], [1157, 1, 1, "", "any"], [1158, 1, 1, "", "arg_max"], [1159, 1, 1, "", "arg_min"], [1160, 1, 1, "", "concat"], [1161, 1, 1, "", "contains"], [1162, 1, 1, "", "count_matches"], [1163, 1, 1, "", "diff"], [1164, 1, 1, "", "drop_nulls"], [1165, 1, 1, "", "eval"], [1166, 1, 1, "", "explode"], [1167, 1, 1, "", "first"], [1168, 1, 1, "", "gather"], [1169, 1, 1, "", "gather_every"], [1170, 1, 1, "", "get"], [1171, 1, 1, "", "head"], [1172, 1, 1, "", "join"], [1173, 1, 1, "", "last"], [1174, 1, 1, "", "len"], [1175, 1, 1, "", "max"], [1176, 1, 1, "", "mean"], [1177, 1, 1, "", "median"], [1178, 1, 1, "", "min"], [1179, 1, 1, "", "n_unique"], [1180, 1, 1, "", "reverse"], [1181, 1, 1, "", "sample"], [1182, 1, 1, "", "set_difference"], [1183, 1, 1, "", "set_intersection"], [1184, 1, 1, "", "set_symmetric_difference"], [1185, 1, 1, "", "set_union"], [1186, 1, 1, "", "shift"], [1187, 1, 1, "", "slice"], [1188, 1, 1, "", "sort"], [1189, 1, 1, "", "std"], [1190, 1, 1, "", "sum"], [1191, 1, 1, "", "tail"], [1192, 1, 1, "", "to_array"], [1193, 1, 1, "", "to_struct"], [1194, 1, 1, "", "unique"], [1195, 1, 1, "", "var"]], "polars.Series.str": [[1264, 1, 1, "", "concat"], [1265, 1, 1, "", "contains"], [1266, 1, 1, "", "contains_any"], [1267, 1, 1, "", "count_matches"], [1268, 1, 1, "", "decode"], [1269, 1, 1, "", "encode"], [1270, 1, 1, "", "ends_with"], [1271, 1, 1, "", "escape_regex"], [1272, 1, 1, "", "explode"], [1273, 1, 1, "", "extract"], [1274, 1, 1, "", "extract_all"], [1275, 1, 1, "", "extract_groups"], [1276, 1, 1, "", "extract_many"], [1277, 1, 1, "", "find"], [1278, 1, 1, "", "find_many"], [1279, 1, 1, "", "head"], [1280, 1, 1, "", "join"], [1281, 1, 1, "", "json_decode"], [1282, 1, 1, "", "json_path_match"], [1283, 1, 1, "", "len_bytes"], [1284, 1, 1, "", "len_chars"], [1285, 1, 1, "", "normalize"], [1286, 1, 1, "", "pad_end"], [1287, 1, 1, "", "pad_start"], [1288, 1, 1, "", "replace"], [1289, 1, 1, "", "replace_all"], [1290, 1, 1, "", "replace_many"], [1291, 1, 1, "", "reverse"], [1292, 1, 1, "", "slice"], [1293, 1, 1, "", "split"], [1294, 1, 1, "", "split_exact"], [1295, 1, 1, "", "splitn"], [1296, 1, 1, "", "starts_with"], [1297, 1, 1, "", "strip_chars"], [1298, 1, 1, "", "strip_chars_end"], [1299, 1, 1, "", "strip_chars_start"], [1300, 1, 1, "", "strip_prefix"], [1301, 1, 1, "", "strip_suffix"], [1302, 1, 1, "", "strptime"], [1303, 1, 1, "", "tail"], [1304, 1, 1, "", "to_date"], [1305, 1, 1, "", "to_datetime"], [1306, 1, 1, "", "to_decimal"], [1307, 1, 1, "", "to_integer"], [1308, 1, 1, "", "to_lowercase"], [1309, 1, 1, "", "to_time"], [1310, 1, 1, "", "to_titlecase"], [1311, 1, 1, "", "to_uppercase"], [1312, 1, 1, "", "zfill"]], "polars.Series.struct": [[1313, 1, 1, "", "field"], [1314, 3, 1, "", "fields"], [1315, 1, 1, "", "json_encode"], [1316, 1, 1, "", "rename_fields"], [1317, 3, 1, "", "schema"], [1318, 1, 1, "", "unnest"]], "polars.StringCache": [[55, 1, 1, "", "__init__"]], "polars.api": [[57, 4, 1, "", "register_dataframe_namespace"], [58, 4, 1, "", "register_expr_namespace"], [59, 4, 1, "", "register_lazyframe_namespace"], [60, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[190, 0, 1, "", "CatalogInfo"], [191, 0, 1, "", "ColumnInfo"], [192, 5, 1, "", "DataSourceFormat"], [193, 0, 1, "", "NamespaceInfo"], [194, 0, 1, "", "TableInfo"], [196, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[190, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[191, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[193, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[194, 1, 1, "", "__init__"], [195, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[324, 1, 1, "", "__iter__"], [325, 1, 1, "", "agg"], [326, 1, 1, "", "all"], [327, 1, 1, "", "count"], [328, 1, 1, "", "first"], [329, 1, 1, "", "head"], [330, 1, 1, "", "last"], [331, 1, 1, "", "len"], [332, 1, 1, "", "map_groups"], [333, 1, 1, "", "max"], [334, 1, 1, "", "mean"], [335, 1, 1, "", "median"], [336, 1, 1, "", "min"], [337, 1, 1, "", "n_unique"], [338, 1, 1, "", "quantile"], [339, 1, 1, "", "sum"], [340, 1, 1, "", "tail"]], "polars.datatypes": [[65, 0, 1, "", "Array"], [66, 0, 1, "", "Binary"], [67, 0, 1, "", "Boolean"], [68, 0, 1, "", "Categorical"], [69, 0, 1, "", "DataType"], [70, 0, 1, "", "Date"], [71, 0, 1, "", "Datetime"], [72, 0, 1, "", "Decimal"], [73, 0, 1, "", "Duration"], [74, 0, 1, "", "Enum"], [75, 0, 1, "", "Field"], [76, 0, 1, "", "Float32"], [77, 0, 1, "", "Float64"], [78, 0, 1, "", "Int128"], [79, 0, 1, "", "Int16"], [80, 0, 1, "", "Int32"], [81, 0, 1, "", "Int64"], [82, 0, 1, "", "Int8"], [83, 0, 1, "", "List"], [84, 0, 1, "", "Null"], [85, 0, 1, "", "Object"], [86, 0, 1, "", "String"], [87, 0, 1, "", "Struct"], [88, 0, 1, "", "Time"], [89, 0, 1, "", "UInt16"], [90, 0, 1, "", "UInt32"], [91, 0, 1, "", "UInt64"], [92, 0, 1, "", "UInt8"], [93, 0, 1, "", "Unknown"], [94, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[65, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[68, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[82, 1, 1, "", "__init__"]], "polars.datatypes.List": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[85, 1, 1, "", "__init__"]], "polars.datatypes.String": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[88, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[92, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[93, 1, 1, "", "__init__"]], "polars.exceptions": [[99, 6, 1, "", "CategoricalRemappingWarning"], [100, 6, 1, "", "ChronoFormatWarning"], [101, 6, 1, "", "ColumnNotFoundError"], [102, 6, 1, "", "ComputeError"], [103, 6, 1, "", "CustomUFuncWarning"], [104, 6, 1, "", "DataOrientationWarning"], [105, 6, 1, "", "DuplicateError"], [106, 6, 1, "", "InvalidOperationError"], [107, 6, 1, "", "MapWithoutReturnDtypeWarning"], [108, 6, 1, "", "ModuleUpgradeRequiredError"], [109, 6, 1, "", "NoDataError"], [110, 6, 1, "", "NoRowsReturnedError"], [111, 6, 1, "", "OutOfBoundsError"], [112, 6, 1, "", "PanicException"], [113, 6, 1, "", "ParameterCollisionError"], [114, 6, 1, "", "PerformanceWarning"], [115, 6, 1, "", "PolarsError"], [116, 6, 1, "", "PolarsInefficientMapWarning"], [117, 6, 1, "", "PolarsWarning"], [118, 6, 1, "", "RowsError"], [119, 6, 1, "", "SQLInterfaceError"], [120, 6, 1, "", "SQLSyntaxError"], [121, 6, 1, "", "SchemaError"], [122, 6, 1, "", "SchemaFieldNotFoundError"], [123, 6, 1, "", "ShapeError"], [124, 6, 1, "", "StringCacheMismatchError"], [125, 6, 1, "", "StructFieldNotFoundError"], [126, 6, 1, "", "TooManyRowsReturnedError"], [127, 6, 1, "", "UnstableWarning"], [128, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[139, 1, 1, "", "next_batches"]], "polars.io.plugins": [[140, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[928, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[928, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[929, 1, 1, "", "agg"], [930, 1, 1, "", "all"], [931, 1, 1, "", "count"], [932, 1, 1, "", "first"], [933, 1, 1, "", "head"], [934, 1, 1, "", "last"], [935, 1, 1, "", "len"], [936, 1, 1, "", "map_groups"], [937, 1, 1, "", "max"], [938, 1, 1, "", "mean"], [939, 1, 1, "", "median"], [940, 1, 1, "", "min"], [941, 1, 1, "", "n_unique"], [942, 1, 1, "", "quantile"], [943, 1, 1, "", "sum"], [944, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[945, 1, 1, "", "cancel"], [946, 1, 1, "", "fetch"], [947, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[142, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[959, 4, 1, "", "all"], [959, 4, 1, "", "alpha"], [959, 4, 1, "", "alphanumeric"], [959, 4, 1, "", "binary"], [959, 4, 1, "", "boolean"], [959, 4, 1, "", "by_dtype"], [959, 4, 1, "", "by_index"], [959, 4, 1, "", "by_name"], [959, 4, 1, "", "categorical"], [959, 4, 1, "", "contains"], [959, 4, 1, "", "date"], [959, 4, 1, "", "datetime"], [959, 4, 1, "", "decimal"], [959, 4, 1, "", "digit"], [959, 4, 1, "", "duration"], [959, 4, 1, "", "ends_with"], [959, 4, 1, "", "exclude"], [959, 4, 1, "", "expand_selector"], [959, 4, 1, "", "first"], [959, 4, 1, "", "float"], [959, 4, 1, "", "integer"], [959, 4, 1, "", "is_selector"], [959, 4, 1, "", "last"], [959, 4, 1, "", "matches"], [959, 4, 1, "", "numeric"], [959, 4, 1, "", "signed_integer"], [959, 4, 1, "", "starts_with"], [959, 4, 1, "", "string"], [959, 4, 1, "", "temporal"], [959, 4, 1, "", "time"], [959, 4, 1, "", "unsigned_integer"]], "polars.testing": [[168, 4, 1, "", "assert_frame_equal"], [169, 4, 1, "", "assert_frame_not_equal"], [170, 4, 1, "", "assert_series_equal"], [171, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[172, 0, 1, "", "column"], [173, 4, 1, "", "columns"], [174, 4, 1, "", "create_list_strategy"], [175, 4, 1, "", "dataframes"], [176, 4, 1, "", "dtypes"], [177, 4, 1, "", "lists"], [178, 4, 1, "", "load_profile"], [179, 4, 1, "", "series"], [180, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[172, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 48, 60, 65, 75, 87, 95, 98, 100, 106, 130, 137, 140, 145, 146, 147, 148, 150, 151, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 179, 206, 207, 218, 219, 222, 227, 230, 235, 236, 241, 247, 250, 251, 261, 268, 270, 274, 276, 278, 281, 284, 285, 292, 301, 304, 309, 311, 312, 313, 314, 315, 320, 321, 346, 383, 416, 448, 453, 472, 475, 495, 501, 505, 518, 534, 555, 584, 585, 597, 606, 611, 618, 619, 626, 627, 638, 645, 679, 683, 691, 692, 693, 695, 697, 706, 707, 710, 711, 713, 720, 721, 722, 723, 727, 731, 733, 735, 743, 752, 753, 754, 755, 760, 767, 770, 773, 774, 783, 784, 786, 787, 793, 798, 799, 800, 801, 803, 805, 806, 808, 815, 817, 819, 820, 821, 827, 833, 837, 853, 855, 866, 867, 876, 877, 881, 882, 891, 899, 904, 905, 911, 916, 917, 918, 919, 920, 923, 924, 936, 953, 958, 959, 963, 964, 965, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1071, 1072, 1073, 1076, 1077, 1080, 1082, 1084, 1085, 1086, 1089, 1097, 1099, 1100, 1101, 1102, 1107, 1108, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1125, 1127, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1348, 1353, 1357, 1361, 1364, 1371, 1372], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 51, 52, 54, 56, 57, 58, 60, 64, 65, 72, 83, 95, 131, 141, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 167, 172, 173, 174, 175, 176, 177, 179, 182, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 220, 221, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 241, 242, 246, 248, 249, 250, 253, 255, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 271, 272, 274, 276, 278, 280, 281, 282, 283, 284, 291, 292, 293, 294, 296, 301, 302, 303, 304, 305, 306, 308, 310, 314, 316, 317, 320, 322, 323, 325, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 346, 349, 350, 354, 356, 357, 359, 363, 364, 365, 366, 367, 368, 371, 372, 373, 376, 377, 379, 382, 392, 395, 397, 404, 406, 411, 414, 417, 423, 424, 425, 426, 427, 428, 435, 436, 437, 441, 442, 443, 449, 450, 454, 457, 459, 460, 464, 468, 471, 473, 475, 478, 479, 481, 482, 486, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 504, 505, 507, 509, 510, 512, 514, 516, 520, 521, 524, 527, 529, 530, 531, 532, 534, 536, 541, 542, 545, 548, 551, 552, 553, 559, 560, 572, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 592, 597, 600, 603, 604, 605, 607, 609, 618, 619, 620, 621, 622, 624, 625, 627, 630, 631, 633, 634, 635, 636, 640, 641, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 674, 675, 676, 680, 681, 682, 685, 690, 691, 692, 695, 696, 735, 736, 737, 739, 740, 741, 744, 749, 750, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 771, 778, 782, 785, 791, 792, 794, 795, 796, 799, 802, 803, 804, 808, 810, 811, 815, 816, 823, 824, 825, 826, 827, 828, 833, 837, 852, 855, 856, 857, 860, 862, 863, 865, 866, 868, 869, 871, 872, 873, 875, 876, 877, 880, 881, 885, 887, 890, 891, 894, 896, 897, 899, 903, 904, 909, 911, 912, 913, 921, 923, 925, 926, 927, 929, 931, 932, 934, 936, 937, 938, 939, 940, 941, 942, 943, 953, 958, 959, 963, 970, 971, 972, 973, 974, 975, 976, 978, 980, 983, 989, 999, 1002, 1004, 1010, 1022, 1029, 1031, 1032, 1034, 1037, 1038, 1039, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1060, 1064, 1068, 1069, 1070, 1072, 1074, 1078, 1082, 1085, 1089, 1092, 1093, 1095, 1096, 1100, 1103, 1108, 1109, 1110, 1111, 1116, 1121, 1123, 1128, 1129, 1131, 1134, 1135, 1139, 1142, 1144, 1145, 1146, 1147, 1150, 1151, 1158, 1159, 1162, 1165, 1168, 1169, 1170, 1176, 1177, 1189, 1193, 1195, 1196, 1197, 1198, 1199, 1203, 1204, 1210, 1211, 1217, 1220, 1222, 1223, 1224, 1228, 1229, 1233, 1234, 1236, 1237, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1248, 1256, 1257, 1258, 1259, 1262, 1263, 1264, 1267, 1272, 1273, 1274, 1277, 1278, 1282, 1288, 1321, 1322, 1324, 1327, 1329, 1330, 1331, 1332, 1336, 1338, 1348, 1353, 1357, 1363, 1365, 1366, 1367, 1370, 1373, 1374, 1376, 1378, 1379], "00": [28, 41, 71, 207, 214, 236, 316, 346, 444, 445, 448, 452, 462, 463, 465, 469, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 649, 651, 653, 655, 657, 660, 662, 664, 720, 723, 727, 778, 779, 780, 781, 795, 823, 824, 825, 837, 855, 863, 877, 953, 959, 1054, 1055, 1058, 1059, 1060, 1062, 1063, 1064, 1069, 1070, 1074, 1076, 1077, 1078, 1079, 1083, 1084, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1288, 1302, 1305, 1309, 1371], "000": [9, 11, 28, 41, 52, 346, 1288, 1379], "0000": [308, 346, 1332, 1348, 1379], "000000": [400, 401, 475, 686, 1006, 1007, 1268], "00000001": [12, 751, 837], "00000010": [751, 837], "00000011": [751, 837], "00000100": [751, 837], "00001000": [751, 837], "00001010": [751, 837], "00001011": [751, 837], "0000e": 12, "0000ff": [400, 401, 686, 1006, 1007, 1268], "0001": 475, "000100": 475, "000101": 475, "0005": 959, "00050": 959, "000800": 1089, "001": [58, 730, 781, 1092, 1093, 1095, 1312], "002": [781, 1092, 1093, 1095], "005": [1103, 1348], "00prefix": 959, "00z": [720, 723, 1302, 1305], "01": [29, 56, 70, 71, 175, 207, 214, 234, 236, 251, 278, 316, 346, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 720, 722, 723, 727, 762, 775, 776, 777, 778, 779, 780, 781, 795, 837, 855, 863, 877, 882, 902, 953, 959, 1053, 1055, 1057, 1058, 1059, 1060, 1063, 1064, 1069, 1070, 1074, 1076, 1077, 1078, 1079, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1302, 1304, 1305, 1309, 1371, 1374], "010": [9, 725, 1307], "01000": 29, "01000010": [751, 837], "01000110": [751, 837], "012": [666, 703, 837, 1245, 1285, 1348], "0123": [730, 1312], "01234": [666, 837, 1245, 1348], "012345": 1089, "015625": [1220, 1348], "01\u00b2": [703, 1285], "02": [56, 207, 214, 234, 236, 278, 316, 346, 443, 445, 447, 453, 462, 463, 465, 469, 474, 475, 477, 480, 482, 486, 646, 649, 651, 653, 655, 657, 660, 662, 664, 665, 720, 722, 723, 727, 762, 775, 776, 777, 778, 779, 780, 781, 795, 837, 855, 863, 877, 902, 953, 959, 1002, 1055, 1057, 1059, 1060, 1063, 1064, 1069, 1070, 1074, 1076, 1077, 1078, 1082, 1083, 1084, 1087, 1088, 1091, 1094, 1096, 1097, 1193, 1302, 1304, 1305, 1309, 1371, 1372], "03": [56, 137, 145, 207, 236, 251, 278, 316, 346, 445, 447, 448, 453, 462, 463, 465, 468, 469, 470, 472, 474, 475, 476, 477, 480, 482, 483, 486, 492, 505, 646, 649, 651, 653, 655, 657, 660, 662, 664, 722, 727, 775, 776, 777, 778, 779, 780, 781, 837, 855, 877, 882, 902, 953, 959, 1055, 1057, 1058, 1063, 1064, 1069, 1070, 1076, 1077, 1078, 1083, 1084, 1086, 1088, 1090, 1091, 1094, 1096, 1304, 1309], "037037": [1220, 1348], "04": [165, 207, 214, 236, 316, 346, 447, 448, 462, 463, 468, 469, 470, 472, 476, 477, 480, 482, 486, 649, 651, 653, 655, 657, 660, 662, 664, 720, 762, 775, 778, 779, 781, 837, 855, 863, 877, 953, 959, 1058, 1070, 1074, 1076, 1077, 1078, 1083, 1086, 1090, 1091, 1094, 1096, 1100, 1302, 1371], "047198": 1373, "05": [17, 165, 168, 169, 170, 171, 175, 207, 214, 316, 346, 443, 446, 447, 448, 449, 450, 454, 457, 458, 459, 460, 462, 463, 464, 469, 471, 472, 473, 475, 476, 762, 775, 776, 778, 779, 855, 863, 953, 959, 1057, 1058, 1059, 1060, 1083, 1084, 1086, 1087, 1089, 1090, 1097, 1371, 1372, 1374], "050545": 137, "0522623626787952": [1151, 1348], "0545": [1059, 1060, 1087], "05t10": 1089, "06": [175, 207, 316, 346, 443, 447, 461, 467, 469, 470, 471, 483, 484, 775, 778, 795, 855, 953, 959, 1053, 1083, 1084, 1089, 1097], "060": [449, 450, 454, 457, 459, 460, 464, 471, 473], "0601749420166": [222, 346], "06293300616044681": [1103, 1348], "07": [17, 145, 175, 214, 346, 443, 446, 447, 458, 469, 470, 475, 483, 720, 775, 776, 778, 779, 787, 863, 953, 959, 1053, 1057, 1083, 1089, 1302, 1371, 1374], "071068": [214, 346, 863, 953], "08": [145, 168, 169, 170, 171, 214, 251, 278, 293, 346, 443, 447, 462, 463, 470, 475, 646, 720, 779, 781, 795, 837, 863, 882, 902, 953, 959, 1053, 1084, 1097, 1302, 1371, 1372], "085537": [1112, 1348], "09": [56, 145, 214, 278, 346, 443, 447, 462, 463, 475, 626, 646, 724, 775, 776, 778, 825, 837, 863, 902, 953, 959, 1053, 1306], "090909": [627, 837], "094395": 1373, "098612": [581, 837, 1196, 1198, 1348, 1370], "0999": [446, 458], "0_": [41, 346], "0m": [452, 1062], "0x11bc0ad80": 958, "0\u00b5": 475, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 141, 145, 146, 149, 150, 151, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 175, 179, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 404, 406, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 593, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 706, 707, 708, 712, 713, 714, 715, 716, 717, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 833, 837, 852, 853, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 959, 963, 964, 965, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1010, 1021, 1022, 1026, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1273, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1288, 1289, 1290, 1294, 1295, 1312, 1313, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1348, 1353, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1377, 1378, 1379], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 51, 56, 64, 137, 145, 146, 148, 159, 167, 209, 214, 218, 224, 233, 234, 236, 238, 240, 241, 242, 247, 251, 254, 265, 269, 271, 276, 278, 284, 293, 297, 320, 325, 328, 330, 333, 334, 335, 336, 337, 338, 339, 346, 357, 361, 369, 370, 371, 373, 425, 431, 434, 439, 443, 444, 446, 447, 449, 450, 452, 454, 457, 458, 459, 460, 462, 463, 464, 468, 469, 470, 471, 473, 475, 483, 486, 492, 513, 514, 515, 520, 526, 538, 546, 552, 554, 560, 570, 572, 574, 578, 580, 596, 598, 609, 624, 626, 627, 630, 640, 641, 646, 677, 725, 735, 738, 751, 762, 763, 771, 776, 778, 779, 782, 785, 787, 789, 797, 798, 822, 825, 837, 858, 859, 863, 866, 877, 878, 880, 882, 886, 895, 896, 902, 904, 914, 915, 923, 929, 932, 934, 937, 938, 939, 940, 941, 942, 943, 953, 959, 1035, 1049, 1053, 1054, 1056, 1057, 1062, 1071, 1083, 1089, 1097, 1100, 1103, 1109, 1130, 1141, 1155, 1163, 1171, 1177, 1187, 1189, 1191, 1195, 1197, 1201, 1217, 1229, 1247, 1249, 1307, 1320, 1327, 1329, 1332, 1348, 1357, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1374, 1379], "100": [11, 18, 28, 41, 133, 136, 141, 145, 146, 147, 150, 154, 155, 156, 159, 163, 252, 270, 289, 346, 475, 640, 641, 670, 684, 694, 696, 699, 708, 724, 780, 837, 883, 908, 953, 959, 1105, 1197, 1213, 1228, 1229, 1235, 1236, 1238, 1252, 1266, 1278, 1281, 1290, 1306, 1348, 1368, 1379], "1000": [147, 222, 302, 323, 346, 362, 837, 927, 953, 1092, 1197, 1326, 1348, 1379], "10000": [145, 249, 346], "100000": [11, 28], "1000000": [12, 1095], "1001": [323, 346, 927, 953], "1002": [323, 346, 927, 953], "10047419486152048166": [237, 346], "1005": [362, 837], "100_000": [815, 887, 953], "100\u00b5": 475, "101": [9, 28, 252, 346, 447, 475, 725, 883, 953, 959, 1307, 1379], "101000": 447, "10101": [28, 1374], "1010101": 9, "101514": [214, 346, 863, 953], "102": [252, 346, 883, 953], "1024": [38, 47, 48, 51, 145, 146, 147, 155, 163, 346, 404, 953, 1010], "1040361802642726": [1151, 1348], "107149": 1373, "10734580197236529959": [1129, 1348], "1073741824": [671, 837], "10783150408545073287": [237, 346], "107_930_000": 1357, "10_000": [41, 346], "10i": [236, 346, 877, 953], "10m": [470, 483, 1084, 1097], "10t00": 475, "11": [11, 17, 47, 51, 167, 175, 205, 214, 251, 278, 346, 357, 462, 463, 465, 470, 483, 507, 520, 552, 603, 627, 636, 646, 647, 661, 677, 751, 795, 820, 825, 833, 837, 852, 858, 859, 863, 878, 882, 886, 896, 902, 915, 953, 959, 1079, 1084, 1097, 1201, 1234, 1348, 1366], "110": [218, 346, 708, 725, 866, 953, 1307], "1101441246220388612": [514, 837], "111": [11, 1368], "11111": 1085, "111110": 1085, "11111001": [751, 837], "11111010": [751, 837], "11111111": 11, "112": [671, 837, 1379], "11330": 174, "1152921504606846976": [1226, 1348], "116": 174, "11638928888656214026": [514, 837], "118034": [913, 953], "11aa": 1371, "11aabb": 1371, "11h": [444, 1054], "12": [27, 41, 56, 137, 145, 167, 175, 214, 236, 247, 251, 252, 278, 293, 316, 346, 357, 433, 444, 446, 447, 451, 458, 461, 462, 463, 465, 466, 467, 468, 470, 475, 483, 484, 485, 492, 520, 552, 584, 600, 627, 635, 646, 661, 671, 685, 706, 724, 772, 775, 778, 779, 780, 795, 798, 823, 824, 825, 837, 863, 877, 878, 882, 883, 886, 902, 909, 915, 953, 959, 1054, 1056, 1057, 1068, 1069, 1071, 1075, 1082, 1084, 1089, 1097, 1109, 1201, 1244, 1267, 1289, 1306, 1348, 1370, 1371, 1372, 1374, 1376, 1379], "120": [252, 346, 781, 883, 953, 1373], "1200": [666, 837], "120134": [724, 1306], "121": 1379, "123": [9, 593, 685, 692, 707, 730, 827, 959, 1267, 1274, 1312, 1325, 1348], "123000": 959, "1232e": [1037, 1039, 1348], "1234": [28, 666, 837], "12345": [787, 1032, 1089, 1121, 1244, 1348], "1234500": 959, "123456": [9, 959], "1234567": 28, "123456780": 137, "12346": 787, "123465": 959, "123a123": 707, "123abc": [706, 1288, 1289], "125": [1, 41, 60, 346, 355, 631, 816, 837, 912, 953, 1217, 1220, 1348], "1252": 145, "127": [1336, 1348, 1367], "128": [58, 72, 78, 1217, 1348], "129": [671, 837], "13": [208, 209, 214, 225, 226, 233, 241, 252, 253, 265, 278, 320, 328, 330, 333, 334, 335, 336, 337, 338, 339, 346, 357, 443, 449, 450, 454, 457, 459, 460, 464, 471, 473, 596, 598, 646, 724, 765, 771, 774, 778, 785, 821, 823, 826, 837, 856, 857, 863, 871, 872, 883, 885, 902, 923, 932, 934, 937, 938, 939, 940, 941, 942, 943, 953, 1053, 1084, 1097, 1098, 1201, 1306, 1348, 1367], "130": [252, 346, 883, 953], "13382926553367784577": [514, 837], "134821952": 1357, "134_821_952": 1357, "135": [759, 1373], "13614470193936745724": [514, 837], "13756996518000038261": [1129, 1348], "13d": 475, "13h": [444, 1054], "14": [40, 167, 214, 252, 255, 328, 330, 333, 334, 335, 336, 337, 338, 339, 346, 444, 449, 450, 454, 457, 459, 460, 464, 471, 473, 475, 520, 593, 636, 778, 823, 824, 837, 863, 883, 932, 934, 937, 938, 939, 940, 941, 942, 943, 953, 959, 1054, 1084, 1089], "140": [252, 346, 883, 953], "141592653589793": 11, "141593": [635, 837, 970, 1348, 1370, 1373], "142857": [1217, 1348], "143": [724, 1306, 1379], "1433": [39, 346], "1436e16": 175, "1438741209321515184": [237, 346], "1440": [480, 1094], "1443e235": 1379, "149": 1379, "14d": 959, "14h": 475, "15": [11, 41, 167, 214, 236, 241, 252, 255, 278, 346, 435, 439, 463, 468, 470, 475, 483, 492, 630, 646, 661, 703, 772, 778, 823, 824, 837, 863, 877, 883, 902, 953, 959, 1046, 1049, 1084, 1089, 1097, 1109, 1285, 1348, 1367, 1371], "150": [252, 346, 883, 953, 1236, 1348], "1500": [167, 178], "15000": [249, 346], "153061": [534, 837], "155": 141, "15836": 175, "15_000": [249, 346], "16": [1, 41, 58, 79, 89, 167, 181, 214, 236, 252, 278, 320, 346, 431, 434, 468, 475, 520, 600, 607, 626, 631, 646, 725, 735, 771, 781, 782, 785, 795, 837, 863, 877, 883, 902, 909, 923, 953, 959, 1084, 1097, 1217, 1257, 1307, 1321, 1348, 1367, 1370, 1371, 1376], "160": [252, 346, 883, 953], "165": [1084, 1097], "1656e15": [1039, 1348], "166667": [1217, 1348], "1666683077": 787, "1666683099": 787, "167": 56, "16996": 1379, "16h": 959, "17": [167, 175, 222, 251, 325, 346, 492, 518, 626, 647, 665, 767, 787, 824, 837, 882, 929, 953, 1037, 1039, 1084, 1109, 1133, 1234, 1348, 1379], "170": [141, 252, 346, 883, 953], "17293822569102704640": [1226, 1348], "174": 1379, "175201": [675, 837, 1258, 1348], "1755e": [172, 175], "1764": 60, "17888890": [222, 346], "179": 1379, "17_500": [249, 346], "18": [39, 137, 150, 214, 262, 278, 346, 434, 470, 483, 486, 520, 609, 626, 646, 735, 837, 863, 892, 896, 902, 953, 959, 1089, 1100, 1365, 1376], "180": [141, 437, 635, 837, 1373], "1800": [468, 1082], "1844": 175, "18446744073709551614": [1226, 1348], "185_000_000": 1357, "186": 1379, "1875": [663, 837, 921, 953], "1897": [446, 458, 1056, 1071], "18d": 959, "19": [175, 251, 278, 346, 446, 470, 646, 651, 653, 655, 657, 724, 837, 882, 902, 953, 1056, 1084, 1097, 1306], "1920": 1371, "196": 1372, "1964": [896, 953], "1969": [1371, 1372], "1970": [70, 71, 165, 1357], "1972": 1357, "1976": [456, 487], "1977": [456, 487], "1978": [449, 450, 454, 456, 457, 459, 460, 464, 471, 473, 487, 1372], "1979": [456, 487], "1980": 475, "1985": [776, 779], "1990": [145, 1357], "1993": 1357, "1994": 1357, "1995": 145, "1998": [465, 1079], "1999": [293, 346, 465, 475, 959, 1079, 1089, 1374], "199992": [887, 953], "199994": [887, 953], "199996": [887, 953], "199998": [887, 953], "1_000_000": [222, 346, 1107, 1348], "1_234_500": 959, "1d": [236, 251, 278, 316, 346, 445, 465, 470, 475, 477, 480, 483, 486, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 781, 797, 824, 825, 837, 877, 882, 902, 953, 959, 1055, 1063, 1069, 1079, 1084, 1088, 1091, 1094, 1097, 1109, 1348], "1e": [12, 168, 169, 170, 171], "1e6": 12, "1h": [236, 251, 278, 316, 346, 452, 465, 470, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1062, 1064, 1079, 1084, 1097, 1109, 1348], "1i": [236, 278, 316, 346, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 837, 877, 902, 953, 1109, 1348], "1m": [236, 251, 278, 316, 346, 465, 470, 482, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1092, 1093, 1095, 1096, 1097, 1109, 1348], "1mo": [236, 251, 278, 316, 346, 448, 462, 463, 465, 469, 470, 476, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1058, 1075, 1076, 1077, 1079, 1080, 1081, 1083, 1084, 1090, 1097, 1098, 1109, 1348], "1n": [236, 251, 278, 316, 346, 465, 470, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097, 1109, 1348], "1q": [236, 251, 278, 316, 346, 465, 470, 483, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097], "1st_col": 959, "1u": [236, 251, 278, 316, 346, 465, 470, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097, 1109, 1348], "1w": [236, 251, 278, 316, 346, 465, 470, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097, 1109, 1348], "1w2d": [776, 777], "1y": [236, 251, 278, 316, 346, 465, 470, 483, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097], "1y2mo": [465, 1079], "1zy3": [685, 1267], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 141, 145, 148, 154, 155, 157, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 177, 189, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 354, 355, 356, 357, 359, 361, 362, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 406, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 455, 458, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 811, 815, 816, 817, 818, 819, 820, 822, 825, 826, 827, 833, 837, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 958, 959, 963, 964, 965, 968, 971, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1021, 1027, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1057, 1059, 1060, 1062, 1064, 1067, 1068, 1069, 1071, 1073, 1074, 1075, 1076, 1077, 1081, 1082, 1083, 1084, 1087, 1097, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1154, 1155, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1267, 1273, 1275, 1277, 1278, 1279, 1281, 1282, 1284, 1285, 1288, 1289, 1294, 1295, 1297, 1298, 1299, 1302, 1303, 1305, 1306, 1307, 1308, 1311, 1313, 1315, 1316, 1318, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1348, 1353, 1357, 1358, 1360, 1361, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1377, 1378, 1379], "20": [39, 40, 41, 65, 145, 150, 167, 172, 173, 174, 175, 179, 182, 205, 214, 218, 224, 240, 241, 262, 269, 271, 276, 293, 303, 304, 308, 322, 327, 346, 369, 370, 371, 425, 439, 446, 449, 450, 454, 457, 458, 459, 460, 464, 470, 471, 473, 475, 483, 486, 507, 514, 520, 584, 592, 603, 630, 649, 651, 653, 655, 657, 660, 662, 664, 690, 735, 750, 778, 787, 797, 816, 824, 837, 852, 863, 866, 869, 892, 895, 912, 926, 931, 953, 959, 1049, 1056, 1060, 1071, 1084, 1089, 1097, 1100, 1112, 1128, 1228, 1272, 1327, 1329, 1332, 1348, 1364, 1365, 1368, 1374], "200": [478, 479, 481, 640, 641, 837, 959, 1105, 1213, 1228, 1229, 1235, 1236, 1238, 1348, 1368], "2000": [446, 455, 458, 462, 463, 465, 959, 1056, 1065, 1071, 1076, 1077, 1079, 1085, 1357, 1371], "200000": [478, 887, 953], "200000000": 481, "2001": [17, 445, 446, 451, 453, 455, 458, 461, 465, 466, 467, 470, 474, 483, 484, 485, 486, 649, 651, 653, 655, 657, 660, 662, 664, 720, 837, 959, 1055, 1056, 1061, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1084, 1088, 1097, 1098, 1099, 1100, 1101, 1302], "2002": [145, 455, 465, 1065, 1079, 1101], "2003": [465, 787, 1079], "2004": [465, 1079], "2005": [465, 1079], "2006": [465, 1079], "2008": 1357, "200m": [478, 479, 481], "2010": [293, 346, 475, 959], "2011": [444, 1054], "2012": [444, 1054, 1374], "2013": 1082, "2016": [251, 346, 882, 953], "2017": [251, 346, 882, 953], "2018": [251, 346, 469, 882, 953, 1083], "2019": [251, 346, 882, 953], "202": 1372, "2020": [149, 160, 207, 214, 234, 251, 278, 346, 349, 443, 448, 452, 469, 472, 475, 476, 477, 478, 479, 480, 481, 482, 492, 646, 720, 722, 723, 762, 837, 855, 863, 882, 902, 953, 959, 1053, 1058, 1062, 1083, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1109, 1302, 1304, 1305, 1348, 1372], "2021": [207, 214, 234, 236, 316, 346, 720, 797, 855, 863, 877, 953, 959, 1059, 1060, 1066, 1087, 1302, 1371], "2022": [56, 207, 214, 234, 346, 447, 470, 483, 720, 776, 777, 779, 780, 781, 787, 855, 863, 953, 959, 1057, 1066, 1084, 1097, 1302], "2023": [17, 41, 137, 167, 249, 346, 447, 781, 797, 959, 1057], "2024": [167, 443, 449, 450, 454, 457, 459, 460, 464, 468, 471, 473, 626, 762, 775, 776, 778, 779, 781, 837, 959, 1053, 1082, 1371, 1374], "2025": [443, 468, 762, 795, 959, 1053], "2026": 1372, "2030": 1371, "2031": 959, "2040": 475, "2047317070637311557": [237, 346], "2055938745": 137, "2065": [449, 450, 454, 457, 459, 460, 464, 471, 473], "2068": 175, "207": 1372, "2077": [293, 346, 475, 959, 1089, 1371, 1372], "2095": 175, "20_000": [41, 346], "20t08": 475, "20t18": 1089, "20word": 148, "21": [167, 214, 262, 295, 346, 446, 649, 651, 653, 655, 657, 660, 662, 664, 778, 787, 795, 837, 863, 892, 953, 959, 1056, 1365], "213": 1379, "2147483647": 1379, "2147483648": [1199, 1348], "21d": 959, "22": [47, 51, 167, 175, 346, 451, 466, 470, 483, 485, 486, 647, 649, 651, 653, 655, 657, 660, 662, 664, 720, 778, 833, 837, 953, 959, 1084, 1097, 1100, 1234, 1302, 1348, 1371, 1372, 1379], "221": 1379, "2246e": [1257, 1321, 1348], "225": [470, 483, 1373], "22500": 815, "22_000_000": 1357, "22_500": 815, "23": [11, 131, 175, 214, 236, 278, 308, 346, 447, 451, 454, 466, 468, 470, 475, 485, 646, 649, 651, 653, 655, 657, 660, 662, 664, 778, 781, 823, 824, 825, 837, 863, 877, 902, 912, 953, 959, 1057, 1064, 1082, 1332, 1348, 1378, 1379], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1357, "2337": [41, 346], "234": 28, "2345": 959, "23456789": 11, "235": 1379, "23h": 959, "24": [58, 167, 236, 251, 255, 278, 293, 316, 346, 433, 435, 451, 465, 466, 470, 477, 483, 485, 607, 646, 649, 651, 653, 655, 657, 660, 662, 664, 703, 776, 777, 779, 780, 781, 824, 825, 837, 877, 882, 902, 953, 1046, 1079, 1084, 1091, 1097, 1150, 1348, 1371, 1378], "24030": 174, "249": [751, 837], "25": [1, 28, 41, 60, 137, 214, 218, 236, 251, 278, 303, 308, 316, 320, 346, 404, 439, 451, 452, 466, 470, 475, 483, 485, 492, 631, 633, 636, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 744, 778, 779, 780, 781, 787, 795, 796, 799, 824, 825, 837, 863, 866, 877, 882, 889, 902, 921, 923, 953, 959, 1010, 1048, 1049, 1062, 1084, 1089, 1097, 1103, 1109, 1131, 1217, 1222, 1288, 1348, 1365, 1370, 1376, 1377], "250": [751, 837, 1236, 1348, 1368, 1379], "2500": [249, 308, 346], "254508": [492, 837, 1109, 1348], "255": 1379, "256": [255, 346, 404, 1010, 1217, 1348, 1370], "2560": 1010, "259921": [423, 837, 1031, 1348, 1370], "25_000_000": 1357, "26": [39, 41, 167, 172, 173, 174, 175, 179, 214, 346, 452, 484, 863, 953, 1062], "266667": [214, 346, 863, 953], "27": [1, 60, 303, 339, 346, 434, 461, 467, 484, 735, 837, 943, 959, 1220, 1327, 1348, 1378, 1379], "270": 1373, "28": [299, 304, 346, 355, 469, 486, 837, 1083, 1100, 1329, 1348, 1371, 1373, 1378, 1379], "283185": [635, 837], "2846": 346, "285714": [521, 837, 1135, 1348], "289962": 1373, "28_341_469": 1357, "29": [17, 167, 444, 462, 1054, 1076], "29096": 1379, "290994": [913, 953], "292432": [971, 1348], "292893": [492, 837, 1109, 1348], "2_color_scal": [41, 346], "2d": [278, 303, 304, 346, 465, 646, 797, 837, 902, 953, 1054, 1061], "2h": [649, 651, 653, 655, 657, 660, 662, 664, 837], "2i": [236, 346, 877, 953], "2m": [959, 1074], "2x": 174, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 56, 57, 58, 59, 60, 64, 65, 83, 95, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 141, 145, 148, 150, 154, 155, 156, 159, 165, 167, 168, 169, 170, 171, 174, 175, 176, 177, 179, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 355, 356, 357, 358, 360, 371, 372, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 605, 606, 607, 608, 609, 610, 612, 614, 616, 617, 620, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 678, 679, 680, 683, 684, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 722, 727, 728, 731, 732, 733, 734, 735, 736, 738, 742, 743, 746, 747, 748, 750, 751, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 837, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 958, 959, 964, 965, 968, 970, 972, 973, 974, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057, 1058, 1061, 1063, 1064, 1065, 1067, 1068, 1069, 1071, 1073, 1074, 1075, 1080, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1099, 1100, 1102, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1125, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1154, 1155, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1266, 1268, 1269, 1270, 1273, 1274, 1275, 1278, 1279, 1280, 1281, 1283, 1284, 1288, 1289, 1290, 1291, 1292, 1296, 1303, 1304, 1309, 1310, 1313, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1328, 1329, 1330, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1348, 1353, 1357, 1358, 1360, 1361, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1377, 1378, 1379], "30": [41, 214, 224, 236, 240, 269, 276, 299, 320, 346, 349, 369, 370, 371, 439, 447, 449, 450, 454, 457, 459, 460, 461, 462, 464, 467, 469, 470, 471, 473, 475, 476, 483, 484, 514, 592, 671, 778, 795, 797, 823, 824, 837, 863, 869, 877, 895, 923, 953, 959, 1049, 1057, 1076, 1083, 1084, 1089, 1090, 1097, 1128, 1348, 1353, 1364, 1365, 1368, 1370, 1371, 1373, 1374, 1377, 1379], "300": [299, 346, 513, 624, 641, 837, 959, 1229, 1235, 1236, 1238, 1348, 1368], "3000": 959, "3002": [446, 458, 1056, 1071], "30103": [580, 837, 1370], "3022416320763508302": [1129, 1348], "30_000": [41, 346], "30m": [236, 346, 470, 483, 877, 953, 1084, 1097], "30t16": 475, "31": [60, 65, 214, 293, 346, 446, 447, 451, 458, 462, 465, 468, 476, 690, 720, 775, 778, 787, 797, 816, 863, 953, 959, 1054, 1056, 1057, 1061, 1071, 1076, 1082, 1089, 1090, 1228, 1272, 1302, 1348, 1372, 1374, 1379], "31t06": 1089, "32": [58, 70, 76, 80, 90, 246, 251, 278, 346, 607, 646, 671, 837, 882, 902, 953, 1050, 1080, 1217, 1239, 1348, 1365, 1371], "321": [28, 1379], "3212": [724, 1306], "321cba": 1371, "3265500": 959, "32971": [486, 1100], "32974": [486, 1100], "32976": [486, 1100], "32bit": [303, 346], "33": [214, 262, 346, 665, 837, 863, 892, 953, 1239, 1348, 1372], "333": [17, 666, 837, 1105, 1213, 1245, 1348], "33333": 1374, "333333": [242, 346, 609, 795, 880, 953, 1217, 1243, 1348, 1365], "34": [214, 346, 706, 720, 863, 953, 1289, 1302], "3420": [724, 1306], "343622": [676, 837], "345": [420, 421, 701, 702, 1026, 1027, 1283, 1284], "3450": [1245, 1348], "3456": 959, "34776706224699483": [1259, 1348], "35": [41, 346, 439, 475, 778, 837, 1049, 1348], "350": [346, 349, 513, 624, 837, 1236, 1348, 1353], "3500": [1245, 1348], "356": [451, 466, 485], "356194": [758, 759, 1373], "357": [451, 466, 485], "358": [451, 466, 485], "359": [451, 466, 485], "36": [214, 346, 863, 953, 1376], "360": [437, 635, 837, 1373], "361": 1379, "363961": [572, 1189], "366": [466, 1080], "37": [13, 959], "370h": [492, 837, 1109, 1348], "37338": 1379, "38": [41, 137, 172, 175, 346], "38180177416060584": [658, 837, 1240, 1348], "381802": [658, 837, 1240, 1348], "386294": [581, 837, 1198, 1348, 1370], "389056": [496, 837, 1112, 1348, 1370], "39": [662, 787, 837], "39m": 959, "3_color_scal": [41, 346], "3d12h4m25": [236, 251, 278, 316, 346, 470, 483, 492, 646, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1084, 1097, 1109, 1348], "3f": [148, 720, 723, 1302, 1305], "3i": [236, 278, 346, 877, 953], "3rd": [1279, 1303], "3xy": [685, 1267], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 56, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 141, 159, 167, 179, 203, 204, 205, 206, 207, 208, 209, 213, 215, 219, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 262, 264, 265, 266, 268, 269, 270, 271, 274, 278, 280, 281, 288, 289, 292, 296, 297, 298, 299, 300, 301, 304, 307, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 354, 355, 356, 357, 359, 361, 373, 380, 381, 382, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 397, 398, 404, 415, 416, 417, 420, 421, 423, 424, 425, 429, 430, 433, 434, 435, 437, 440, 447, 450, 451, 458, 466, 467, 468, 469, 470, 471, 472, 475, 477, 480, 482, 483, 485, 489, 490, 492, 496, 497, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 515, 517, 519, 520, 521, 522, 531, 532, 536, 537, 538, 545, 546, 547, 548, 549, 551, 552, 554, 562, 564, 565, 566, 567, 568, 569, 570, 574, 575, 580, 583, 584, 585, 605, 607, 609, 610, 612, 614, 616, 617, 620, 621, 622, 625, 626, 628, 629, 630, 631, 634, 636, 640, 641, 642, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 673, 677, 678, 679, 680, 683, 685, 689, 692, 695, 697, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 713, 718, 719, 720, 721, 725, 730, 731, 733, 734, 735, 736, 738, 741, 742, 743, 744, 750, 751, 753, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 771, 772, 773, 774, 775, 778, 779, 780, 782, 784, 785, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 833, 837, 852, 853, 855, 856, 857, 858, 859, 862, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 896, 897, 899, 902, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 958, 959, 963, 968, 971, 978, 985, 987, 988, 989, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1010, 1021, 1026, 1027, 1032, 1033, 1035, 1041, 1046, 1048, 1050, 1060, 1064, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1081, 1083, 1084, 1086, 1091, 1094, 1096, 1097, 1098, 1099, 1106, 1109, 1113, 1114, 1116, 1117, 1122, 1123, 1125, 1130, 1131, 1134, 1135, 1136, 1137, 1141, 1144, 1145, 1146, 1147, 1149, 1155, 1162, 1163, 1164, 1165, 1166, 1171, 1175, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1191, 1192, 1207, 1210, 1211, 1214, 1217, 1218, 1219, 1220, 1224, 1225, 1228, 1229, 1230, 1233, 1237, 1239, 1240, 1241, 1242, 1243, 1246, 1248, 1252, 1253, 1256, 1259, 1260, 1261, 1265, 1267, 1271, 1274, 1277, 1279, 1283, 1284, 1286, 1287, 1292, 1294, 1295, 1300, 1301, 1302, 1303, 1307, 1312, 1313, 1316, 1318, 1320, 1326, 1329, 1331, 1333, 1339, 1348, 1353, 1357, 1358, 1360, 1361, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1376, 1377, 1378, 1379], "40": [41, 214, 224, 251, 269, 346, 470, 475, 483, 514, 578, 724, 735, 837, 863, 882, 895, 953, 959, 1066, 1097, 1195, 1306, 1364, 1365, 1368, 1371], "400": [315, 346, 478, 479, 481, 920, 953, 1235, 1236, 1238, 1348, 1368], "4000000": [1107, 1348], "400157": 95, "404": [252, 346, 691, 693, 883, 953, 1273, 1275], "4096": 1370, "41": [214, 346, 662, 837, 863, 953, 1365, 1379], "412277": 175, "414214": [680, 837, 1262, 1348, 1370], "4160": 60, "416147": 1373, "4164": [251, 346, 882, 953], "42": [60, 214, 237, 262, 278, 346, 475, 646, 837, 863, 892, 902, 953, 1129, 1348, 1364, 1378], "424778": [635, 837], "428571": [491, 837, 1108, 1348], "429101": 1365, "4294967296": [47, 346], "43": [214, 278, 346, 434, 646, 662, 837, 863, 902, 953], "4321": 959, "433013": [659, 837, 913, 953], "44": [11, 262, 346, 440, 837, 892, 953], "4411": [251, 346, 882, 953], "44225": [1031, 1348], "444": 11, "44444444444": 11, "45": [41, 214, 278, 346, 447, 470, 483, 646, 662, 685, 692, 732, 759, 778, 797, 823, 824, 837, 863, 902, 953, 959, 1057, 1084, 1089, 1097, 1267, 1274, 1315, 1370, 1371, 1373, 1377, 1379], "450": [1236, 1348], "45000": 815, "4500000": 959, "456": [9, 11, 447, 959, 1057, 1325, 1348], "456000": [447, 1057], "456001\u00b5": 959, "4566": [251, 346, 882, 953], "456789": [475, 959, 1085], "456789\u00b5": 959, "456m": 959, "457658": 1373, "459148": [488, 837], "46": 959, "4696": [251, 346, 882, 953], "47": [56, 214, 346, 662, 837, 863, 953, 959, 1365], "470": [896, 953], "47033": [658, 837, 1240, 1348], "47033046033698594": [658, 837, 1240, 1348], "475": [896, 953], "48": [13, 175, 278, 346, 646, 735, 837, 902, 953, 959], "4827": [251, 346, 882, 953], "485": 1379, "49": [214, 346, 863, 953, 959], "492474": [492, 837, 1109, 1348], "498": [252, 346, 883, 953], "4_500_000": 959, "4ab4a": 1371, "4d": [492, 837, 1109, 1348], "4f6228": [41, 346], "4f71": [41, 346], "4x": [248, 346], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 43, 44, 47, 52, 56, 57, 59, 60, 64, 104, 130, 133, 134, 135, 136, 137, 139, 146, 167, 168, 170, 173, 175, 179, 204, 207, 208, 209, 214, 215, 218, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 242, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 264, 265, 266, 268, 270, 271, 272, 274, 278, 281, 288, 289, 292, 293, 296, 297, 298, 299, 300, 301, 303, 304, 307, 308, 310, 313, 314, 315, 316, 319, 320, 322, 323, 325, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 355, 356, 359, 374, 375, 380, 381, 382, 384, 386, 390, 395, 397, 403, 404, 415, 416, 417, 420, 421, 424, 425, 435, 436, 437, 439, 440, 443, 446, 447, 448, 449, 450, 454, 457, 458, 459, 460, 464, 469, 471, 472, 473, 475, 476, 482, 486, 490, 492, 494, 495, 498, 500, 504, 505, 509, 510, 512, 515, 517, 520, 522, 525, 528, 529, 530, 531, 532, 536, 538, 545, 548, 549, 551, 552, 554, 557, 559, 560, 564, 565, 566, 567, 568, 569, 573, 574, 578, 584, 605, 607, 609, 621, 625, 626, 627, 628, 629, 630, 631, 633, 634, 636, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 668, 679, 685, 695, 696, 697, 700, 701, 702, 721, 725, 736, 738, 742, 743, 744, 756, 758, 759, 761, 762, 763, 764, 765, 767, 769, 771, 772, 773, 774, 775, 776, 778, 781, 782, 783, 784, 785, 789, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 815, 816, 818, 820, 821, 822, 826, 833, 837, 855, 856, 857, 858, 859, 863, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 889, 890, 896, 899, 902, 908, 909, 910, 911, 912, 913, 914, 915, 919, 920, 922, 923, 926, 927, 929, 931, 932, 933, 934, 937, 938, 939, 940, 941, 942, 943, 944, 953, 959, 968, 971, 975, 978, 981, 982, 985, 987, 988, 989, 991, 993, 997, 1002, 1003, 1004, 1009, 1010, 1021, 1026, 1033, 1035, 1042, 1046, 1047, 1048, 1049, 1050, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1071, 1083, 1085, 1086, 1087, 1089, 1090, 1096, 1098, 1099, 1100, 1106, 1109, 1111, 1113, 1114, 1115, 1125, 1130, 1131, 1134, 1136, 1140, 1143, 1155, 1162, 1165, 1166, 1171, 1174, 1177, 1181, 1182, 1183, 1184, 1185, 1186, 1190, 1191, 1195, 1199, 1207, 1214, 1217, 1218, 1219, 1222, 1223, 1224, 1225, 1229, 1230, 1233, 1234, 1235, 1236, 1238, 1239, 1242, 1246, 1248, 1253, 1259, 1262, 1267, 1277, 1278, 1279, 1282, 1283, 1303, 1307, 1320, 1327, 1329, 1332, 1333, 1336, 1339, 1348, 1353, 1358, 1361, 1363, 1365, 1366, 1367, 1370, 1371, 1372, 1373, 1376, 1378, 1379], "50": [13, 28, 41, 214, 224, 234, 346, 425, 470, 475, 483, 776, 777, 837, 863, 953, 959, 1035, 1048, 1097, 1288, 1348, 1364, 1365], "500": [41, 315, 346, 349, 449, 450, 454, 457, 459, 460, 464, 471, 473, 920, 953, 1070, 1072, 1078, 1235, 1236, 1238, 1348, 1353], "5000": [308, 346, 1332, 1348], "50000": 146, "500000": [457, 1070], "500000000": [464, 1078], "5000555": 959, "500_000": [449, 450, 454, 457, 459, 460, 464, 471, 473], "500m": [1070, 1072, 1078], "51": 959, "512": [47, 147, 248, 346, 404, 631, 837, 1010, 1217, 1348], "51966": [725, 1307], "52": [320, 346, 484, 665, 837, 923, 953], "523599": 1373, "527525": [1241, 1348], "53": [484, 1098, 1376], "533316061": 1357, "533_316_061": 1357, "54": [496, 837, 1151, 1348, 1370, 1379], "540": [437, 635, 837], "540302": 1373, "543": 9, "543081": [427, 837, 1038, 1348], "5432": 147, "54321": 9, "544": 1379, "544705": 767, "549306": [975, 1348], "55": [41, 58, 346, 518, 837, 1133, 1348, 1367, 1371, 1372], "5555": 959, "55550": 959, "56": [137, 706, 739, 837, 1289], "566371": [635, 837], "567": 28, "56789": [1032, 1121, 1244, 1348], "57": [662, 837, 1244, 1348, 1373, 1379], "570796": [363, 365, 837, 970, 972, 1348, 1373], "575050513": [172, 175], "58": [141, 270, 346], "581139": [1048, 1348], "584963": [579, 837], "587401": [423, 837, 1370], "59": [137, 214, 346, 447, 460, 468, 471, 475, 505, 778, 823, 824, 825, 837, 863, 953, 959, 1057, 1074, 1082, 1085], "59815": [496, 837, 1370], "5_000_555": 959, "5th": [41, 346], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 55, 57, 59, 64, 96, 97, 104, 130, 133, 134, 135, 136, 154, 155, 167, 204, 207, 210, 211, 215, 216, 217, 219, 220, 221, 223, 224, 227, 230, 231, 232, 233, 234, 236, 238, 240, 241, 242, 244, 246, 247, 248, 250, 251, 254, 255, 256, 257, 258, 259, 260, 263, 264, 267, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 289, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 329, 339, 340, 346, 349, 350, 355, 359, 380, 381, 382, 384, 390, 398, 416, 417, 420, 421, 433, 434, 440, 443, 447, 451, 461, 465, 466, 467, 478, 479, 481, 484, 485, 488, 490, 499, 500, 505, 506, 509, 515, 517, 520, 538, 539, 540, 549, 552, 565, 566, 567, 568, 572, 584, 585, 621, 625, 632, 635, 636, 637, 642, 644, 646, 648, 650, 652, 654, 656, 659, 661, 662, 663, 668, 673, 679, 685, 690, 701, 702, 725, 736, 738, 743, 751, 753, 755, 762, 764, 771, 772, 773, 775, 778, 782, 785, 791, 798, 799, 803, 816, 820, 833, 837, 855, 858, 859, 860, 861, 864, 865, 867, 868, 869, 870, 873, 874, 875, 877, 878, 880, 881, 882, 884, 886, 887, 894, 896, 898, 899, 900, 902, 903, 904, 906, 908, 909, 910, 911, 912, 915, 918, 919, 922, 923, 926, 927, 933, 943, 944, 953, 959, 985, 987, 988, 989, 991, 997, 1026, 1033, 1037, 1039, 1044, 1045, 1050, 1053, 1079, 1089, 1099, 1106, 1113, 1125, 1131, 1156, 1157, 1166, 1169, 1182, 1183, 1184, 1185, 1189, 1207, 1221, 1224, 1225, 1230, 1232, 1237, 1239, 1241, 1243, 1248, 1253, 1256, 1267, 1272, 1283, 1307, 1319, 1329, 1348, 1353, 1358, 1361, 1363, 1365, 1366, 1370, 1376, 1377, 1379], "60": [41, 224, 270, 346, 454, 459, 460, 471, 482, 505, 662, 720, 837, 1080, 1085, 1096, 1226, 1302, 1348, 1373], "600": [315, 346, 478, 479, 481, 920, 953, 959], "60000": 457, "600000": 959, "60000000": 464, "60206": [580, 837, 1370], "605551": 818, "605551275463989": 818, "609438": 1370, "60_000": [449, 450, 454, 457, 459, 460, 464, 471, 473], "61": [270, 346], "625": [656, 837], "626172": [687, 1269], "63": [662, 837], "63204": 1379, "6331e16": [1321, 1348, 1373], "636253": 1373, "64": [1, 58, 60, 71, 73, 77, 81, 88, 91, 166, 203, 308, 346, 428, 607, 631, 837, 1217, 1220, 1348, 1370], "64030": [725, 1307], "642093": 1373, "647961": 175, "64bit": [167, 638, 837, 1226, 1348], "65": [218, 346, 866, 953, 1103, 1348], "650": [513, 624, 837], "65280": [725, 1307], "654": [28, 816, 912, 953], "65432": 1374, "654321": 593, "65536": 1370, "65552": [403, 1009], "66": [251, 315, 346, 662, 751, 837, 882, 920, 953, 1151, 1239, 1348], "663053": 137, "666": 959, "666000": 959, "666667": [214, 242, 317, 334, 346, 491, 795, 796, 802, 837, 863, 880, 921, 938, 953, 1108, 1348], "666f6f": [687, 1269], "67500": 815, "676": [252, 346, 883, 953], "678": [685, 692, 1267, 1274], "6789": [29, 959], "67890": 29, "686241": 1365, "69": [662, 837, 1151, 1348], "693147": [581, 837, 1196, 1198, 1348, 1370], "6_000_000": 1357, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 57, 59, 64, 154, 155, 167, 182, 204, 207, 210, 211, 212, 214, 216, 217, 220, 221, 223, 227, 230, 232, 236, 238, 240, 242, 250, 254, 256, 258, 260, 262, 263, 267, 270, 272, 275, 276, 278, 279, 281, 282, 283, 284, 286, 289, 291, 294, 295, 296, 297, 302, 304, 305, 306, 314, 316, 317, 318, 346, 349, 350, 355, 359, 381, 382, 384, 393, 434, 446, 447, 451, 458, 466, 469, 470, 475, 483, 485, 496, 509, 515, 520, 521, 538, 552, 565, 566, 567, 568, 625, 626, 636, 642, 646, 661, 662, 679, 695, 724, 738, 762, 771, 772, 775, 778, 779, 785, 790, 798, 799, 816, 820, 837, 855, 860, 861, 863, 865, 868, 870, 873, 875, 877, 878, 880, 881, 886, 892, 894, 897, 900, 902, 903, 904, 908, 912, 915, 953, 959, 975, 988, 989, 991, 1000, 1056, 1057, 1061, 1066, 1071, 1083, 1084, 1089, 1097, 1099, 1112, 1135, 1150, 1169, 1182, 1183, 1184, 1185, 1229, 1230, 1242, 1248, 1277, 1306, 1348, 1353, 1358, 1363, 1365, 1366, 1367, 1370, 1372, 1376, 1379], "70": [214, 346, 751, 779, 837, 863, 953, 1151, 1348, 1365], "700": [315, 346, 920, 953], "702963": [41, 346], "7051579356916758811": 161, "707107": [392, 493, 659, 660, 758, 837, 999, 1110, 1348, 1373], "712389": 1373, "714": 1379, "714286": [521, 837, 1135, 1348], "718281828459045": [11, 488, 579, 837, 1103, 1196, 1348], "718282": [496, 837, 1112, 1348, 1370], "720": [437, 635, 837], "7264": 1379, "732051": [1262, 1348], "7415e16": 175, "742": [252, 346, 883, 953], "75": [41, 214, 218, 346, 359, 625, 633, 636, 648, 650, 652, 654, 659, 661, 663, 795, 799, 837, 863, 866, 953, 959, 1048, 1131, 1151, 1222, 1288, 1348, 1365, 1373, 1379], "7500": [249, 346], "7508": 1379, "754": [744, 837], "754888": [488, 837], "761594": [740, 837, 1322, 1348], "764052": 95, "7654": 959, "765431": 1085, "7654321": 28, "76933c": [41, 346], "77": 1089, "78": [9, 141, 706, 1289], "780": 9, "784": [251, 346, 882, 953], "785398": [367, 758, 759, 837, 974, 1348, 1373], "789": [11, 959], "79": [1151, 1348], "7d": 959, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 48, 56, 57, 59, 60, 64, 82, 86, 92, 154, 155, 167, 204, 207, 210, 211, 212, 214, 216, 217, 219, 220, 221, 223, 227, 230, 232, 234, 238, 240, 247, 250, 251, 252, 254, 255, 256, 258, 260, 263, 272, 275, 276, 278, 279, 281, 282, 283, 284, 286, 289, 291, 293, 294, 295, 297, 302, 304, 305, 306, 314, 317, 318, 320, 346, 359, 361, 373, 381, 382, 384, 431, 434, 435, 447, 475, 509, 516, 520, 521, 546, 548, 552, 565, 566, 567, 568, 607, 625, 626, 631, 636, 642, 643, 647, 671, 677, 679, 703, 704, 705, 720, 751, 756, 762, 767, 769, 772, 774, 782, 784, 789, 790, 793, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 816, 818, 821, 822, 826, 837, 855, 860, 861, 863, 865, 867, 868, 870, 873, 875, 878, 881, 882, 883, 886, 887, 896, 900, 903, 904, 908, 912, 915, 923, 953, 959, 988, 989, 991, 1039, 1046, 1066, 1131, 1135, 1150, 1163, 1165, 1169, 1182, 1183, 1184, 1185, 1217, 1220, 1230, 1233, 1234, 1237, 1239, 1241, 1243, 1286, 1287, 1302, 1348, 1357, 1358, 1363, 1365, 1366, 1367, 1370, 1371, 1372, 1376, 1379], "80": [41, 218, 346, 866, 953], "800": [478, 479, 481, 1089], "8000": 147, "803065983": 137, "81": 1370, "814697265625": [1107, 1348], "816497": [294, 346], "8192": 145, "82": [251, 346, 882, 953], "8257e14": 1379, "83": [251, 346, 882, 953], "833": [251, 346, 882, 953], "833333": [334, 938], "848062": 1373, "848808": 175, "85": [41, 141, 346, 1151, 1348, 1379], "850": [513, 624, 837], "8568409950394724": [1103, 1348], "8589934592": [671, 837], "86": 1379, "8601": 1371, "87": 1379, "876": 9, "88": [214, 346, 863, 953], "881374": [366, 837, 973, 1348], "888": [816, 912, 953], "8_000_000": 1357, "8a": [1006, 1007], "8nin": 1379, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 52, 56, 64, 204, 212, 214, 227, 229, 238, 242, 250, 252, 254, 255, 270, 278, 280, 281, 284, 296, 297, 314, 318, 320, 339, 346, 355, 359, 361, 373, 381, 382, 384, 389, 391, 431, 434, 437, 447, 475, 501, 509, 520, 526, 546, 552, 563, 571, 609, 625, 626, 635, 642, 646, 647, 658, 661, 662, 673, 677, 692, 724, 732, 735, 765, 771, 772, 775, 778, 790, 825, 837, 863, 873, 878, 880, 881, 883, 886, 902, 904, 915, 923, 943, 953, 959, 983, 984, 988, 989, 991, 996, 998, 1048, 1061, 1070, 1072, 1078, 1084, 1097, 1098, 1141, 1150, 1163, 1169, 1180, 1188, 1230, 1234, 1240, 1242, 1244, 1256, 1274, 1306, 1315, 1348, 1357, 1358, 1363, 1366, 1367, 1376], "90": [214, 252, 346, 724, 863, 883, 953, 1306, 1365, 1373], "90000": 815, "901234": [1032, 1121, 1244, 1348], "909": [251, 346, 882, 953], "910": [251, 346, 692, 882, 953, 1274], "910t": [685, 692, 1267, 1274], "914": [251, 346, 882, 953], "9223372036854775807": [747, 837], "9223372036854775808": [582, 837], "927295": 1373, "928571": [494, 837, 1111, 1348], "93": [1151, 1348], "94": [356, 837], "9477376373212048": [1151, 1348], "95": [18, 356, 837, 959], "95b3d7": [41, 346], "96": [18, 214, 346, 356, 837, 863, 953, 1151, 1348], "961": 60, "963624": [493, 837, 1110, 1348], "964028": [270, 346], "96_067_179": 1357, "97": [18, 241, 346, 356, 837, 1151, 1348], "9774092659964970114": [514, 837], "978307200": [453, 1063], "978307200000": 474, "978307200000000": [453, 474, 1063, 1088], "978307200000000000": 1088, "978393600": [453, 1063], "978393600000": 474, "978393600000000": [453, 474, 1063, 1088], "978393600000000000": 1088, "978480000": [453, 1063], "978480000000": 474, "978480000000000": [453, 474, 1063, 1088], "978480000000000000": 1088, "978738": 95, "98": [18, 241, 270, 346, 415, 508, 511, 678, 724, 742, 837, 1306], "987": [28, 593], "987000": 959, "9876": 9, "987654": [28, 959], "987654321": 11, "9876543210": 137, "987m": 959, "988": 11, "99": [18, 41, 225, 226, 241, 244, 270, 315, 346, 356, 415, 498, 500, 508, 511, 678, 742, 827, 837, 871, 872, 920, 953, 1089, 1103, 1115, 1348, 1370], "9914e218": 175, "993": [1131, 1348], "998347": [270, 346], "999": [446, 458, 959, 1056, 1071, 1368, 1379], "999000": 959, "999954": [270, 346], "999999": [468, 730, 778, 823, 824, 825, 959, 1082, 1089, 1312], "999999\u00b5": 959, "9bbb59": [41, 346], "A": [14, 38, 41, 47, 48, 52, 62, 63, 68, 74, 129, 137, 140, 145, 146, 147, 148, 159, 161, 166, 181, 211, 220, 229, 236, 251, 257, 259, 264, 270, 296, 299, 314, 315, 316, 320, 321, 346, 354, 421, 441, 442, 447, 472, 475, 489, 490, 498, 510, 512, 524, 527, 529, 530, 536, 576, 583, 584, 597, 611, 620, 621, 643, 648, 650, 652, 654, 656, 659, 661, 663, 683, 684, 685, 691, 692, 693, 694, 695, 696, 697, 700, 702, 706, 707, 708, 710, 721, 730, 765, 781, 782, 786, 837, 861, 868, 877, 882, 900, 920, 923, 924, 953, 959, 1027, 1051, 1052, 1057, 1086, 1089, 1105, 1115, 1213, 1235, 1236, 1238, 1241, 1242, 1243, 1265, 1266, 1267, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1282, 1284, 1288, 1289, 1290, 1292, 1303, 1312, 1348, 1357, 1358, 1361, 1374, 1376], "AND": [752, 753, 816, 959, 1367], "ANDs": [406, 837, 1012, 1348], "AS": [293, 346, 816, 817, 912, 953, 1357, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1378], "And": [728, 1310], "As": [13, 55, 96, 97, 130, 132, 133, 134, 136, 150, 154, 155, 163, 227, 274, 303, 308, 346, 576, 827, 873, 899, 953], "At": [47, 48, 49, 50, 51, 62, 63, 270, 346, 858, 859, 869, 896, 909, 953], "BY": [816, 912, 953, 1357, 1360, 1366, 1375, 1376], "Be": 953, "By": [5, 13, 15, 31, 34, 56, 145, 146, 159, 236, 250, 251, 278, 280, 289, 294, 316, 317, 346, 390, 465, 470, 483, 569, 572, 578, 626, 641, 646, 649, 651, 653, 655, 657, 660, 662, 664, 670, 681, 749, 769, 776, 777, 779, 780, 781, 797, 818, 824, 825, 826, 837, 858, 877, 881, 882, 902, 908, 913, 921, 953, 997, 1079, 1084, 1097, 1186, 1229, 1252, 1263, 1338, 1348], "For": [15, 40, 41, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 218, 219, 222, 224, 250, 251, 270, 278, 303, 332, 346, 349, 462, 463, 475, 491, 493, 494, 505, 576, 585, 597, 638, 676, 683, 691, 692, 693, 695, 697, 721, 771, 781, 785, 786, 833, 837, 866, 867, 882, 902, 936, 953, 1089, 1107, 1108, 1110, 1111, 1114, 1201, 1226, 1259, 1265, 1273, 1274, 1275, 1277, 1279, 1303, 1327, 1348, 1353], "IF": 1369, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 61, 62, 63, 72, 130, 131, 132, 133, 134, 135, 136, 141, 142, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 168, 169, 170, 171, 176, 177, 178, 189, 203, 207, 219, 224, 227, 234, 236, 238, 246, 247, 248, 250, 251, 254, 255, 259, 266, 270, 274, 278, 280, 281, 282, 286, 289, 291, 293, 296, 297, 300, 301, 303, 304, 310, 311, 313, 314, 315, 346, 349, 358, 360, 383, 390, 395, 403, 417, 443, 447, 448, 462, 463, 472, 475, 501, 516, 522, 526, 534, 555, 564, 569, 570, 576, 584, 585, 592, 593, 599, 601, 626, 631, 633, 636, 638, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 670, 672, 676, 677, 682, 692, 693, 695, 697, 698, 699, 710, 711, 712, 713, 715, 716, 717, 720, 721, 722, 723, 727, 730, 748, 752, 754, 757, 761, 762, 766, 767, 771, 776, 777, 779, 780, 781, 784, 785, 791, 792, 793, 795, 796, 797, 799, 803, 809, 812, 813, 814, 819, 821, 824, 825, 827, 828, 837, 858, 859, 867, 869, 873, 877, 881, 882, 887, 891, 896, 898, 899, 900, 902, 906, 908, 909, 910, 912, 917, 919, 920, 928, 936, 946, 953, 958, 959, 966, 967, 990, 997, 1002, 1009, 1022, 1035, 1053, 1057, 1058, 1076, 1077, 1086, 1089, 1114, 1130, 1131, 1136, 1141, 1150, 1151, 1155, 1172, 1181, 1186, 1187, 1193, 1201, 1220, 1222, 1224, 1226, 1228, 1229, 1230, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1248, 1250, 1252, 1255, 1259, 1260, 1264, 1274, 1275, 1277, 1279, 1280, 1281, 1288, 1292, 1293, 1294, 1295, 1297, 1298, 1299, 1302, 1303, 1304, 1305, 1309, 1312, 1320, 1323, 1327, 1329, 1337, 1348, 1353, 1357, 1358, 1360, 1368, 1371, 1376], "In": [56, 63, 147, 149, 160, 161, 164, 175, 179, 199, 204, 222, 224, 227, 236, 251, 252, 255, 266, 270, 278, 304, 313, 346, 349, 584, 585, 626, 646, 706, 707, 837, 859, 877, 882, 883, 902, 919, 953, 1107, 1114, 1220, 1225, 1289, 1348, 1353], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 72, 78, 95, 97, 140, 141, 149, 155, 157, 159, 160, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 201, 214, 252, 262, 269, 293, 303, 308, 315, 323, 332, 346, 349, 350, 435, 436, 516, 576, 585, 596, 633, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 764, 795, 796, 833, 837, 854, 858, 859, 863, 883, 887, 892, 912, 920, 927, 936, 953, 961, 1030, 1046, 1047, 1131, 1222, 1234, 1237, 1239, 1240, 1247, 1249, 1327, 1332, 1348, 1353], "Its": [237, 346, 514, 837, 1129, 1348], "NO": 959, "NOT": [133, 247, 287, 346, 576, 595, 669, 837, 907, 953, 1376], "No": [21, 250, 262, 346, 881, 892, 953], "Not": [225, 250, 346, 499, 529, 530, 837, 858, 869, 871, 881, 896, 909, 953, 1116, 1348], "ON": 1376, "OR": [754, 755, 873, 953, 959, 1367], "ORs": [411, 837, 1017, 1348], "On": [744, 837, 885, 953], "One": [56, 214, 266, 303, 308, 346, 359, 625, 756, 768, 784, 790, 793, 802, 804, 807, 808, 817, 837, 863, 953, 959, 1048, 1348], "Or": [235, 236, 251, 278, 292, 316, 325, 346, 349, 492, 646, 679, 776, 777, 779, 780, 824, 825, 827, 833, 837, 876, 877, 882, 902, 911, 929, 953, 1109, 1348], "That": [151, 887, 953], "The": [10, 21, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 73, 74, 75, 83, 87, 88, 95, 97, 98, 100, 130, 132, 133, 134, 136, 140, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 175, 176, 177, 179, 181, 189, 206, 214, 215, 217, 218, 219, 220, 223, 224, 227, 234, 235, 236, 237, 242, 248, 250, 251, 252, 255, 262, 268, 270, 274, 278, 279, 280, 281, 284, 285, 286, 293, 303, 304, 309, 312, 316, 320, 321, 323, 324, 325, 332, 346, 357, 398, 399, 400, 401, 415, 416, 436, 438, 441, 442, 443, 451, 461, 465, 466, 470, 472, 475, 483, 484, 495, 498, 501, 505, 506, 514, 547, 551, 584, 585, 599, 626, 633, 636, 639, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 673, 676, 682, 686, 687, 691, 696, 697, 698, 699, 704, 705, 706, 707, 715, 716, 717, 718, 719, 720, 721, 731, 735, 741, 742, 743, 762, 765, 783, 787, 796, 797, 799, 813, 814, 815, 816, 819, 827, 829, 830, 832, 833, 837, 838, 839, 842, 844, 845, 846, 853, 858, 859, 863, 864, 866, 867, 869, 870, 873, 876, 877, 880, 881, 882, 883, 887, 892, 896, 899, 902, 904, 905, 906, 909, 912, 916, 918, 923, 924, 927, 929, 936, 953, 957, 958, 959, 965, 968, 1005, 1006, 1007, 1021, 1034, 1047, 1048, 1051, 1052, 1053, 1061, 1075, 1079, 1080, 1084, 1086, 1089, 1097, 1098, 1114, 1115, 1118, 1129, 1164, 1168, 1201, 1220, 1222, 1224, 1228, 1229, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1256, 1259, 1264, 1268, 1269, 1278, 1279, 1280, 1281, 1286, 1287, 1288, 1289, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1329, 1331, 1333, 1340, 1342, 1344, 1348, 1349, 1354, 1355, 1356, 1357, 1362, 1376, 1377, 1379], "Then": 164, "There": 1376, "These": [1, 33, 41, 139, 142, 147, 148, 199, 310, 346, 483, 836, 837, 1084, 1097], "To": [40, 63, 225, 346, 425, 441, 442, 499, 500, 683, 690, 691, 692, 695, 706, 707, 716, 717, 718, 719, 728, 837, 871, 953, 1035, 1051, 1052, 1116, 1265, 1272, 1273, 1274, 1277, 1288, 1289, 1310, 1329, 1348, 1376], "Will": [62, 63, 129, 858, 859, 869, 896, 909, 953, 1348], "With": [154, 246, 289, 346, 390, 569, 670, 837, 858, 908, 953, 997, 1150, 1186, 1252, 1348], "_": [1, 56, 60, 199, 270, 301, 305, 346, 383, 420, 421, 555, 684, 692, 694, 696, 701, 702, 708, 711, 712, 1026, 1027, 1029, 1266, 1274, 1278, 1283, 1284, 1290, 1294, 1324, 1348], "__array_ufunc__": 961, "__call__": 833, "__enter__": 1376, "__exit__": 1376, "__getattr__": 833, "__getitem__": 731, "__init__": [1, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 172, 184, 190, 191, 193, 194, 928, 1376], "__name__": [249, 346], "_bar_": 786, "_btm_by_a": [416, 837], "_btm_by_b": [416, 837], "_by_ca": [416, 743, 837], "_by_cb": [416, 743, 837], "_check_ord": [62, 63, 129, 858, 859, 869, 896, 909, 953], "_df": [1, 57], "_diff": [320, 346, 923, 953], "_eager": [576, 858, 953], "_expr": [1, 58], "_foo": 590, "_geventdataframeresult": [63, 859, 953], "_is_not_nan": [530, 837], "_is_odd": [284, 346, 904, 953], "_isnan": [529, 837], "_isnul": [532, 837], "_kwarg": [858, 896, 953], "_ldf": 1, "_lf": 59, "_lower_boundari": [236, 346, 877, 953], "_mean_squar": [325, 929], "_not_nul": [531, 837], "_o": [420, 421, 701, 702, 1026, 1027, 1283, 1284], "_revers": [610, 614, 643, 837], "_right": [250, 251, 252, 346, 881, 882, 883, 953], "_storage_account": 34, "_suffix": 615, "_sum": [325, 929], "_top_by_a": [743, 837], "_top_by_b": [743, 837], "_train": [925, 953], "_type": [898, 953], "_type_check": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 896, 909, 953], "_upper_boundari": [236, 346, 877, 953], "_world": 786, "a1": [41, 57, 59, 346], "a101": 1379, "a123": [41, 346], "a2": [41, 57, 59, 346], "a_1": [712, 1294, 1324, 1348], "a_2": [1324, 1348], "a_3": [1324, 1348], "a_a": 817, "a_agg_list": [236, 346, 877, 953], "a_b_doubl": 782, "a_btm_by_a": [416, 837], "a_btm_by_b": [416, 837], "a_by_ca": [416, 743, 837], "a_by_cb": [416, 743, 837], "a_div_2": 1370, "a_div_5": 1370, "a_interpol": [521, 837], "a_is_even": [293, 346, 816, 912, 953], "a_isnul": [532, 837], "a_lag_": 765, "a_log2": 1370, "a_mod_2": 1370, "a_not_nul": [531, 837], "a_revers": [610, 614, 643, 837], "a_rol": 765, "a_suffix": 615, "a_times_2": [585, 837], "a_times_b": [584, 837], "a_top_by_a": [743, 837], "a_top_by_b": [743, 837], "a_txt": 817, "aa": [495, 683, 695, 783, 837, 959, 1048, 1265, 1277, 1348, 1371], "aaa": [1, 41, 346, 683, 695, 731, 733, 734, 959, 1265, 1277], "aaaa": [1006, 1007], "aabcdef": 717, "aad": [1006, 1007], "aag": 27, "aazz": 1371, "ab": [238, 254, 297, 320, 346, 707, 731, 733, 734, 837, 923, 953, 959, 1130, 1155, 1320, 1348, 1369, 1371], "ab12": 707, "ab12cd34ef": 707, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 355, 689, 692, 706, 716, 837, 959, 1271, 1274, 1288, 1289], "abc123": 1371, "abc456": [706, 1288, 1289, 1371], "abcabc": 707, "abcd": 1371, "abcdeff": 716, "abf": [149, 160, 161], "abl": [104, 147, 576], "about": [104, 140, 142, 147, 676, 683, 691, 692, 695, 706, 707, 837, 1259, 1265, 1273, 1274, 1277, 1288, 1289, 1348, 1379], "abov": [41, 251, 270, 346, 349, 827, 882, 953], "abs_a": 1370, "absolut": [142, 149, 160, 161, 168, 169, 170, 171, 354, 491, 493, 494, 837, 964, 1108, 1110, 1111, 1348, 1370], "acc": [771, 772, 785, 811], "accent": 959, "accept": [38, 43, 47, 48, 49, 50, 51, 54, 140, 142, 143, 145, 146, 149, 151, 153, 155, 157, 159, 162, 163, 164, 175, 189, 206, 216, 235, 284, 285, 289, 292, 309, 320, 321, 325, 346, 355, 416, 425, 495, 522, 626, 640, 641, 679, 708, 735, 743, 751, 753, 755, 760, 763, 764, 765, 766, 774, 783, 801, 803, 806, 815, 819, 821, 827, 833, 837, 853, 865, 876, 904, 905, 908, 911, 916, 923, 924, 929, 953, 958, 1035, 1136, 1220, 1228, 1229, 1252, 1290, 1348], "access": [38, 43, 47, 48, 49, 50, 51, 57, 58, 59, 60, 151, 155, 157, 159, 161, 162, 163, 164, 189, 203, 210, 248, 279, 280, 293, 346, 693, 731, 860, 912, 925, 953, 958, 1275, 1379], "accord": [279, 346, 633, 776, 777, 779, 780, 824, 825, 837, 1066, 1222, 1348], "accordingli": [140, 143, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158], "account": [41, 137, 148, 161, 346, 465, 491, 493, 494, 837, 1079, 1108, 1110, 1111, 1348], "accumul": [771, 772, 785, 811], "acg": 27, "achiev": [255, 270, 332, 346, 421, 585, 702, 837, 1027, 1201, 1284, 1348], "aco": 1369, "acosd": 1369, "across": [41, 56, 148, 150, 215, 237, 250, 257, 259, 264, 286, 296, 346, 438, 514, 599, 753, 755, 771, 772, 774, 801, 803, 806, 821, 837, 864, 881, 906, 953, 1129, 1348], "action": [40, 346], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 548, 692, 1165, 1274], "actual": [41, 133, 175, 179, 281, 346, 1254, 1348, 1371, 1378], "ad": [39, 41, 133, 150, 236, 293, 303, 308, 310, 315, 320, 321, 346, 361, 475, 498, 592, 593, 735, 771, 772, 816, 837, 877, 912, 920, 923, 924, 953, 959, 1089, 1115, 1327, 1332, 1348], "adbc": [39, 147, 148, 346], "adbc_driver_manag": 167, "adbc_ingest": [39, 346], "add": [40, 41, 42, 146, 224, 236, 255, 320, 321, 322, 323, 346, 349, 436, 612, 613, 614, 615, 633, 735, 781, 785, 827, 837, 877, 881, 923, 924, 925, 926, 927, 953, 1114, 1348, 1353], "add_calendar_dai": 781, "add_calendar_month": 781, "add_calendar_year": 781, "add_chart": [41, 346], "add_dai": 781, "add_format": [41, 346], "add_hour": 781, "add_milli": 781, "add_second": 781, "add_seri": [41, 346], "add_week": 781, "add_worksheet": [41, 346], "addit": [30, 37, 39, 40, 41, 133, 144, 149, 150, 160, 161, 173, 175, 177, 179, 189, 219, 223, 235, 253, 268, 284, 285, 292, 305, 312, 320, 321, 325, 346, 355, 452, 495, 498, 626, 679, 683, 691, 692, 695, 706, 707, 731, 735, 760, 763, 764, 765, 766, 783, 815, 816, 819, 833, 837, 870, 876, 904, 905, 911, 918, 923, 924, 929, 953, 959, 1054, 1062, 1115, 1265, 1273, 1274, 1277, 1288, 1289, 1330, 1348, 1358, 1376], "addition": [64, 150, 279, 346, 959], "address": 692, "adjac": [41, 346], "adjust": [491, 493, 494, 676, 837, 1108, 1110, 1111, 1259, 1348], "adl": [149, 160, 161], "adlf": 161, "advanc": [41, 270, 346, 395, 576, 609, 612, 614, 616, 617, 1002, 1193, 1379], "advantag": [41, 199, 269, 346], "advis": [41, 55, 97, 346], "aedt": 778, "aeiuo": [695, 1277], "af1": 56, "af2": 56, "af3": 56, "affect": [39, 168, 169, 170, 171, 346], "afm": 161, "afoo": [925, 953], "after": [41, 133, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 206, 207, 224, 309, 312, 346, 415, 416, 417, 495, 626, 636, 730, 742, 743, 837, 853, 916, 918, 953, 1021, 1114, 1224, 1312, 1333, 1348, 1363], "afterward": [55, 827], "ag": [262, 346, 892, 953, 1377], "again": [585, 837], "against": [39, 106, 145, 147, 227, 274, 293, 346, 548, 695, 816, 873, 899, 912, 953, 1165, 1277, 1357, 1376, 1378, 1379], "agg": [235, 236, 270, 278, 346, 356, 406, 411, 414, 416, 501, 503, 508, 511, 584, 585, 626, 678, 679, 743, 750, 776, 779, 799, 837, 858, 859, 869, 876, 877, 896, 898, 902, 909, 953, 959], "agg_group": [788, 837], "agg_list": [584, 837], "aggreg": [142, 145, 146, 149, 157, 160, 229, 235, 236, 256, 258, 260, 263, 266, 270, 271, 272, 278, 294, 295, 314, 317, 325, 326, 328, 330, 346, 356, 406, 411, 414, 501, 517, 584, 585, 626, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 752, 753, 754, 755, 771, 772, 773, 774, 785, 790, 800, 801, 803, 805, 806, 811, 820, 821, 837, 877, 887, 888, 889, 890, 893, 894, 897, 902, 913, 914, 921, 929, 930, 932, 934, 953, 1012, 1017, 1020, 1132, 1234, 1235, 1236, 1238, 1241, 1242, 1243, 1348, 1364, 1366, 1369, 1375], "aggregate_funct": [270, 346, 959], "aho": [684, 694, 696, 708, 1266, 1276, 1278, 1290], "aiosqlit": 147, "alchemy_conn": 147, "algorithm": [205, 346, 362, 684, 694, 696, 708, 756, 837, 852, 953, 969, 1266, 1276, 1278, 1290, 1348], "alia": [1, 13, 56, 58, 60, 64, 94, 192, 196, 210, 236, 254, 270, 278, 312, 320, 323, 346, 349, 355, 359, 399, 400, 401, 402, 405, 415, 418, 420, 421, 422, 430, 431, 432, 433, 434, 436, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 482, 483, 484, 485, 486, 489, 490, 503, 505, 510, 512, 518, 519, 522, 525, 528, 536, 538, 560, 572, 578, 583, 585, 589, 592, 593, 595, 597, 602, 605, 607, 609, 620, 621, 625, 627, 631, 633, 636, 638, 666, 668, 683, 684, 685, 686, 688, 689, 691, 692, 694, 695, 696, 697, 701, 702, 708, 709, 710, 711, 712, 713, 714, 718, 719, 721, 731, 732, 733, 734, 736, 741, 742, 744, 750, 751, 757, 758, 759, 763, 764, 765, 766, 776, 779, 781, 782, 785, 786, 791, 794, 795, 798, 799, 811, 815, 819, 824, 827, 837, 877, 879, 886, 902, 918, 923, 927, 953, 1047, 1054, 1055, 1058, 1061, 1062, 1063, 1064, 1069, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1155, 1222, 1227, 1273, 1274, 1278, 1289, 1294, 1295, 1348], "alias": [293, 346, 592, 593, 912, 953], "alic": [145, 1377], "align": [11, 16, 17, 41, 56, 64, 346, 1377], "align_fram": 64, "align_ful": 64, "align_inn": 64, "align_left": 64, "align_right": 64, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 48, 49, 50, 51, 56, 62, 69, 115, 117, 130, 131, 135, 141, 145, 146, 149, 150, 151, 153, 155, 156, 157, 159, 160, 162, 163, 172, 173, 176, 179, 199, 204, 205, 207, 214, 216, 218, 219, 226, 238, 243, 245, 247, 248, 249, 250, 252, 253, 254, 259, 261, 265, 266, 270, 273, 275, 279, 280, 281, 285, 291, 292, 296, 297, 301, 303, 304, 308, 311, 313, 314, 315, 316, 321, 323, 346, 349, 359, 361, 383, 398, 416, 429, 435, 441, 442, 443, 444, 475, 495, 500, 506, 513, 514, 517, 520, 524, 527, 531, 532, 537, 547, 548, 555, 573, 576, 584, 606, 609, 610, 612, 613, 614, 615, 616, 617, 624, 626, 636, 641, 643, 647, 671, 677, 679, 685, 689, 692, 693, 697, 700, 703, 707, 715, 716, 717, 721, 743, 753, 762, 764, 771, 772, 773, 774, 783, 785, 790, 791, 794, 803, 811, 819, 820, 821, 827, 833, 837, 843, 849, 852, 855, 858, 859, 863, 865, 866, 867, 869, 872, 881, 883, 887, 891, 896, 900, 905, 909, 910, 911, 917, 919, 920, 924, 925, 927, 953, 959, 990, 1046, 1048, 1051, 1052, 1053, 1054, 1089, 1130, 1137, 1149, 1155, 1164, 1165, 1172, 1190, 1193, 1224, 1229, 1234, 1260, 1267, 1271, 1274, 1275, 1278, 1279, 1282, 1289, 1297, 1298, 1299, 1303, 1320, 1329, 1348, 1352, 1353, 1358, 1360, 1365, 1366, 1371, 1375, 1376, 1378, 1379], "all_compat": 1360, "all_data": 1376, "all_horizont": [218, 219, 346, 752, 866, 867, 953], "all_stat": 31, "alloc": [142, 145, 146, 222, 273, 346, 837, 928, 1107, 1348], "allow": [1, 8, 40, 41, 48, 49, 50, 51, 55, 64, 97, 106, 131, 147, 150, 159, 162, 163, 164, 165, 172, 175, 176, 179, 199, 203, 248, 251, 253, 279, 280, 282, 304, 305, 308, 311, 324, 346, 418, 422, 465, 472, 475, 564, 584, 585, 592, 593, 638, 667, 720, 722, 723, 837, 881, 882, 887, 891, 898, 917, 925, 953, 957, 959, 1079, 1086, 1089, 1181, 1201, 1226, 1246, 1302, 1304, 1305, 1329, 1330, 1348, 1371, 1379], "allow_alias": [592, 593], "allow_chunk": [175, 179], "allow_copi": [131, 203, 304, 346, 1329, 1348], "allow_dupl": [633, 837, 1222, 1348], "allow_exact_match": [251, 346, 882, 953], "allow_infin": [175, 179], "allow_masked_out": [175, 179], "allow_missing_column": [157, 164], "allow_nul": [172, 175, 179, 1379], "allow_object": 797, "allow_parallel": [251, 346, 881, 882, 953], "allow_pyarrow_filt": 165, "allow_time_zon": [175, 176, 179], "allowed_dtyp": [175, 176, 179, 1379], "almost": [63, 255, 332, 346, 720, 722, 723, 859, 953, 957, 1201, 1302, 1304, 1305, 1348], "along": [38, 40, 43, 47, 48, 49, 50, 51, 149, 155, 157, 159, 160, 162, 163, 164, 189, 346, 953], "alpha": [491, 493, 494, 837, 959, 1108, 1110, 1111, 1348], "alpha_i": [492, 837, 1109, 1348], "alphabet": [959, 1379], "alphanumer": [728, 959, 1310], "alreadi": [39, 40, 105, 303, 346, 435, 548, 600, 748, 837, 909, 953, 1046, 1165, 1337, 1348], "also": [28, 38, 41, 48, 49, 50, 51, 55, 62, 63, 133, 147, 150, 151, 156, 157, 159, 164, 174, 175, 178, 179, 184, 193, 199, 220, 235, 236, 262, 266, 270, 278, 280, 284, 292, 303, 315, 320, 323, 346, 431, 434, 443, 465, 469, 475, 501, 522, 585, 592, 593, 626, 636, 640, 641, 679, 706, 707, 708, 715, 716, 731, 762, 771, 772, 775, 778, 785, 787, 811, 827, 836, 837, 843, 858, 859, 869, 876, 877, 892, 896, 902, 904, 909, 911, 920, 923, 925, 927, 953, 959, 1053, 1083, 1136, 1224, 1228, 1229, 1267, 1288, 1289, 1290, 1297, 1348, 1352, 1358, 1360, 1363, 1367, 1371, 1374, 1376, 1377], "alt": [346, 349, 1348, 1353], "altair": [167, 346, 349, 1348, 1353], "altern": [41, 184, 346, 833, 1368], "although": [293, 346, 912, 953], "alwai": [14, 38, 40, 48, 54, 72, 78, 145, 151, 155, 157, 206, 235, 250, 251, 255, 309, 332, 346, 415, 416, 584, 596, 720, 742, 743, 827, 837, 853, 881, 882, 887, 916, 953, 959, 1021, 1201, 1302, 1333, 1348, 1357, 1358, 1376, 1379], "am": [709, 1291], "amarillo": 1371, "amaz": [346, 349, 1348, 1353], "amazonaw": 33, "ambigu": [468, 469, 470, 483, 720, 723, 778, 1082, 1083, 1084, 1097, 1302, 1305], "america": 779, "amount": [52, 55, 73, 97, 155, 159, 162, 163, 585, 781, 837, 1365], "amsterdam": [469, 1083], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 57, 59, 60, 64, 72, 73, 74, 95, 102, 106, 109, 112, 119, 121, 130, 132, 133, 136, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 173, 175, 179, 189, 208, 209, 210, 216, 222, 225, 229, 231, 236, 247, 248, 249, 251, 252, 255, 266, 270, 275, 276, 278, 279, 283, 293, 298, 304, 308, 310, 314, 315, 320, 323, 332, 346, 349, 357, 379, 382, 394, 400, 406, 409, 411, 412, 414, 431, 432, 433, 434, 435, 436, 443, 447, 448, 465, 469, 472, 486, 492, 500, 501, 507, 508, 511, 545, 548, 551, 553, 575, 576, 584, 585, 597, 599, 609, 610, 631, 632, 633, 641, 642, 646, 647, 648, 650, 652, 654, 656, 659, 661, 663, 682, 683, 686, 692, 695, 699, 720, 722, 723, 725, 727, 741, 744, 752, 757, 761, 776, 777, 779, 780, 782, 784, 787, 791, 792, 793, 794, 795, 796, 797, 809, 811, 812, 815, 819, 824, 825, 827, 828, 833, 837, 855, 856, 857, 859, 863, 865, 869, 873, 877, 882, 883, 887, 900, 902, 903, 912, 920, 923, 925, 927, 928, 936, 950, 953, 957, 958, 959, 986, 989, 1001, 1006, 1012, 1015, 1017, 1018, 1020, 1034, 1036, 1042, 1043, 1044, 1045, 1046, 1053, 1057, 1086, 1100, 1107, 1109, 1150, 1162, 1165, 1168, 1170, 1192, 1201, 1229, 1230, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1247, 1249, 1264, 1265, 1268, 1274, 1277, 1281, 1302, 1304, 1305, 1307, 1309, 1329, 1331, 1348, 1366, 1368, 1371, 1375, 1376, 1378], "ana": [709, 1291], "anan": [709, 1291], "ananab": 1371, "and_": 837, "ang": 1371, "angl": [758, 759], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 71, 72, 78, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 165, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 199, 201, 204, 206, 212, 216, 218, 219, 224, 226, 227, 229, 231, 246, 248, 249, 250, 251, 252, 255, 259, 269, 274, 275, 279, 280, 281, 293, 296, 299, 300, 303, 304, 305, 308, 309, 311, 314, 315, 323, 346, 349, 350, 355, 358, 359, 383, 415, 416, 417, 435, 436, 471, 489, 490, 500, 501, 505, 508, 510, 512, 516, 526, 536, 543, 548, 555, 583, 584, 585, 592, 602, 605, 607, 609, 610, 612, 614, 616, 617, 620, 621, 625, 630, 633, 640, 641, 642, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 668, 672, 682, 684, 698, 716, 717, 718, 719, 720, 722, 723, 725, 727, 736, 742, 743, 744, 751, 752, 753, 755, 764, 766, 767, 768, 795, 796, 797, 799, 803, 821, 827, 837, 853, 858, 859, 865, 866, 867, 872, 873, 881, 882, 883, 895, 896, 899, 900, 912, 916, 917, 920, 927, 928, 953, 957, 959, 961, 963, 966, 990, 1021, 1030, 1046, 1047, 1085, 1104, 1105, 1114, 1117, 1122, 1124, 1126, 1131, 1141, 1150, 1153, 1160, 1165, 1172, 1200, 1201, 1212, 1213, 1222, 1228, 1229, 1230, 1234, 1237, 1239, 1240, 1247, 1248, 1264, 1266, 1280, 1302, 1304, 1305, 1307, 1309, 1327, 1328, 1329, 1330, 1332, 1333, 1348, 1353, 1376, 1379], "anna": [262, 346, 892, 953], "annex": [703, 1285], "announc": [898, 953], "anoth": [99, 174, 207, 215, 221, 235, 251, 286, 346, 435, 438, 445, 521, 551, 589, 595, 599, 640, 649, 651, 653, 655, 657, 660, 662, 664, 695, 837, 855, 864, 876, 882, 906, 925, 953, 1046, 1055, 1106, 1114, 1135, 1168, 1228, 1229, 1277, 1348, 1370, 1371], "anti": [250, 346, 881, 936, 953, 1247, 1249, 1348, 1364], "antipattern": [145, 151, 155, 157], "any_horizont": 754, "anyth": [40, 279, 346], "anywher": [402, 405, 720, 722, 723, 1302, 1304, 1305], "ap": 1371, "apach": [36, 43, 44, 47, 131, 143, 147, 148, 151, 153, 161, 202, 346, 962], "apaya": [721, 1303], "api": [0, 33, 38, 43, 47, 48, 49, 50, 51, 131, 155, 157, 159, 162, 163, 164, 165, 184, 189, 203, 255, 332, 346, 585, 799, 837, 936, 953, 1201, 1348, 1375], "apia": [444, 1054], "app": [422, 714, 1028, 1296], "appear": [41, 68, 133, 170, 171, 346, 707, 746, 837, 959, 1335, 1348, 1377], "append": [39, 40, 42, 175, 224, 250, 251, 252, 346, 637, 827, 837, 881, 882, 883, 953, 1114, 1348], "appl": [211, 240, 250, 275, 276, 299, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 346, 416, 418, 422, 643, 688, 714, 743, 837, 881, 900, 931, 932, 934, 935, 937, 938, 939, 940, 941, 942, 943, 953, 1023, 1028, 1270, 1296, 1364, 1371], "appli": [11, 21, 38, 41, 48, 62, 64, 129, 140, 147, 159, 172, 175, 179, 199, 214, 229, 252, 255, 269, 292, 293, 303, 332, 346, 371, 446, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 471, 473, 484, 485, 487, 493, 494, 584, 585, 630, 648, 649, 650, 651, 654, 655, 661, 662, 679, 706, 707, 720, 722, 723, 727, 760, 771, 772, 785, 798, 799, 811, 816, 827, 837, 863, 883, 887, 895, 911, 912, 936, 953, 1035, 1056, 1059, 1060, 1061, 1064, 1065, 1066, 1070, 1071, 1072, 1074, 1075, 1078, 1080, 1081, 1085, 1087, 1098, 1099, 1101, 1110, 1111, 1201, 1235, 1236, 1238, 1242, 1288, 1289, 1302, 1304, 1305, 1309, 1348, 1357], "applic": [54, 304, 346, 585, 837], "apply_on_context_ent": 199, "appropri": [41, 165, 227, 274, 304, 346, 475, 636, 837, 873, 899, 953, 1089, 1224, 1348], "approx": [362, 837], "approx_n_uniqu": [346, 837, 953, 1348], "approxim": [47, 205, 346, 362, 492, 756, 837, 852, 953, 969, 1109, 1348, 1370, 1379], "april": [472, 1086, 1371, 1372], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 95, 96, 97, 104, 110, 126, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 173, 175, 176, 177, 179, 189, 199, 203, 206, 207, 212, 214, 218, 219, 222, 225, 227, 228, 229, 234, 235, 236, 248, 250, 251, 252, 253, 255, 261, 262, 268, 270, 274, 278, 279, 280, 281, 284, 285, 289, 292, 299, 303, 304, 305, 308, 309, 313, 315, 316, 320, 321, 324, 325, 346, 358, 360, 374, 390, 395, 415, 416, 417, 425, 431, 433, 434, 443, 470, 475, 483, 488, 490, 491, 492, 493, 494, 499, 501, 522, 524, 526, 527, 529, 530, 531, 532, 534, 539, 569, 576, 584, 621, 626, 633, 636, 639, 640, 641, 642, 646, 649, 651, 653, 655, 657, 658, 660, 662, 664, 670, 673, 676, 678, 679, 684, 693, 697, 699, 700, 704, 705, 706, 707, 708, 710, 721, 723, 725, 730, 735, 737, 741, 742, 743, 752, 753, 755, 760, 763, 764, 765, 766, 767, 774, 776, 777, 779, 780, 795, 796, 801, 803, 806, 815, 819, 821, 824, 825, 827, 829, 830, 832, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 853, 858, 859, 863, 866, 867, 871, 873, 876, 877, 881, 882, 883, 887, 891, 892, 896, 898, 899, 900, 902, 904, 905, 908, 911, 916, 919, 920, 923, 924, 925, 929, 953, 957, 959, 966, 967, 981, 997, 1002, 1021, 1025, 1035, 1044, 1045, 1053, 1084, 1089, 1097, 1103, 1105, 1107, 1108, 1109, 1110, 1111, 1116, 1118, 1120, 1136, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1151, 1156, 1186, 1193, 1213, 1222, 1224, 1228, 1229, 1230, 1240, 1252, 1256, 1259, 1266, 1275, 1279, 1281, 1286, 1287, 1288, 1289, 1292, 1303, 1305, 1307, 1312, 1319, 1327, 1329, 1330, 1331, 1333, 1340, 1342, 1344, 1348, 1349, 1352, 1354, 1355, 1356, 1358, 1360, 1363, 1368, 1376, 1379], "arbitrari": [52, 85, 231, 346, 438, 837, 864, 953, 959], "arbitrarili": [255, 346], "arcco": [837, 1348], "arccosh": [837, 1348], "arcsin": [837, 1348], "arcsinh": [837, 1348], "arctan": [758, 759, 837, 1348], "arctan2": 759, "arctanh": [837, 1348], "aren": [38, 48, 346, 953], "arg": [32, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 142, 192, 196, 227, 269, 274, 346, 371, 630, 760, 786, 837, 873, 895, 899, 953, 1201, 1348, 1361], "arg_max": [837, 1348], "arg_min": [837, 1348], "arg_sort": [837, 1348], "arg_tru": [761, 837, 1348], "arg_uniqu": [837, 1348], "arg_wher": [372, 837], "argmax": [584, 837], "argument": [37, 40, 47, 52, 54, 95, 140, 142, 144, 145, 149, 157, 159, 160, 175, 177, 179, 189, 212, 216, 223, 235, 236, 251, 268, 269, 278, 284, 285, 292, 305, 312, 316, 320, 321, 325, 346, 470, 483, 495, 501, 522, 584, 626, 630, 646, 679, 715, 716, 717, 735, 752, 758, 759, 760, 763, 764, 765, 766, 768, 783, 815, 819, 827, 833, 837, 865, 870, 876, 877, 882, 895, 902, 904, 905, 911, 918, 923, 924, 929, 950, 953, 959, 1084, 1097, 1136, 1297, 1298, 1299, 1330, 1348, 1370, 1371], "aris": 147, "arithmet": [229, 346], "arm": 167, "arm64": 167, "around": [38, 48, 346, 953], "arr": [304, 346, 829, 1329, 1340, 1348], "arr_bar": 1366, "arr_foo": 1366, "arrai": [130, 134, 145, 146, 149, 157, 160, 201, 222, 223, 298, 303, 304, 305, 346, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 403, 431, 432, 433, 434, 543, 558, 559, 560, 561, 563, 572, 573, 575, 578, 580, 584, 642, 648, 650, 652, 654, 656, 659, 661, 663, 669, 741, 764, 782, 796, 816, 837, 870, 953, 958, 961, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1042, 1043, 1044, 1045, 1050, 1107, 1160, 1175, 1176, 1177, 1178, 1180, 1188, 1189, 1190, 1192, 1195, 1197, 1198, 1230, 1235, 1236, 1238, 1241, 1242, 1243, 1250, 1254, 1323, 1327, 1329, 1330, 1331, 1348, 1369, 1375, 1378], "array_agg": 1369, "array_contain": 1369, "array_get": 1369, "array_length": 1369, "array_low": 1369, "array_mean": 1369, "array_revers": 1369, "array_sum": 1369, "array_to_str": 1369, "array_uniqu": 1369, "array_upp": 1369, "arraylik": [1050, 1348], "arrow": [43, 44, 49, 130, 131, 147, 148, 151, 153, 162, 202, 248, 280, 281, 298, 300, 304, 346, 953, 962, 1323, 1329, 1348], "arrowarrayexport": [130, 131], "arrowinvaliderror": [40, 346], "arrowstreamexport": [130, 131], "as_": [1348, 1353], "as_arrai": 796, "as_dict": [146, 268, 346], "as_expr": 959, "as_seri": [207, 299, 346, 855, 953, 959], "asarrai": [201, 961], "ascend": [236, 262, 278, 346, 626, 646, 837, 877, 892, 902, 953], "ascii": [7, 21, 420, 421, 684, 694, 696, 697, 701, 702, 708, 710, 721, 730, 959, 1026, 1027, 1266, 1276, 1278, 1279, 1283, 1284, 1290, 1292, 1303, 1312], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [684, 694, 696, 708, 1266, 1276, 1278, 1290], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1379, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 959, "ascii_t": 199, "ascii_uppercas": [314, 346], "asd": [685, 692, 1267, 1274], "asia": [137, 959, 1059, 1060, 1087], "asid": 475, "asin": 1369, "asind": 1369, "asof": [251, 346, 882, 953], "asofjoinstrategi": [251, 346, 882, 953], "assert": [168, 169, 170, 171, 175, 179, 278, 346, 849, 959], "assert_frame_equ": [169, 170, 221, 346, 1379], "assert_frame_not_equ": [168, 171], "assert_series_equ": [168, 171, 1106, 1348, 1379], "assert_series_not_equ": [169, 170], "assert_someth": 173, "assertionerror": [168, 169, 170, 171], "assign": [173, 236, 331, 346, 395, 576, 626, 636, 712, 713, 837, 877, 935, 953, 1002, 1193, 1224, 1294, 1295, 1348], "associ": [39, 41, 56, 148, 150, 174, 177, 281, 346, 958, 1359, 1361, 1365], "assum": [33, 281, 346, 887, 936, 953, 1371], "assume_rol": 33, "assumpt": [584, 837], "async": [62, 63, 147, 859, 953], "async_engin": 147, "asynchron": [63, 147, 859, 953], "asyncio": [63, 147, 859, 953], "asyncresult": [63, 859, 953], "asyncsurrealdb": 147, "ata": 27, "atan": 1369, "atan2": [758, 759, 1369], "atan2_ab": 1373, "atan2d": [759, 1369], "atan2d_ab": 1373, "atand": 1369, "atg": 27, "atgataaaggag": 27, "atol": [168, 169, 170, 171], "attain": [679, 837], "attempt": [1, 10, 48, 49, 50, 51, 62, 63, 438, 837, 858, 859, 864, 869, 896, 909, 953], "attr": [346, 349, 1348, 1353], "attribut": [65, 68, 71, 72, 73, 74, 75, 83, 87, 172, 190, 191, 193, 194, 346, 349, 829, 830, 832, 833, 838, 839, 842, 844, 845, 846, 928, 953, 1340, 1342, 1344, 1348, 1349, 1353, 1354, 1355, 1356], "attributeerror": 1, "audi": [299, 346, 643, 837], "august": 475, "australia": 778, "auth": 35, "authent": [40, 149, 157, 159, 160, 161, 162, 164, 184, 346], "author": 1, "auto": [10, 38, 40, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 132, 133, 134, 136, 149, 154, 155, 157, 159, 160, 162, 163, 164, 184, 189, 310, 346, 858, 859, 869, 896, 909, 953, 1379], "auto_structifi": [284, 320, 346, 904, 923, 953], "autofilt": [41, 346], "autofit": [41, 346], "autogener": [145, 146, 150, 156, 159], "automat": [8, 38, 48, 64, 130, 132, 133, 134, 136, 137, 142, 145, 146, 147, 148, 154, 155, 157, 159, 162, 163, 175, 179, 181, 184, 284, 293, 320, 346, 584, 641, 715, 716, 717, 816, 837, 904, 912, 923, 953, 1228, 1229, 1297, 1298, 1299, 1332, 1348, 1358, 1360, 1363, 1376], "autumn": [706, 707], "avail": [41, 47, 51, 139, 147, 148, 149, 160, 161, 173, 186, 187, 188, 199, 270, 293, 345, 346, 475, 636, 816, 829, 830, 832, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 912, 951, 952, 953, 959, 1048, 1224, 1340, 1342, 1344, 1348, 1349, 1352, 1354, 1355, 1356, 1367], "available_timezon": [71, 959], "averag": [41, 346, 491, 492, 493, 494, 636, 837, 1108, 1109, 1110, 1111, 1224, 1348, 1365], "avg": 1369, "avocado": 1371, "avoid": [175, 179, 227, 274, 280, 346, 357, 837, 873, 899, 953], "avro": [36, 143, 192, 346, 849], "avrocompress": [36, 346], "aw": [33, 38, 43, 47, 48, 49, 50, 51, 149, 155, 157, 159, 160, 162, 163, 164, 189, 346, 953], "awai": 1370, "await": [63, 147, 859, 947, 953], "await_result": [898, 953], "awar": [11, 147, 248, 280, 281, 300, 346, 492, 684, 694, 696, 708, 723, 837, 953, 1109, 1266, 1276, 1278, 1290, 1305, 1348], "aws_access_key_id": [40, 149, 160, 164, 346], "aws_region": [40, 160, 164, 346], "aws_secret_access_kei": [40, 149, 160, 164, 346], "awsassumerolekwarg": 33, "axi": [261, 313, 346, 349, 758, 759, 891, 919, 953, 1348, 1353], "aya": [710, 1292, 1303], "az": [149, 160, 161], "azur": [34, 38, 40, 43, 47, 48, 49, 50, 51, 149, 155, 157, 159, 160, 161, 162, 163, 164, 189, 346, 953], "azure_storage_account_kei": [149, 160, 161], "azure_storage_account_nam": [149, 160, 161], "b": [1, 11, 36, 38, 40, 43, 44, 47, 52, 59, 64, 87, 95, 101, 104, 130, 131, 132, 133, 134, 135, 136, 137, 141, 145, 147, 150, 203, 204, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 248, 249, 250, 253, 254, 256, 258, 260, 263, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 289, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 355, 357, 358, 360, 361, 371, 373, 378, 383, 398, 399, 400, 401, 402, 403, 404, 405, 406, 411, 414, 416, 417, 429, 436, 440, 472, 475, 495, 497, 499, 500, 501, 503, 506, 513, 514, 517, 520, 521, 522, 524, 527, 529, 530, 531, 532, 537, 543, 548, 555, 565, 566, 567, 568, 584, 585, 590, 606, 609, 610, 611, 612, 613, 614, 615, 623, 624, 626, 630, 633, 636, 640, 641, 643, 645, 671, 677, 679, 686, 690, 695, 699, 706, 707, 731, 732, 743, 746, 750, 752, 753, 754, 755, 756, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 782, 783, 784, 785, 786, 789, 790, 791, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 814, 816, 818, 819, 820, 821, 822, 826, 833, 837, 852, 853, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 899, 900, 901, 903, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 953, 959, 965, 968, 990, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1025, 1029, 1030, 1047, 1050, 1086, 1089, 1103, 1106, 1107, 1114, 1117, 1136, 1141, 1160, 1182, 1183, 1184, 1185, 1222, 1227, 1268, 1272, 1277, 1281, 1288, 1289, 1313, 1315, 1316, 1318, 1330, 1335, 1348, 1358, 1360, 1361, 1363, 1364, 1365, 1366, 1371, 1372, 1373, 1376], "b1": [57, 59], "b2": [57, 59], "b345": [41, 346], "b4": [41, 346], "b_b": [293, 346], "b_btm_by_a": [416, 837], "b_btm_by_b": [416, 837], "b_by_ca": [416, 743, 837], "b_by_cb": [416, 743, 837], "b_is_not_nan": [530, 837], "b_isnan": [529, 837], "b_isnul": [532, 837], "b_not_nul": [531, 837], "b_revers": [610, 614, 643, 837], "b_suffix": 615, "b_sum": [325, 929], "b_top_by_a": [743, 837], "b_top_by_b": [743, 837], "ba": [438, 495, 599, 714, 783, 837, 959], "back": [4, 56, 164, 224, 236, 286, 304, 305, 346, 599, 626, 707, 837, 858, 869, 877, 896, 906, 909, 928, 953, 1114, 1330, 1348], "backend": [40, 147, 148, 149, 160, 161, 346, 349, 1348, 1353], "background": [62, 63, 346, 350, 858, 859, 952, 953], "backward": [47, 51, 226, 251, 346, 398, 443, 463, 500, 837, 872, 882, 953, 1053, 1077, 1117, 1348], "backward_fil": [506, 670, 837], "bad": [706, 707, 1288, 1289], "balanc": [178, 180, 1379], "ballon_dor": [691, 693, 1273, 1275], "banana": [211, 299, 328, 330, 333, 334, 335, 336, 337, 338, 339, 346, 416, 643, 688, 714, 743, 837, 932, 934, 937, 938, 939, 940, 941, 942, 943, 1371], "banded_column": [41, 346], "banded_row": [41, 346], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 141, 154, 155, 207, 210, 211, 212, 216, 217, 218, 219, 220, 221, 224, 227, 229, 231, 232, 233, 238, 240, 241, 242, 244, 250, 254, 255, 256, 257, 258, 259, 260, 263, 264, 267, 270, 272, 274, 275, 276, 279, 282, 283, 284, 286, 291, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 311, 312, 317, 318, 319, 324, 346, 349, 419, 438, 519, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 676, 685, 687, 690, 692, 693, 709, 711, 713, 718, 719, 756, 767, 768, 769, 784, 789, 790, 793, 794, 800, 802, 804, 805, 807, 808, 815, 818, 822, 826, 827, 833, 837, 855, 860, 861, 865, 866, 867, 868, 873, 879, 880, 881, 894, 899, 900, 903, 904, 917, 918, 922, 953, 958, 959, 1024, 1172, 1259, 1267, 1269, 1272, 1274, 1275, 1291, 1295, 1300, 1301, 1348, 1362, 1364, 1365, 1366, 1368, 1371, 1374], "bar2": 1371, "bar22": [229, 346], "bar_": 711, "bar_3": [301, 346], "bar_4": [301, 346], "bar_a": [270, 346], "bar_at_2": 1366, "bar_avg": 1365, "bar_b": [270, 346], "bar_color": [41, 346], "bar_max": 1365, "bar_median": 1365, "bar_min": 1365, "bar_negative_border_color_sam": [41, 346], "bar_negative_color_sam": [41, 346], "bar_std": 1365, "bar_sum": 1365, "bar_var": 1365, "bare": [592, 593, 959], "base": [32, 41, 52, 53, 54, 69, 115, 117, 150, 177, 219, 227, 236, 252, 274, 278, 346, 444, 452, 488, 491, 492, 493, 494, 501, 516, 521, 579, 580, 584, 585, 631, 633, 641, 646, 649, 651, 653, 655, 657, 660, 662, 664, 725, 837, 873, 877, 883, 899, 902, 953, 959, 1054, 1062, 1103, 1108, 1109, 1110, 1111, 1131, 1135, 1196, 1197, 1201, 1220, 1222, 1228, 1229, 1307, 1339, 1348, 1364, 1370, 1379], "base64": [400, 401, 686, 687, 1006, 1007, 1268, 1269], "base_nam": [310, 346], "base_utc_offset": [452, 1062], "baseexcept": 1376, "basi": [41, 150, 175, 346], "basic": [41, 201, 346, 591, 961, 1379], "basic_chart": [41, 346], "batch": [44, 95, 139, 140, 146, 147, 153, 155, 163, 165, 280, 308, 346, 858, 887, 953], "batch_siz": [38, 48, 140, 145, 146, 147, 155, 163, 165, 308, 346, 953], "batchedcsvread": 146, "baz": [231, 241, 242, 312, 346, 693, 711, 713, 784, 793, 808, 833, 880, 918, 953, 958, 959, 1275, 1295, 1362, 1368, 1371], "bb": [959, 1048, 1348, 1371, 1376], "bbb": [1, 41, 346, 731, 733, 734, 959], "bc": [695, 707, 820, 1277], "bcbc45": 1371, "bea": 13, "bear": 959, "bearer": 184, "bearer_token": 184, "beauti": 13, "becaus": [155, 163, 222, 236, 253, 255, 314, 332, 346, 505, 548, 576, 837, 877, 936, 953, 1107, 1165, 1201, 1348], "becom": [177, 345, 951, 952], "bed3": [41, 346], "been": [5, 31, 41, 182, 203, 327, 346, 507, 585, 603, 636, 837, 931, 1224, 1348], "beetl": [299, 346, 643, 837], "befor": [41, 48, 49, 50, 51, 52, 70, 71, 140, 142, 145, 147, 150, 159, 165, 168, 169, 170, 171, 181, 199, 224, 236, 251, 293, 303, 308, 312, 346, 409, 410, 412, 413, 433, 434, 435, 584, 626, 627, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 690, 730, 737, 765, 813, 814, 837, 877, 879, 882, 918, 953, 1015, 1016, 1018, 1019, 1044, 1045, 1046, 1114, 1217, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1272, 1312, 1319, 1348, 1364], "beforehand": [720, 722, 723, 1302, 1304, 1305], "begin": [13, 41, 346, 491, 493, 494, 691, 721, 837, 1108, 1110, 1111, 1273, 1303, 1348], "behav": [227, 274, 346, 501, 585, 716, 717, 837, 873, 899, 953], "behavior": [47, 51, 157, 164, 218, 219, 227, 250, 251, 346, 382, 507, 551, 553, 690, 784, 793, 837, 866, 867, 881, 882, 950, 953, 989, 1168, 1170, 1272], "behaviour": [11, 56, 218, 219, 227, 274, 293, 346, 683, 691, 692, 695, 706, 707, 744, 816, 837, 866, 867, 873, 899, 912, 953, 1265, 1273, 1274, 1277, 1288, 1289], "behind": 181, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 145, 146, 147, 149, 150, 155, 156, 157, 159, 160, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 207, 223, 252, 293, 301, 303, 308, 315, 346, 349, 350, 435, 436, 516, 585, 633, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 690, 762, 764, 782, 795, 796, 837, 855, 858, 859, 870, 883, 912, 920, 953, 1030, 1046, 1047, 1131, 1222, 1234, 1237, 1239, 1240, 1272, 1324, 1327, 1332, 1348, 1353, 1379], "belong": [1, 236, 346, 877, 953], "below": [20, 40, 149, 150, 160, 161, 219, 227, 270, 274, 346, 475, 500, 697, 706, 707, 721, 776, 777, 779, 780, 824, 825, 827, 833, 837, 873, 899, 953, 1089, 1279, 1288, 1289, 1303], "best": [255, 332, 346, 585, 837, 1201, 1348], "better": [255, 303, 304, 332, 346, 421, 585, 702, 837, 854, 936, 953, 1027, 1247, 1249, 1284, 1348], "between": [25, 64, 100, 172, 173, 175, 179, 204, 212, 250, 262, 272, 280, 338, 346, 383, 417, 439, 440, 475, 522, 546, 555, 565, 566, 567, 568, 627, 633, 634, 656, 657, 682, 698, 758, 759, 762, 767, 769, 796, 810, 813, 814, 837, 881, 892, 897, 942, 953, 990, 1022, 1029, 1049, 1050, 1089, 1136, 1163, 1172, 1182, 1183, 1184, 1185, 1217, 1222, 1223, 1239, 1264, 1280, 1348, 1365, 1373], "between_ab": [522, 837], "beyond": [52, 728, 1310], "bia": [493, 494, 534, 658, 676, 837, 1110, 1111, 1151, 1240, 1259, 1348], "bias": [534, 676, 837, 1151, 1259, 1348], "big": [146, 403, 1009], "big_fil": 146, "bigidx": 138, "bigqueri": 148, "bigquery_format": 192, "bin": [436, 516, 633, 725, 751, 830, 837, 1047, 1131, 1222, 1307, 1342, 1348, 1353], "bin2int": 403, "bin_count": [516, 837, 1131, 1348], "bin_i": [751, 837], "bin_x": [751, 837], "bin_xor_xi": [751, 837], "binari": [41, 43, 141, 147, 215, 286, 346, 399, 400, 401, 402, 403, 404, 405, 438, 599, 686, 837, 864, 906, 953, 959, 1005, 1006, 1008, 1009, 1010, 1011, 1268, 1367], "binary_str": [751, 837], "bind": 150, "birthdai": 145, "bit": [70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 407, 408, 409, 410, 412, 413, 638, 683, 837, 1013, 1015, 1016, 1018, 1019, 1226, 1265, 1348, 1367, 1371], "bit_and": 1369, "bit_count": 1369, "bit_length": 1369, "bit_or": 1369, "bit_xor": 1369, "bitmap": [222, 346, 1107, 1348], "bitwis": [359, 406, 411, 414, 625, 751, 752, 753, 754, 755, 837, 1012, 1017, 1020, 1348, 1369, 1375], "bitwise_and": [837, 1348], "bitwise_count_on": [837, 1348], "bitwise_count_zero": [837, 1348], "bitwise_leading_on": [837, 1348], "bitwise_leading_zero": [837, 1348], "bitwise_or": [837, 1348], "bitwise_trailing_on": [837, 1348], "bitwise_trailing_zero": [837, 1348], "bitwise_xor": [837, 1348], "bla": [685, 692, 1267, 1274], "black": [255, 346, 399, 400, 401, 402, 405], "blindli": [548, 1165], "block": [21, 63, 235, 311, 346, 827, 859, 876, 900, 917, 926, 927, 936, 953, 1247, 1249, 1348], "blue": [55, 96, 97, 399, 400, 401, 402, 405, 748, 837, 1337, 1348], "bob": [145, 262, 346, 892, 953, 1377], "bodi": [41, 346, 350], "bold": [41, 346], "bom": [38, 48, 346, 953], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 64, 95, 96, 129, 130, 131, 132, 133, 135, 136, 137, 140, 141, 142, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 159, 160, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 201, 203, 206, 207, 208, 209, 214, 216, 221, 226, 227, 228, 229, 233, 234, 235, 236, 240, 241, 243, 244, 245, 248, 250, 251, 259, 268, 270, 274, 275, 279, 280, 281, 282, 287, 290, 292, 293, 296, 299, 301, 304, 305, 309, 310, 311, 312, 315, 316, 318, 320, 328, 330, 333, 336, 346, 357, 358, 359, 360, 361, 371, 374, 375, 378, 382, 383, 391, 396, 399, 400, 402, 405, 416, 417, 418, 422, 430, 431, 432, 433, 434, 435, 436, 443, 455, 471, 488, 489, 490, 491, 493, 494, 510, 512, 513, 516, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 539, 540, 544, 548, 551, 553, 555, 564, 571, 576, 577, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 620, 621, 623, 625, 626, 628, 629, 633, 636, 638, 647, 648, 650, 652, 654, 656, 658, 659, 661, 663, 667, 669, 671, 676, 678, 679, 682, 683, 684, 685, 686, 688, 694, 695, 696, 698, 706, 707, 708, 711, 712, 714, 720, 722, 723, 725, 727, 731, 733, 734, 743, 745, 748, 751, 752, 753, 754, 755, 757, 760, 761, 762, 766, 767, 770, 771, 776, 777, 779, 780, 791, 792, 795, 796, 797, 799, 803, 809, 812, 815, 816, 819, 821, 824, 825, 827, 828, 837, 853, 855, 856, 858, 859, 863, 865, 869, 872, 873, 876, 877, 881, 882, 887, 891, 896, 899, 900, 907, 909, 911, 912, 916, 917, 918, 919, 920, 923, 928, 932, 934, 937, 940, 953, 958, 959, 961, 966, 967, 978, 981, 982, 985, 989, 990, 998, 1003, 1005, 1006, 1008, 1011, 1022, 1023, 1025, 1028, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1053, 1065, 1085, 1103, 1105, 1106, 1108, 1110, 1111, 1118, 1120, 1127, 1128, 1131, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1156, 1157, 1161, 1165, 1168, 1170, 1172, 1181, 1188, 1194, 1201, 1213, 1215, 1218, 1219, 1222, 1224, 1225, 1226, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1249, 1250, 1254, 1259, 1261, 1264, 1265, 1266, 1267, 1268, 1270, 1276, 1277, 1278, 1280, 1288, 1289, 1290, 1293, 1294, 1296, 1302, 1304, 1305, 1307, 1309, 1324, 1329, 1330, 1334, 1337, 1348, 1357, 1358, 1360, 1366, 1371, 1376], "boolean": [56, 95, 175, 206, 227, 229, 274, 292, 309, 346, 358, 359, 360, 374, 375, 378, 399, 402, 405, 416, 455, 501, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 539, 540, 544, 623, 625, 628, 629, 679, 699, 743, 750, 751, 760, 761, 819, 827, 837, 853, 873, 899, 911, 916, 953, 959, 966, 967, 979, 981, 982, 985, 1005, 1065, 1118, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1156, 1157, 1161, 1215, 1218, 1219, 1249, 1265, 1339, 1348, 1368], "border": 21, "both": [11, 26, 38, 48, 55, 96, 97, 147, 150, 164, 210, 236, 250, 251, 252, 262, 278, 279, 305, 315, 346, 361, 425, 436, 475, 495, 522, 633, 646, 649, 651, 653, 655, 657, 660, 662, 664, 710, 776, 777, 779, 780, 795, 796, 824, 825, 833, 837, 848, 877, 881, 882, 883, 892, 902, 920, 953, 959, 1035, 1089, 1136, 1292, 1330, 1348, 1376, 1377], "boto3": 33, "bottom": [206, 346, 416, 837, 853, 953], "bottom_k": [309, 346, 416, 742, 743, 837, 916, 953, 1333, 1348], "bottom_k_bi": [415, 742, 743, 837], "bound": [111, 145, 146, 222, 236, 346, 382, 425, 522, 551, 553, 576, 582, 747, 757, 776, 777, 779, 780, 795, 796, 824, 825, 837, 877, 953, 989, 1035, 1107, 1136, 1168, 1170, 1199, 1336, 1348, 1366], "boundari": [236, 346, 425, 516, 728, 837, 877, 953, 1035, 1131, 1310, 1348], "box": [21, 255, 346], "box_draw": 21, "branch": [62, 63, 129, 858, 859, 869, 896, 909, 953], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 149, 155, 157, 159, 160, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 250, 252, 293, 303, 308, 315, 346, 349, 350, 435, 436, 516, 585, 633, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 764, 795, 796, 837, 858, 859, 881, 883, 912, 920, 953, 1030, 1046, 1047, 1131, 1222, 1234, 1237, 1239, 1240, 1327, 1332, 1348, 1353], "breakpoint": [436, 516, 633, 837, 1047, 1131, 1222, 1348], "breezah": 159, "breviti": 199, "broadcast": [708, 764, 959, 1290], "broader": 959, "brotli": [47, 51, 346, 953], "brussel": [469, 1083], "bst": [448, 452, 469, 1058, 1062, 1083], "bucket": [40, 149, 160, 161, 164, 346, 470, 483, 516, 837, 1084, 1097, 1131, 1348], "bud": [706, 707, 1288, 1289], "budget": 1357, "buffer": [52, 145, 146, 147, 222, 248, 346, 403, 1009, 1107, 1348], "buffer_s": [248, 346], "bug": [95, 140, 584, 585, 837, 887, 936, 953, 1201, 1348], "build": [61, 131, 959, 1379], "built": 100, "builtin": [143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 215, 346, 438, 837, 864, 953], "bundl": 199, "busi": [443, 762, 1053], "business_day_count": [443, 1053], "by_alternate_row": 1, "by_dtyp": 959, "by_first_letter_of_column_nam": 57, "by_first_letter_of_column_valu": 57, "by_index": 959, "by_left": [251, 346, 882, 953], "by_nam": 959, "by_pred": [279, 346], "by_right": [251, 346, 882, 953], "bye": 1, "byi": 1371, "bys": [236, 346, 877, 953], "byte": [36, 38, 41, 43, 44, 47, 48, 51, 141, 143, 144, 145, 146, 151, 152, 153, 154, 155, 158, 159, 162, 163, 215, 222, 286, 346, 403, 420, 421, 438, 599, 695, 696, 697, 701, 702, 710, 721, 837, 864, 906, 953, 1009, 1026, 1027, 1107, 1277, 1278, 1279, 1283, 1284, 1292, 1303, 1348, 1371], "bytesio": [41, 43, 44, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 215, 286, 346, 438, 599, 837, 864, 906, 953], "c": [1, 11, 36, 38, 40, 43, 44, 47, 52, 57, 59, 64, 104, 131, 133, 135, 137, 142, 150, 159, 203, 204, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 219, 220, 221, 223, 227, 229, 232, 233, 234, 235, 236, 238, 240, 241, 249, 250, 253, 254, 256, 258, 260, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 279, 282, 283, 284, 291, 292, 293, 294, 295, 297, 298, 301, 302, 303, 304, 305, 306, 309, 313, 314, 315, 317, 318, 320, 325, 328, 329, 330, 333, 334, 336, 339, 340, 346, 350, 355, 357, 358, 360, 378, 398, 416, 436, 475, 513, 522, 543, 555, 585, 592, 609, 610, 624, 626, 630, 633, 671, 712, 720, 743, 746, 753, 755, 756, 758, 759, 760, 763, 764, 766, 767, 768, 769, 771, 772, 774, 784, 785, 786, 789, 790, 793, 794, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 816, 818, 820, 821, 822, 826, 833, 837, 853, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 873, 876, 877, 881, 885, 894, 896, 899, 900, 901, 903, 904, 909, 910, 911, 912, 916, 919, 920, 923, 925, 929, 932, 933, 934, 937, 938, 940, 943, 944, 953, 959, 1029, 1047, 1136, 1160, 1222, 1294, 1302, 1316, 1335, 1348, 1358, 1360, 1361, 1363, 1364, 1365, 1366, 1371, 1376], "c00": 959, "c01": 959, "c02": 959, "c03": 959, "c05": 959, "c1": 395, "c123": 1371, "c2": 395, "c20": 959, "c25": 959, "c3": 395, "c40": 959, "c45": 1371, "c4d79b": [41, 346], "c50": 959, "c567": [41, 346], "c60": 959, "c75": 959, "c80": 959, "c8ae6d2b276": [41, 346], "c93": 959, "c95": 959, "c96": 959, "c97": 959, "c98": 959, "c99": 959, "c_btm_by_a": [416, 837], "c_btm_by_b": [416, 837], "c_by_ca": [416, 743, 837], "c_by_cb": [416, 743, 837], "c_c_c": [816, 912, 953], "c_contigu": [304, 346], "c_max": [626, 837], "c_mean_squar": [325, 929], "c_min": [626, 837], "c_top_by_a": [743, 837], "c_top_by_b": [743, 837], "c_total": 1376, "cach": [55, 62, 63, 96, 97, 124, 129, 151, 159, 162, 164, 168, 169, 170, 171, 183, 640, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 720, 722, 723, 727, 837, 848, 858, 859, 869, 896, 909, 953, 1025, 1228, 1229, 1302, 1304, 1305, 1309, 1348], "cadi": [270, 346], "cafe": [725, 1307], "caf\u00e9": [420, 421, 701, 702, 959, 1026, 1027, 1283, 1284], "calamin": 150, "calcul": [41, 47, 51, 56, 214, 236, 294, 317, 346, 439, 491, 492, 493, 494, 534, 546, 565, 572, 578, 582, 658, 676, 681, 747, 749, 769, 813, 814, 818, 826, 837, 863, 877, 913, 921, 953, 1048, 1049, 1108, 1109, 1110, 1111, 1151, 1163, 1182, 1240, 1259, 1263, 1338, 1348], "calendar": [70, 71, 236, 251, 278, 316, 346, 446, 456, 458, 465, 470, 483, 487, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 781, 824, 825, 837, 877, 882, 902, 953, 1056, 1066, 1071, 1079, 1084, 1097, 1101, 1109, 1348], "calendar_year": [456, 487], "call": [10, 38, 40, 41, 43, 47, 48, 49, 50, 51, 55, 62, 63, 129, 135, 140, 142, 145, 146, 147, 149, 150, 151, 155, 157, 159, 160, 162, 163, 164, 168, 169, 170, 171, 175, 179, 189, 199, 206, 235, 236, 253, 255, 278, 293, 304, 309, 345, 346, 415, 416, 431, 434, 443, 584, 585, 609, 610, 612, 614, 616, 617, 640, 641, 672, 742, 743, 762, 768, 833, 837, 853, 858, 859, 869, 876, 877, 896, 902, 909, 912, 916, 950, 951, 952, 953, 959, 1021, 1053, 1201, 1229, 1255, 1329, 1333, 1348, 1358, 1362, 1376], "callabl": [57, 58, 59, 60, 95, 140, 159, 229, 255, 269, 275, 332, 346, 395, 576, 584, 585, 610, 611, 630, 647, 771, 772, 785, 798, 799, 811, 837, 887, 895, 900, 936, 953, 1002, 1193, 1201, 1234, 1348], "caller": [95, 148, 262, 346, 576, 887, 892, 936, 953], "cam": [275, 346, 900, 953], "can": [1, 15, 28, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 55, 56, 62, 70, 71, 73, 87, 95, 96, 97, 133, 140, 145, 146, 147, 149, 150, 151, 155, 156, 157, 159, 160, 162, 163, 164, 165, 173, 174, 175, 179, 181, 184, 189, 199, 201, 206, 208, 218, 219, 220, 229, 231, 235, 236, 243, 245, 247, 250, 251, 255, 266, 270, 278, 280, 281, 284, 286, 287, 292, 303, 304, 308, 309, 310, 314, 320, 323, 332, 346, 349, 358, 395, 416, 431, 434, 435, 438, 443, 462, 463, 465, 469, 472, 475, 483, 492, 498, 501, 522, 548, 576, 584, 585, 592, 596, 599, 600, 606, 609, 610, 612, 614, 616, 617, 626, 631, 633, 638, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 669, 671, 676, 679, 684, 693, 700, 706, 707, 708, 715, 716, 717, 720, 731, 743, 760, 762, 775, 778, 785, 787, 791, 792, 795, 799, 816, 827, 833, 836, 837, 848, 853, 854, 858, 859, 864, 866, 867, 869, 877, 881, 882, 902, 904, 906, 907, 909, 911, 912, 916, 923, 926, 927, 953, 959, 961, 1002, 1046, 1053, 1076, 1077, 1079, 1083, 1084, 1086, 1089, 1097, 1109, 1115, 1136, 1165, 1193, 1201, 1206, 1220, 1222, 1226, 1229, 1247, 1249, 1250, 1253, 1259, 1266, 1267, 1275, 1282, 1288, 1289, 1290, 1297, 1298, 1299, 1302, 1327, 1329, 1348, 1353, 1363, 1376], "cancel": [858, 953], "candid": [691, 693, 1273, 1275], "cannot": [1, 47, 48, 49, 50, 51, 62, 63, 106, 109, 145, 146, 150, 151, 153, 155, 156, 157, 164, 181, 199, 251, 255, 281, 282, 304, 323, 332, 346, 400, 475, 495, 564, 585, 600, 667, 686, 712, 733, 799, 837, 858, 859, 869, 882, 896, 909, 927, 928, 936, 953, 959, 1006, 1089, 1181, 1201, 1246, 1268, 1294, 1329, 1348], "capabl": [1, 41, 346], "capac": [222, 290, 346, 1107, 1254, 1348], "capit": [728, 1310, 1371], "captur": [691, 693, 706, 707, 1273, 1275, 1288, 1289], "car": [275, 299, 346, 643, 837, 900, 953], "cardin": [205, 346, 362, 756, 837, 852, 953, 969, 1348], "care": [41, 287, 346, 585, 626, 669, 837, 907, 953, 1250, 1348], "cars_revers": [643, 837], "cartesian": [250, 346, 881, 953], "case": [41, 55, 56, 63, 95, 104, 130, 132, 133, 134, 136, 140, 142, 147, 154, 155, 163, 164, 181, 224, 236, 248, 255, 270, 278, 280, 281, 300, 303, 304, 346, 444, 492, 584, 596, 597, 610, 626, 646, 683, 684, 692, 694, 695, 696, 706, 707, 708, 728, 837, 859, 877, 899, 902, 953, 959, 1054, 1109, 1114, 1265, 1266, 1274, 1276, 1277, 1278, 1288, 1289, 1290, 1310, 1327, 1348], "cast": [1, 40, 58, 59, 130, 132, 133, 136, 142, 168, 169, 170, 171, 229, 236, 269, 278, 303, 304, 308, 320, 346, 361, 433, 434, 445, 472, 475, 486, 625, 630, 631, 638, 640, 646, 699, 700, 730, 737, 741, 765, 766, 817, 837, 877, 895, 902, 923, 953, 959, 1030, 1044, 1045, 1055, 1086, 1089, 1100, 1220, 1226, 1281, 1282, 1312, 1319, 1325, 1329, 1331, 1332, 1348, 1369], "cast_str_to_int": [269, 346, 895, 953], "cast_to_supertyp": [142, 837], "cat": [27, 55, 96, 97, 436, 633, 683, 685, 726, 729, 741, 766, 832, 837, 959, 1047, 1131, 1222, 1265, 1267, 1308, 1311, 1344, 1348], "catalog": [0, 849], "catalog_nam": [185, 187, 188, 189], "cataloginfo": [186, 197], "categor": [40, 55, 74, 96, 97, 99, 168, 169, 170, 171, 250, 301, 346, 418, 419, 420, 421, 422, 436, 633, 640, 641, 741, 837, 959, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1047, 1222, 1228, 1229, 1331, 1348], "categori": [41, 55, 74, 97, 301, 346, 419, 436, 516, 633, 837, 1024, 1047, 1131, 1222, 1324, 1348], "categorical_as_str": [168, 169, 170, 171], "categoricalord": 68, "categoricaltyp": [298, 346], "caus": [112, 121, 131, 145, 146, 147, 159, 203, 224, 304, 346, 584, 837, 1114, 1329, 1348], "cba": 717, "cbrt": [837, 1348, 1369], "cbrt_a": 1370, "cc": [495, 783, 837, 959, 1048, 1348, 1371], "ccc": [1, 41, 346, 731, 733, 734, 959, 1371], "ccy": 1379, "cd": [707, 731, 733, 734, 959], "cd34": 707, "cdatainterfac": [131, 202, 962], "cde": [959, 1371], "cdt": [470, 483, 1084, 1097], "ceil": [58, 837, 1348, 1369], "ceil_a": 1370, "cell": [16, 17, 41, 270, 346], "cent": [446, 1288], "center": [16, 17, 41, 346, 491, 493, 494, 647, 648, 650, 652, 654, 656, 659, 661, 663, 837, 1108, 1110, 1111, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1348], "central": [160, 161, 199, 534, 676, 837, 1151, 1259, 1348], "centuri": 1372, "certain": [48, 49, 50, 51, 52, 63, 241, 316, 346, 716, 717, 833, 858, 859, 896, 953, 1348], "certainli": [720, 722, 723, 1302, 1304, 1305], "cest": [469, 1083], "cet": [469, 1083], "cfg": [2, 4, 18, 199], "cfg_ascii_fram": 199, "cfg_markdown": 199, "cfg_verbos": 199, "cfoo": [925, 953], "chain": [609, 610, 612, 614, 616, 617, 827], "chanc": [172, 175, 179, 1379], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 72, 78, 131, 140, 141, 142, 145, 146, 147, 149, 150, 155, 157, 159, 160, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 252, 293, 303, 308, 315, 322, 346, 349, 350, 435, 436, 439, 475, 516, 585, 626, 627, 633, 640, 645, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 764, 795, 796, 837, 858, 859, 883, 912, 920, 926, 953, 959, 1029, 1030, 1046, 1047, 1089, 1131, 1217, 1222, 1228, 1233, 1234, 1237, 1239, 1240, 1254, 1327, 1332, 1348, 1353], "changes_length": [142, 837], "char": [28, 145, 159, 692, 1274], "char_length": 1371, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 48, 98, 144, 145, 146, 148, 159, 346, 420, 421, 465, 689, 690, 692, 697, 701, 702, 704, 705, 706, 707, 710, 711, 712, 715, 716, 717, 718, 719, 721, 728, 730, 896, 953, 959, 1026, 1027, 1079, 1271, 1272, 1274, 1279, 1283, 1284, 1286, 1287, 1288, 1289, 1292, 1293, 1294, 1297, 1298, 1299, 1303, 1310, 1312, 1371], "character_length": 1371, "characterist": [175, 179], "charli": [145, 1377], "chart": [41, 346, 349, 896, 953, 1348, 1353], "cheap": [208, 209, 285, 321, 346, 856, 857, 905, 924, 953, 1034, 1036, 1348], "cheaper": [551, 1168], "check": [40, 71, 106, 145, 146, 159, 168, 169, 170, 171, 183, 221, 246, 250, 251, 346, 378, 399, 402, 405, 418, 422, 513, 522, 526, 544, 683, 688, 695, 714, 837, 881, 882, 887, 953, 985, 1005, 1008, 1011, 1023, 1028, 1106, 1127, 1128, 1138, 1141, 1148, 1150, 1161, 1265, 1270, 1277, 1296, 1348], "check_column_ord": [168, 169], "check_dtyp": [168, 169, 170, 171, 958, 1106, 1348], "check_exact": [168, 169, 170, 171], "check_nam": [170, 171, 1106, 1348], "check_ord": [170, 171], "check_row_ord": [168, 169], "check_sorted": [251, 346, 882, 953], "choos": [47, 49, 51, 236, 270, 346, 475, 877, 953, 1089], "chrono": [38, 48, 100, 346, 472, 475, 720, 722, 723, 727, 953, 1086, 1089, 1302, 1304, 1305, 1309, 1371, 1372], "chunk": [15, 51, 139, 145, 146, 149, 155, 157, 159, 160, 162, 163, 164, 175, 179, 224, 249, 265, 304, 346, 361, 637, 837, 953, 968, 1033, 1114, 1125, 1207, 1225, 1323, 1329, 1348], "chunk_length": 1348, "chunkedarrai": [130, 265, 346], "citi": [706, 707], "clang": 167, "clariti": [279, 346], "class": [1, 18, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 115, 117, 172, 173, 184, 190, 191, 193, 194, 281, 286, 346, 599, 795, 824, 833, 837, 843, 849, 861, 868, 903, 922, 928, 953, 958, 1328, 1348, 1352, 1360, 1376], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 215, 346, 438, 507, 837, 864, 953, 1358, 1376], "claus": [849, 1366, 1375], "clean": [720, 722, 723, 1302, 1304, 1305], "cleaner": 199, "cleanli": [11, 234, 346, 1376], "clear": [55, 96, 209, 346, 857, 953, 1036, 1348], "clearer": 133, "clickhous": 148, "client": [33, 147, 184], "clip": [837, 1348], "clipboard": [37, 144, 346, 849], "clone": [132, 133, 134, 135, 136, 208, 304, 346, 856, 953, 1034, 1348], "close": [41, 48, 49, 50, 51, 53, 147, 236, 278, 293, 346, 436, 522, 581, 633, 646, 649, 651, 653, 655, 657, 660, 662, 664, 676, 776, 777, 779, 780, 795, 796, 824, 825, 837, 877, 902, 912, 953, 1047, 1136, 1222, 1259, 1348], "closedinterv": [236, 278, 346, 522, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 795, 796, 824, 825, 837, 877, 902, 953, 1136, 1348], "closest": [130, 251, 346, 882, 953, 1365, 1370], "closur": [649, 651, 660, 662, 664, 837], "cloud": [35, 38, 40, 43, 47, 48, 49, 50, 51, 95, 147, 149, 155, 157, 159, 160, 161, 162, 163, 164, 165, 189, 346, 849, 898, 953], "cloudi": [706, 707], "cloudpickl": 167, "cluster": 164, "cluster_with_column": [62, 63, 129, 858, 859, 869, 896, 909, 953], "co": [692, 837, 1274, 1348, 1369], "coalesc": [64, 250, 251, 315, 346, 520, 694, 696, 720, 837, 881, 882, 920, 953, 1278, 1302, 1364, 1369], "code": [199, 210, 250, 346, 399, 400, 401, 402, 405, 438, 585, 669, 837, 864, 881, 885, 953, 1250, 1348, 1358], "codebas": 199, "coeffici": [212, 346, 676, 837, 1259, 1348], "coerc": [64, 639, 837], "coercion": [48, 49, 50, 51, 62, 63, 129, 639, 837, 858, 859, 869, 896, 909, 953], "col": [1, 13, 38, 41, 48, 52, 56, 57, 58, 59, 134, 136, 159, 173, 175, 227, 235, 236, 244, 246, 250, 251, 252, 255, 266, 269, 270, 274, 278, 279, 284, 292, 303, 308, 312, 314, 320, 325, 346, 350, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 515, 516, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 611, 613, 615, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 756, 760, 761, 763, 764, 765, 766, 768, 770, 773, 775, 776, 778, 779, 781, 785, 786, 787, 788, 789, 790, 800, 802, 804, 805, 807, 810, 811, 815, 816, 818, 820, 822, 823, 826, 827, 837, 873, 876, 877, 879, 881, 882, 883, 895, 899, 902, 904, 911, 912, 918, 923, 925, 929, 953, 959, 1079, 1083, 1165, 1247, 1249, 1278, 1282, 1302, 1348, 1379], "col0": [175, 1379], "col1": [175, 270, 346, 953, 1379], "col2": [175, 270, 346, 953, 1379], "col3": [270, 346, 1379], "col4": 1379, "col_nam": [269, 346, 585, 827, 837, 895, 953], "cole": 141, "coli": [41, 346, 616, 617, 959, 1379], "collaps": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 896, 909, 953], "collapse_join": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 896, 909, 953], "collect": [10, 48, 49, 50, 51, 59, 62, 63, 95, 129, 159, 160, 161, 165, 175, 176, 179, 218, 219, 253, 270, 293, 298, 311, 312, 346, 495, 526, 585, 765, 783, 787, 815, 816, 819, 837, 852, 853, 855, 856, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 904, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 950, 952, 953, 959, 1141, 1348, 1358, 1359, 1360, 1363, 1364, 1376, 1377, 1379], "collect_al": [59, 63, 129, 858, 859, 953], "collect_all_async": [859, 953], "collect_async": [63, 953], "collect_schema": [59, 253, 346, 861, 868, 895, 903, 922, 953], "collis": 64, "colnam": [25, 41, 159, 346], "color": [55, 96, 97, 332, 346, 349, 399, 400, 401, 402, 405, 686, 748, 837, 936, 1005, 1006, 1007, 1008, 1011, 1268, 1337, 1348, 1371], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 51, 52, 54, 55, 56, 57, 64, 71, 87, 97, 101, 105, 130, 132, 133, 134, 135, 136, 137, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 168, 169, 170, 171, 175, 191, 194, 204, 206, 207, 210, 212, 213, 216, 217, 218, 219, 220, 223, 227, 228, 231, 232, 234, 235, 236, 240, 241, 246, 247, 248, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 287, 292, 294, 295, 296, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 325, 331, 346, 349, 350, 357, 358, 360, 371, 380, 389, 391, 394, 403, 416, 425, 429, 430, 436, 446, 447, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 468, 471, 472, 473, 475, 484, 485, 487, 495, 497, 501, 503, 516, 521, 522, 537, 543, 549, 551, 571, 575, 576, 585, 591, 592, 594, 596, 598, 609, 611, 612, 613, 614, 615, 616, 617, 626, 633, 637, 639, 640, 641, 642, 644, 645, 646, 649, 651, 653, 655, 657, 660, 662, 664, 671, 672, 678, 679, 682, 690, 695, 697, 698, 708, 712, 713, 720, 721, 722, 723, 724, 725, 727, 732, 735, 743, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 837, 853, 855, 862, 865, 866, 867, 868, 870, 873, 876, 877, 881, 882, 883, 887, 888, 889, 890, 891, 893, 894, 897, 899, 900, 902, 903, 904, 905, 907, 911, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 935, 936, 953, 958, 959, 966, 967, 987, 996, 998, 1001, 1009, 1025, 1029, 1035, 1040, 1041, 1047, 1056, 1059, 1060, 1061, 1064, 1065, 1066, 1070, 1071, 1072, 1074, 1075, 1078, 1080, 1081, 1085, 1086, 1087, 1089, 1098, 1099, 1101, 1113, 1131, 1135, 1160, 1166, 1168, 1188, 1192, 1222, 1229, 1230, 1233, 1253, 1264, 1272, 1277, 1280, 1294, 1295, 1302, 1304, 1305, 1306, 1307, 1309, 1315, 1318, 1324, 1325, 1337, 1348, 1364, 1366, 1368, 1370, 1371, 1373, 1374, 1377, 1378, 1379], "column_0": [1, 255, 310, 346, 898, 953], "column_1": [255, 310, 346, 1373], "column_2": [310, 346, 1373], "column_abc": 16, "column_format": [41, 346], "column_nam": [275, 310, 346, 900, 953], "column_tot": [41, 346], "column_width": [41, 346], "column_x": [145, 146, 150, 156, 159], "column_xyz": 16, "columnar": [134, 136, 248, 280, 346], "columnformatdict": [41, 346], "columninfo": [194, 197], "columnnameorselector": [207, 216, 218, 219, 261, 268, 270, 281, 301, 311, 312, 313, 314, 346, 855, 865, 866, 867, 891, 917, 918, 919, 953], "columnnotfounderror": [231, 232, 346], "columntotalsdefinit": [41, 346], "columnwidthsdefinit": [41, 346], "colx": [41, 346, 616, 617, 959, 1363, 1379], "colz": [959, 1379], "com": [33, 41, 148, 346, 491, 493, 494, 691, 692, 693, 837, 1108, 1110, 1111, 1273, 1274, 1275, 1348], "combin": [47, 51, 62, 63, 64, 129, 227, 236, 237, 251, 270, 274, 278, 316, 346, 359, 372, 483, 492, 505, 600, 625, 641, 646, 715, 716, 717, 776, 777, 779, 780, 824, 825, 827, 837, 858, 859, 869, 877, 882, 896, 899, 902, 909, 953, 1084, 1097, 1109, 1229, 1297, 1298, 1299, 1348, 1364, 1377], "come": [124, 148, 236, 311, 313, 346, 443, 462, 463, 534, 576, 762, 837, 877, 917, 919, 953, 1053, 1076, 1077, 1151, 1348], "comm_subexpr_elim": [62, 63, 129, 858, 859, 869, 896, 909, 953], "comm_subplan_elim": [62, 63, 129, 858, 859, 869, 896, 909, 953], "comma": [37, 38, 145, 146, 159, 346], "comment": [145, 146, 159, 190, 191, 193, 194], "comment_prefix": [145, 146, 159], "common": [56, 62, 63, 64, 104, 129, 145, 146, 159, 315, 346, 610, 843, 858, 859, 869, 896, 909, 920, 953, 1352], "compact": 1374, "compani": 148, "compar": [164, 168, 169, 170, 171, 221, 227, 274, 346, 489, 490, 510, 512, 522, 536, 583, 620, 621, 837, 873, 899, 953, 1029, 1105, 1106, 1213, 1348], "comparison": [165, 227, 274, 346, 873, 899, 953], "compat": [21, 41, 43, 44, 47, 49, 51, 99, 298, 346, 683, 685, 691, 692, 693, 695, 706, 707, 953, 959, 1089, 1265, 1267, 1273, 1274, 1275, 1277, 1288, 1289, 1323, 1348, 1358, 1371, 1372, 1376], "compat_level": [43, 44, 49, 298, 346, 953, 1323, 1348], "compatibleframetyp": [1359, 1361, 1376], "compatlevel": [43, 44, 49, 298, 346, 953, 1323, 1348], "competit": [636, 837, 1224, 1348], "compil": [61, 376, 377, 541, 542, 957, 983, 984, 1158, 1159], "complement": 959, "complet": [145, 147, 159, 1377], "complex": [176, 415, 416, 435, 742, 743, 837, 1021, 1046, 1333, 1348], "compliant": [41, 346, 475, 1089], "compon": [447, 471, 475, 720, 723, 781, 1057, 1085, 1089, 1302, 1305], "compos": 1377, "composit": [87, 1379], "compound": [137, 281, 346, 959], "comprehens": 173, "compress": [36, 40, 43, 44, 47, 49, 51, 346, 644, 837, 953, 1232, 1348], "compression_level": [47, 51, 346, 953], "comput": [62, 64, 102, 222, 235, 251, 270, 305, 311, 325, 338, 346, 354, 363, 364, 365, 366, 367, 368, 385, 386, 387, 392, 393, 397, 423, 426, 427, 428, 431, 432, 433, 434, 440, 488, 491, 492, 493, 494, 496, 534, 558, 559, 560, 561, 565, 566, 567, 568, 572, 578, 579, 580, 581, 606, 626, 627, 632, 636, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 673, 674, 675, 676, 680, 739, 740, 748, 753, 755, 758, 759, 760, 767, 769, 782, 803, 813, 814, 827, 837, 858, 876, 879, 881, 882, 898, 917, 925, 929, 942, 953, 964, 970, 971, 972, 973, 974, 975, 992, 993, 994, 999, 1000, 1004, 1031, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1050, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1151, 1175, 1176, 1177, 1178, 1182, 1183, 1184, 1185, 1189, 1195, 1196, 1197, 1198, 1206, 1217, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1256, 1257, 1258, 1259, 1262, 1321, 1322, 1330, 1337, 1348, 1370, 1373], "computecontext": [898, 953], "computeerror": [596, 725, 1307], "concat": [55, 96, 97, 105, 146, 251, 346, 882, 925, 953, 1033, 1125, 1207, 1225, 1348, 1369], "concat_list": [548, 782], "concat_w": [293, 346, 816, 912, 953, 1369, 1376], "concaten": [55, 64, 96, 97, 229, 269, 346, 630, 682, 698, 764, 765, 766, 837, 895, 953, 1033, 1207, 1264, 1280, 1348, 1371], "concatmethod": 64, "conclus": [134, 136, 346, 953], "concret": [175, 179], "condit": [41, 219, 227, 252, 274, 279, 346, 418, 422, 501, 522, 688, 714, 761, 785, 827, 837, 873, 883, 899, 953, 1136, 1348, 1364, 1369, 1375], "conditional_format": [41, 346], "conditionalformatdict": [41, 346], "config": [0, 56, 214, 284, 303, 320, 346, 684, 694, 696, 708, 776, 777, 779, 780, 781, 849, 858, 863, 904, 923, 953, 1266, 1278, 1290], "configur": [5, 33, 40, 149, 160, 161, 199, 346, 349, 850, 858, 869, 896, 909, 928, 953, 1348, 1353], "configure_axisx": [346, 349, 1348, 1353], "configure_point": [346, 349, 1348, 1353], "conflat": [522, 837], "conform": 1379, "confus": [104, 358, 529, 530, 708, 837], "conjunct": [41, 96, 147, 150, 156, 173, 346, 791, 794, 953], "conn": 147, "connect": [38, 39, 43, 47, 48, 49, 50, 51, 74, 145, 147, 148, 151, 153, 155, 157, 159, 162, 163, 164, 165, 189, 346, 850, 953], "connectionorcursor": [39, 147, 346], "connector": 148, "connectorx": [147, 148, 167], "consecut": [226, 346, 398, 500, 506, 682, 698, 706, 837, 872, 953, 1117, 1264, 1280, 1289, 1348], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 96, 97, 140, 141, 145, 146, 147, 149, 155, 157, 159, 160, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 206, 218, 219, 221, 247, 252, 255, 261, 280, 293, 303, 308, 309, 311, 313, 315, 346, 349, 350, 416, 425, 435, 436, 505, 516, 584, 585, 592, 608, 609, 612, 614, 616, 617, 633, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 743, 764, 771, 785, 795, 796, 833, 837, 853, 858, 859, 866, 867, 869, 883, 891, 896, 909, 912, 916, 917, 919, 920, 936, 953, 959, 1025, 1030, 1035, 1046, 1047, 1106, 1131, 1201, 1222, 1234, 1237, 1239, 1240, 1247, 1249, 1327, 1332, 1348, 1353, 1358], "consider": 141, "consist": [235, 268, 304, 346, 720, 776, 777, 795, 876, 953, 959, 968, 1114, 1302, 1329, 1348], "consola": [41, 346], "const": 11, "constant": [222, 278, 346, 444, 492, 498, 796, 837, 902, 953, 1054, 1107, 1109, 1115, 1348], "constrain": [56, 159, 218, 219, 346, 866, 867, 953, 959], "constraint": [227, 274, 346, 501, 609, 610, 612, 614, 616, 617, 827, 837, 873, 899, 953, 959, 1378], "construct": [55, 96, 97, 104, 130, 132, 133, 134, 135, 136, 137, 141, 147, 346, 507, 809, 812, 828, 833, 837, 864, 953, 1025, 1348, 1363], "construct_categor": 55, "constructor": [141, 150, 179], "contain": [5, 38, 39, 40, 41, 48, 56, 61, 100, 132, 135, 137, 142, 147, 148, 149, 157, 160, 161, 164, 174, 175, 177, 179, 206, 211, 218, 219, 220, 236, 244, 249, 266, 303, 304, 308, 309, 315, 327, 346, 358, 360, 383, 402, 405, 418, 422, 438, 513, 526, 555, 585, 682, 684, 688, 691, 693, 695, 698, 700, 713, 714, 730, 752, 753, 754, 755, 766, 799, 837, 853, 861, 864, 866, 867, 868, 877, 896, 916, 920, 931, 953, 959, 966, 967, 990, 1023, 1028, 1127, 1128, 1172, 1207, 1264, 1266, 1270, 1273, 1275, 1277, 1280, 1282, 1295, 1296, 1312, 1323, 1329, 1348, 1366], "contains_with_expr": 399, "contains_with_lit": 399, "content": [14, 48, 49, 50, 51, 672, 837, 953, 957, 1255, 1348], "context": [55, 96, 97, 181, 266, 293, 346, 356, 501, 548, 584, 585, 596, 678, 679, 748, 768, 784, 787, 793, 794, 799, 808, 812, 815, 836, 837, 848, 849, 898, 912, 925, 953, 1165, 1337, 1348, 1363, 1376, 1378], "contigu": [64, 130, 131, 135, 145, 146, 149, 151, 153, 155, 157, 159, 160, 162, 163, 164, 273, 304, 346], "continu": [436, 633, 676, 837, 1047, 1222, 1259, 1348, 1365], "contrast": 781, "control": [11, 12, 41, 63, 64, 150, 173, 175, 292, 293, 303, 346, 641, 679, 816, 837, 858, 859, 869, 896, 909, 911, 912, 928, 950, 953, 1229, 1327, 1348, 1360, 1363, 1376], "conveni": [224, 308, 346, 945, 968, 1114, 1348, 1358], "convers": [131, 203, 248, 249, 280, 281, 300, 304, 305, 346, 448, 720, 722, 723, 727, 849, 1058, 1302, 1304, 1305, 1309, 1329, 1330, 1348, 1374, 1376], "convert": [40, 100, 131, 135, 142, 149, 150, 156, 160, 203, 281, 299, 300, 301, 302, 303, 304, 305, 307, 308, 346, 394, 395, 437, 448, 472, 475, 575, 576, 584, 610, 635, 693, 720, 722, 723, 724, 725, 727, 732, 837, 953, 1001, 1002, 1029, 1058, 1086, 1089, 1192, 1193, 1275, 1302, 1304, 1305, 1306, 1307, 1309, 1315, 1318, 1326, 1327, 1328, 1329, 1330, 1332, 1348, 1371, 1373, 1374, 1376], "convert_time_zon": [469, 1083], "coo": [275, 346, 900, 953], "coord": 735, "coordin": [41, 346], "copi": [37, 130, 131, 144, 201, 203, 208, 209, 249, 298, 304, 305, 320, 346, 498, 837, 856, 857, 923, 953, 961, 1034, 1036, 1115, 1323, 1328, 1329, 1330, 1348, 1376], "corasick": [684, 694, 696, 708, 1266, 1276, 1278, 1290], "core": [1, 252, 346, 883, 953, 1376, 1379], "cores_right": [252, 346, 883, 953], "corner": [21, 41, 137, 346], "corr": 346, "corrcoef": [212, 346], "correct": [95, 142, 150, 156, 493, 494, 534, 576, 658, 676, 837, 887, 953, 1110, 1111, 1151, 1240, 1259, 1348], "correctli": [41, 346, 584, 837], "correl": [212, 346, 767, 813], "correlationmethod": 767, "correspond": [236, 251, 278, 304, 316, 346, 416, 456, 465, 470, 483, 585, 636, 646, 649, 651, 653, 655, 657, 660, 662, 664, 743, 776, 777, 779, 780, 824, 825, 837, 858, 877, 882, 902, 953, 1066, 1079, 1084, 1097, 1224, 1348, 1365], "cosd": 1369, "cosh": [837, 1348], "cosin": [363, 364, 426, 427, 584, 837, 970, 971, 1037, 1038, 1348, 1373], "cost": [252, 281, 346, 706, 883, 953, 1289], "cost_usd": [706, 1289], "cot": [837, 1348, 1369], "cotang": [428, 837, 1039, 1348, 1373], "cotd": 1369, "could": [40, 93, 102, 346, 673, 771, 781, 785, 837, 855, 863, 953, 1256, 1348], "count": [41, 165, 205, 214, 236, 266, 267, 278, 310, 316, 322, 337, 346, 362, 379, 388, 430, 443, 492, 516, 537, 545, 557, 562, 585, 608, 624, 636, 646, 649, 651, 653, 655, 657, 660, 662, 664, 685, 746, 748, 756, 762, 770, 794, 807, 837, 852, 863, 877, 894, 902, 926, 941, 953, 959, 969, 986, 995, 1041, 1048, 1053, 1109, 1131, 1154, 1162, 1174, 1179, 1208, 1216, 1267, 1335, 1337, 1348, 1353, 1357, 1369], "count_digit": 685, "count_num": [41, 346], "counterpart": 141, "countri": [251, 346, 444, 882, 953, 1054], "country_holidai": [443, 762, 1053], "covari": [142, 769, 814, 837], "cover": 11, "cow": [704, 705, 1286, 1287], "cpu": [145, 146, 167, 303, 346, 928, 1327, 1348], "crab": [683, 695, 1265, 1277], "crate": [38, 48, 100, 346, 683, 685, 691, 692, 693, 695, 706, 707, 720, 722, 723, 727, 953, 959, 1265, 1267, 1273, 1274, 1275, 1277, 1288, 1289, 1302, 1304, 1305, 1309], "creat": [39, 41, 48, 49, 50, 51, 52, 54, 55, 97, 130, 134, 136, 145, 146, 147, 148, 151, 153, 157, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 199, 208, 209, 236, 267, 270, 278, 303, 304, 316, 320, 323, 346, 349, 350, 447, 470, 483, 492, 576, 584, 637, 646, 649, 651, 653, 655, 657, 660, 662, 664, 765, 775, 776, 777, 778, 779, 780, 781, 795, 823, 824, 825, 833, 837, 856, 857, 863, 869, 877, 902, 923, 927, 953, 957, 958, 1034, 1036, 1047, 1057, 1084, 1097, 1109, 1214, 1222, 1225, 1327, 1329, 1348, 1353, 1375, 1376, 1379], "create_async_engin": 147, "create_engin": [39, 346], "created_at": [190, 193, 194], "created_bi": [190, 193, 194], "creation": 146, "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 48, 49, 50, 51, 149, 155, 157, 159, 160, 162, 163, 164, 189, 346, 849, 953], "credential_provid": [38, 40, 43, 47, 48, 49, 50, 51, 149, 155, 157, 159, 160, 162, 163, 164, 189, 346, 953], "credentialproviderfunct": [38, 40, 43, 47, 48, 49, 50, 51, 149, 155, 157, 159, 160, 162, 163, 164, 189, 346, 953], "cross": [250, 346, 881, 953, 1364], "crustacean": [695, 1277], "cst": [470, 483, 1084, 1097], "csv": [37, 38, 48, 49, 50, 51, 52, 54, 144, 145, 146, 150, 151, 159, 192, 346, 849, 953], "csvencod": [145, 146, 159], "csvquotestyl": [38, 48, 346, 953], "ctx": [1357, 1359, 1360, 1361, 1362, 1363, 1376], "cube": [1, 60, 423, 631, 837, 1031, 1348, 1370], "cuda": 928, "cum_count": [837, 1348], "cum_count_revers": [430, 837], "cum_max": [837, 1348], "cum_max_all_fil": [431, 837], "cum_max_revers": [431, 837], "cum_min": [837, 1348], "cum_min_revers": [432, 837], "cum_prod": [355, 837, 1348], "cum_prod_revers": [433, 837], "cum_reduc": 771, "cum_sum": [519, 626, 736, 774, 837, 879, 953, 1150, 1348], "cum_sum_revers": [434, 837], "cumsum_horizont": 773, "cumul": [430, 431, 432, 433, 434, 770, 771, 772, 773, 774, 837, 1041, 1042, 1043, 1044, 1045, 1348], "cumulative_ev": [837, 1348], "cumulative_sal": [626, 837], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 137, 147, 148, 155, 157, 159, 162, 163, 164, 172, 173, 175, 176, 177, 178, 179, 180, 189, 208, 209, 216, 250, 251, 275, 293, 303, 308, 346, 349, 350, 452, 576, 627, 837, 856, 857, 865, 881, 882, 900, 912, 928, 953, 959, 1034, 1036, 1054, 1062, 1217, 1327, 1332, 1348, 1353, 1360, 1376], "cursor": [39, 147, 346], "custom": [1, 28, 40, 41, 57, 58, 59, 60, 103, 141, 178, 180, 214, 255, 270, 332, 346, 395, 443, 472, 475, 576, 584, 585, 647, 748, 762, 798, 799, 837, 863, 887, 936, 953, 1002, 1053, 1086, 1089, 1193, 1201, 1234, 1337, 1348, 1379], "customis": [41, 346], "cut": [633, 837, 1222, 1348], "cxx": 1371, "cypher": 147, "d": [29, 36, 38, 40, 41, 43, 44, 47, 133, 165, 204, 227, 234, 236, 237, 238, 241, 250, 254, 274, 297, 298, 308, 314, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 346, 355, 357, 430, 453, 472, 475, 522, 591, 630, 671, 685, 692, 706, 707, 712, 720, 722, 723, 763, 764, 781, 787, 816, 837, 873, 877, 881, 899, 912, 932, 934, 937, 938, 939, 940, 941, 942, 943, 953, 959, 1029, 1041, 1063, 1086, 1089, 1136, 1160, 1267, 1274, 1288, 1289, 1294, 1302, 1304, 1305, 1316, 1348, 1364, 1366, 1368, 1371, 1372], "d1": [41, 346, 447], "d2": 447, "d3": 447, "d789": [41, 346], "d_4": [712, 1294], "dai": [70, 71, 88, 236, 249, 251, 278, 316, 346, 349, 443, 462, 463, 465, 466, 468, 470, 472, 475, 476, 483, 485, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 762, 775, 776, 777, 778, 779, 780, 781, 824, 825, 837, 877, 882, 902, 953, 959, 1053, 1076, 1077, 1079, 1080, 1082, 1084, 1086, 1089, 1090, 1097, 1099, 1109, 1348, 1372], "dark": 1357, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 64, 69, 70, 71, 73, 84, 85, 87, 88, 97, 100, 104, 106, 109, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 197, 201, 203, 209, 210, 220, 222, 223, 224, 234, 235, 236, 248, 249, 250, 253, 255, 268, 269, 273, 279, 280, 281, 283, 287, 290, 298, 303, 304, 305, 308, 310, 320, 324, 344, 346, 350, 358, 359, 360, 363, 364, 365, 366, 367, 368, 371, 374, 375, 376, 377, 378, 380, 383, 385, 386, 387, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 417, 419, 420, 421, 425, 426, 427, 428, 429, 436, 437, 438, 443, 444, 445, 446, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 492, 497, 508, 510, 511, 512, 516, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 536, 537, 541, 542, 544, 549, 555, 557, 564, 575, 577, 583, 585, 620, 621, 625, 626, 633, 635, 636, 639, 640, 641, 642, 644, 645, 649, 651, 653, 655, 657, 660, 662, 664, 665, 667, 669, 674, 675, 676, 682, 685, 686, 687, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 710, 711, 712, 713, 720, 721, 722, 723, 725, 727, 730, 739, 740, 741, 744, 745, 748, 751, 757, 765, 768, 775, 776, 777, 778, 779, 780, 781, 791, 792, 794, 795, 796, 797, 798, 799, 809, 812, 823, 824, 825, 828, 833, 837, 849, 856, 857, 864, 868, 870, 876, 877, 903, 907, 923, 953, 958, 961, 966, 967, 979, 981, 982, 983, 984, 985, 987, 989, 990, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1022, 1024, 1026, 1027, 1034, 1035, 1036, 1047, 1048, 1053, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1107, 1109, 1113, 1114, 1131, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1156, 1157, 1158, 1159, 1161, 1166, 1172, 1174, 1181, 1192, 1194, 1201, 1215, 1222, 1224, 1228, 1229, 1230, 1232, 1233, 1244, 1246, 1254, 1259, 1264, 1265, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1279, 1280, 1281, 1282, 1283, 1284, 1292, 1293, 1294, 1295, 1302, 1303, 1304, 1305, 1307, 1309, 1312, 1323, 1328, 1329, 1330, 1331, 1334, 1347, 1348, 1357, 1364, 1371, 1376, 1378], "data_bar": [41, 346], "data_bar_2010": [41, 346], "data_label": [41, 346], "data_page_s": [47, 51, 346, 953], "data_source_format": 194, "databas": [39, 128, 147, 148, 346, 849], "databrick": 184, "databricks_format": 192, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 83, 95, 101, 104, 105, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 162, 163, 164, 168, 169, 172, 173, 199, 344, 345, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 833, 837, 849, 858, 859, 861, 863, 865, 868, 870, 874, 877, 881, 882, 883, 884, 885, 887, 891, 892, 896, 901, 903, 910, 912, 917, 918, 919, 920, 922, 925, 929, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 953, 958, 959, 1047, 1048, 1083, 1109, 1131, 1201, 1222, 1278, 1282, 1294, 1295, 1318, 1324, 1325, 1337, 1348, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1379], "dataframeplot": [346, 349], "dataload": [308, 346], "datapoint": [236, 346, 877, 953], "dataset": [15, 47, 74, 145, 146, 149, 150, 156, 159, 160, 165, 250, 308, 346, 534, 837, 849, 881, 887, 953, 1151, 1348, 1377], "datasourceformat": [194, 197], "datat": [41, 346], "datatyp": [38, 48, 130, 132, 133, 134, 136, 138, 152, 154, 155, 157, 158, 163, 164, 176, 177, 179, 220, 229, 346, 417, 495, 671, 741, 764, 783, 797, 833, 837, 849, 868, 953, 958, 959, 1022, 1048, 1102, 1201, 1253, 1331, 1348, 1374], "date": [17, 41, 56, 71, 145, 146, 148, 150, 156, 157, 159, 162, 164, 165, 207, 214, 234, 236, 249, 251, 278, 293, 346, 349, 378, 443, 445, 446, 447, 448, 451, 453, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 544, 626, 646, 649, 651, 653, 655, 657, 660, 662, 664, 720, 722, 741, 762, 776, 777, 779, 780, 787, 795, 797, 823, 837, 855, 863, 877, 882, 902, 953, 959, 985, 1053, 1055, 1056, 1057, 1058, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1109, 1161, 1210, 1211, 1302, 1304, 1331, 1348, 1369, 1372, 1374], "date32": [249, 346], "date_format": [38, 48, 346, 953], "date_min": 465, "date_minus_1y_2mon": 1079, "date_part": 1369, "date_plus_1i": [465, 1079], "date_rang": [251, 316, 346, 451, 453, 466, 474, 485, 779, 780, 882, 953, 1061, 1075, 1080, 1081, 1098, 1099], "date_right": [251, 346, 882, 953], "datetim": [17, 38, 41, 48, 56, 100, 137, 149, 157, 160, 162, 164, 175, 176, 177, 179, 189, 190, 193, 194, 207, 214, 234, 236, 249, 251, 278, 293, 316, 346, 349, 378, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 544, 593, 626, 646, 649, 651, 653, 655, 657, 660, 662, 664, 720, 723, 741, 762, 775, 776, 777, 779, 780, 781, 787, 795, 797, 824, 825, 837, 855, 863, 877, 882, 902, 953, 958, 959, 985, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1109, 1161, 1210, 1211, 1302, 1305, 1329, 1331, 1348, 1371, 1372], "datetime_format": [38, 48, 346, 953], "datetime_rang": [236, 346, 445, 448, 462, 463, 465, 469, 470, 476, 477, 478, 479, 480, 481, 482, 483, 486, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 837, 877, 953, 1054, 1055, 1058, 1062, 1063, 1064, 1069, 1070, 1072, 1074, 1076, 1077, 1078, 1079, 1083, 1084, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097], "datetime_str": 472, "datetimeindex": 135, "david": 1377, "day_nam": [472, 475], "day_of_month": [451, 466, 485], "day_of_year": [451, 466, 485], "daylight": [236, 251, 278, 316, 346, 444, 452, 465, 470, 483, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 781, 824, 825, 837, 877, 882, 902, 953, 1062, 1079, 1084, 1097], "dayofweek": 1372, "dayofyear": 1372, "days_diff": 476, "db": [39, 147, 148, 346], "dbapi2": 147, "dbc": [685, 1267], "dbreadengin": 148, "dbwriteengin": [39, 346], "dbwritemod": [39, 346], "dd": [41, 346, 1371], "ddd": [1, 41, 346, 731, 733, 734], "dddd": 1371, "ddof": [294, 317, 346, 392, 397, 572, 578, 659, 660, 663, 664, 681, 749, 767, 769, 813, 814, 818, 826, 837, 913, 921, 953, 999, 1004, 1189, 1195, 1241, 1243, 1263, 1338, 1348], "ddww": 1371, "de": 1371, "deal": [47, 51, 248, 346, 358, 360, 468, 469, 636, 720, 723, 752, 753, 754, 755, 778, 837, 953, 966, 967, 1082, 1083, 1224, 1302, 1305, 1348], "debug": [30, 887, 953, 1379], "decad": [1357, 1372], "decai": [491, 492, 493, 494, 837, 1108, 1109, 1110, 1111, 1348], "decemb": [475, 1089], "decim": [9, 11, 12, 28, 29, 38, 41, 48, 145, 146, 159, 346, 350, 665, 724, 837, 953, 959, 1244, 1306, 1348, 1370], "decimal_comma": [145, 146, 159], "decimal_separ": [9, 28], "declar": [130, 132, 133, 134, 136, 147, 154, 155, 163, 303, 308, 346, 953, 959, 1357], "decod": [145, 146, 699], "decompos": [312, 346, 918, 953], "decompress": [47, 49, 51, 346, 953], "decor": [55, 57, 58, 59, 60, 175, 179, 255, 346, 585, 837, 848, 849, 1201, 1348], "dedic": [1, 131, 248, 280, 346, 959, 1376], "deem": [214, 346, 863, 953], "deepcopi": [208, 346, 856, 953, 1034, 1348], "def": [1, 55, 57, 58, 59, 60, 147, 173, 175, 179, 199, 269, 310, 346, 355, 630, 689, 692, 717, 751, 798, 837, 859, 895, 953, 959, 1271, 1274, 1379], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 62, 63, 64, 68, 71, 72, 73, 130, 131, 132, 133, 134, 135, 136, 137, 142, 145, 146, 148, 150, 151, 153, 154, 155, 156, 157, 159, 162, 163, 164, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 199, 214, 215, 218, 219, 222, 231, 235, 236, 237, 248, 250, 251, 259, 261, 268, 270, 278, 279, 280, 281, 282, 286, 289, 293, 294, 296, 301, 303, 304, 308, 311, 313, 314, 315, 317, 322, 331, 346, 357, 358, 360, 383, 390, 395, 403, 436, 438, 443, 468, 469, 475, 488, 490, 491, 493, 494, 514, 526, 551, 555, 564, 569, 570, 572, 576, 578, 579, 584, 592, 593, 596, 599, 618, 619, 621, 626, 627, 633, 636, 640, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 667, 670, 672, 681, 682, 691, 698, 710, 715, 716, 717, 720, 722, 723, 725, 727, 748, 749, 752, 754, 757, 761, 762, 766, 767, 769, 776, 777, 778, 779, 780, 781, 784, 787, 791, 792, 793, 795, 796, 797, 803, 809, 812, 815, 818, 819, 821, 824, 825, 826, 828, 837, 858, 859, 863, 864, 866, 867, 869, 876, 877, 881, 882, 891, 896, 898, 902, 906, 908, 909, 912, 913, 917, 919, 920, 921, 926, 928, 935, 953, 957, 959, 966, 967, 990, 997, 1002, 1009, 1035, 1047, 1048, 1053, 1082, 1083, 1089, 1103, 1107, 1108, 1110, 1111, 1129, 1141, 1168, 1172, 1181, 1186, 1187, 1193, 1210, 1211, 1217, 1222, 1224, 1228, 1229, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1246, 1252, 1255, 1263, 1264, 1265, 1273, 1277, 1280, 1292, 1297, 1298, 1299, 1302, 1304, 1305, 1307, 1309, 1327, 1329, 1337, 1338, 1348, 1370, 1371, 1379], "default_match": [683, 695], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [281, 346], "defer": [199, 346, 349, 350, 1348, 1353], "defin": [38, 41, 48, 71, 74, 147, 154, 172, 173, 175, 207, 218, 219, 223, 236, 255, 266, 269, 278, 315, 332, 346, 421, 522, 551, 585, 630, 633, 645, 646, 649, 651, 653, 655, 657, 660, 662, 664, 697, 702, 710, 721, 728, 776, 777, 779, 780, 795, 796, 799, 819, 824, 825, 837, 855, 866, 867, 870, 877, 895, 902, 920, 936, 953, 957, 958, 959, 1027, 1136, 1168, 1201, 1222, 1233, 1279, 1284, 1292, 1303, 1310, 1348], "definit": [41, 75, 346, 534, 837, 958, 959, 1151, 1348], "deflat": [36, 346], "deg": 1373, "degre": [294, 317, 346, 572, 578, 635, 659, 660, 663, 664, 681, 749, 759, 769, 813, 814, 818, 826, 837, 913, 921, 953, 1241, 1243, 1263, 1338, 1348, 1369], "delai": 95, "delet": [74, 1364, 1375], "delimit": [46, 48, 155, 163, 270, 301, 346, 682, 698, 953, 1264, 1280, 1324, 1348], "delta": [40, 149, 160, 192, 294, 317, 346, 572, 578, 659, 660, 663, 664, 681, 749, 769, 813, 814, 818, 826, 837, 849, 913, 921, 953, 1241, 1243, 1263, 1338, 1348], "delta_merge_opt": [40, 346], "delta_table_opt": [149, 160, 189], "delta_table_vers": 189, "delta_write_opt": [40, 346], "deltalak": [40, 149, 160, 167, 189, 346], "deltashar": 192, "deltat": [40, 149, 160, 346], "demo": [41, 346], "demonstr": [145, 505, 837, 959], "dens": [21, 234, 346, 636, 837, 1224, 1348], "densiti": [1348, 1353], "depend": [47, 52, 55, 61, 97, 147, 150, 156, 167, 204, 346, 376, 377, 541, 542, 585, 596, 633, 636, 781, 784, 787, 793, 837, 963, 983, 984, 1158, 1159, 1222, 1224, 1348, 1379], "deploi": [175, 179], "deprec": [40, 65, 145, 146, 172, 173, 174, 175, 179, 182, 205, 261, 304, 322, 327, 346, 450, 486, 507, 603, 640, 682, 690, 750, 759, 767, 768, 837, 852, 869, 891, 906, 919, 925, 926, 931, 953, 1060, 1068, 1069, 1100, 1128, 1228, 1264, 1272, 1329, 1348], "depth": 141, "desc": [959, 1357, 1360, 1364, 1366], "descend": [56, 287, 292, 346, 371, 391, 571, 626, 636, 669, 678, 679, 748, 760, 837, 907, 911, 953, 978, 998, 1148, 1188, 1224, 1250, 1261, 1337, 1348], "describ": [175, 234, 346, 703, 953, 1285, 1348], "descript": [236, 346, 877, 953, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1374, 1377, 1378], "deseri": [141, 286, 346, 507, 599, 837, 906, 953], "deserializ": [215, 286, 346, 438, 599, 837, 864, 906, 953], "design": [303, 308, 346], "desir": [175, 250, 346, 395, 486, 576, 881, 953, 1002, 1100, 1193], "destin": 148, "detail": [61, 131, 147, 148, 168, 170, 203, 236, 315, 346, 475, 741, 837, 877, 920, 928, 953, 1089, 1331, 1348, 1379], "determin": [15, 38, 41, 48, 56, 64, 93, 141, 145, 146, 147, 150, 156, 157, 159, 164, 166, 206, 210, 229, 236, 248, 249, 255, 278, 309, 310, 316, 346, 416, 455, 468, 469, 516, 576, 596, 633, 639, 641, 676, 684, 697, 720, 721, 723, 724, 743, 778, 796, 809, 812, 828, 837, 853, 860, 861, 868, 877, 902, 916, 922, 953, 1065, 1082, 1083, 1131, 1193, 1222, 1228, 1229, 1259, 1266, 1302, 1305, 1306, 1348], "dev": [202, 962, 1241, 1348], "develop": [148, 175, 179], "deviat": [294, 346, 493, 659, 660, 681, 818, 837, 913, 953, 1110, 1263, 1348, 1365], "devic": [303, 346, 858, 869, 896, 909, 928, 953, 1327, 1348], "devicememoryresourc": 928, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 57, 58, 83, 101, 105, 131, 132, 133, 134, 135, 136, 137, 146, 147, 148, 159, 172, 173, 175, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 406, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 833, 837, 877, 902, 918, 920, 933, 936, 944, 953, 959, 1083, 1109, 1278, 1282, 1294, 1295, 1325, 1348, 1353, 1357, 1358, 1359, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1379], "df0": [262, 346, 892, 953, 1363], "df1": [56, 64, 168, 169, 221, 224, 262, 293, 318, 346, 892, 953, 1360, 1362, 1363, 1364, 1376], "df2": [56, 64, 168, 169, 221, 224, 318, 346, 1360, 1362, 1363, 1364, 1376], "df3": [56, 346], "df4": 346, "df5": 346, "df6": 346, "df_a": 1376, "df_a1": 64, "df_a2": 64, "df_a3": 64, "df_agg_nuniqu": [266, 346], "df_b": 1376, "df_current_batch": 146, "df_d1": 64, "df_d2": 64, "df_from_str_repr": [302, 346], "df_h1": 64, "df_h2": 64, "df_new_grid": [520, 837], "df_nuniqu": [266, 346], "df_original_grid": [520, 837], "df_panda": 1358, "df_pd": 131, "df_tempor": [649, 651, 653, 655, 657, 660, 662, 664, 837], "dfi": 203, "diagon": [64, 310, 346], "diagonal_relax": 64, "diagram": [898, 953], "dict": [31, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 57, 59, 61, 130, 132, 133, 134, 135, 136, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 175, 189, 190, 193, 194, 228, 248, 268, 275, 279, 280, 281, 299, 300, 303, 308, 310, 346, 837, 900, 953, 958, 959, 1120, 1348, 1361], "dictat": [142, 465, 837, 1079], "dictionari": [31, 38, 40, 41, 43, 47, 48, 49, 50, 51, 61, 87, 130, 132, 133, 134, 136, 141, 145, 146, 147, 148, 149, 152, 154, 155, 157, 158, 159, 160, 162, 163, 164, 189, 248, 268, 279, 280, 281, 299, 300, 303, 308, 346, 953, 958], "did": [444, 1054], "diff": [320, 346, 476, 477, 478, 479, 480, 481, 482, 565, 837, 923, 953, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1182, 1348], "differ": [41, 47, 100, 103, 124, 145, 150, 165, 168, 170, 199, 218, 224, 236, 237, 248, 250, 270, 278, 280, 281, 300, 303, 304, 310, 346, 439, 451, 465, 466, 469, 475, 484, 490, 505, 514, 546, 565, 567, 576, 585, 618, 619, 621, 626, 640, 641, 720, 746, 784, 787, 793, 837, 850, 866, 867, 869, 877, 881, 902, 953, 957, 959, 1029, 1049, 1061, 1079, 1080, 1083, 1089, 1098, 1105, 1114, 1129, 1163, 1182, 1184, 1201, 1210, 1211, 1213, 1228, 1229, 1302, 1348, 1372, 1374, 1376], "digit": [72, 630, 665, 666, 692, 837, 959, 1244, 1245, 1267, 1274, 1348, 1379], "dimens": [130, 132, 134, 136, 154, 155, 163, 346, 642, 837, 953, 1230, 1329, 1348], "dimension": [132, 134, 136, 304, 346, 953, 1348], "direct": [41, 148, 157, 161, 164, 289, 303, 314, 346, 390, 569, 670, 837, 908, 953, 997, 1186, 1252, 1348], "directli": [6, 31, 41, 63, 64, 147, 175, 179, 199, 281, 303, 346, 491, 493, 494, 641, 812, 837, 859, 953, 1108, 1110, 1111, 1229, 1327, 1348, 1360, 1376, 1379], "directori": [41, 47, 48, 49, 50, 51, 52, 54, 142, 157, 159, 162, 164, 346, 953], "dirpath": [36, 38, 43, 44, 47, 159, 346], "disabl": [47, 51, 55, 96, 97, 157, 162, 176, 248, 346, 858, 953], "disable_string_cach": 97, "disallow": 175, "discard": [227, 274, 346, 501, 837, 873, 899, 953, 1118, 1348], "disco": [694, 696, 1276, 1278], "discont": [694, 696, 1276, 1278], "discourag": [585, 837], "discoveri": [270, 346], "discret": [436, 439, 488, 516, 546, 565, 633, 837, 1047, 1049, 1103, 1131, 1163, 1182, 1222, 1348], "disk": [47, 48, 49, 50, 51, 151, 346, 600, 850, 909, 953], "dispatch": 959, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 214, 234, 346, 863, 869, 953], "distanc": [251, 346, 516, 837, 882, 953, 1131, 1348], "distinct": [41, 179, 268, 270, 324, 346, 396, 525, 526, 528, 577, 636, 645, 781, 837, 1003, 1140, 1141, 1143, 1194, 1224, 1233, 1348, 1365, 1375, 1377, 1379], "distinct_count": [47, 51, 346, 953], "distinguish": [475, 1089], "distribut": [534, 676, 837, 898, 953, 1151, 1259, 1348], "div": 1369, "diverg": [62, 129], "divid": [21, 436, 470, 483, 491, 493, 494, 505, 534, 633, 636, 837, 1047, 1084, 1097, 1108, 1110, 1111, 1151, 1222, 1348, 1365, 1370], "divis": [505, 744, 837, 1370], "divisor": [294, 317, 346, 572, 578, 659, 660, 663, 664, 681, 749, 769, 813, 814, 818, 826, 837, 913, 921, 953, 1241, 1243, 1263, 1338, 1348], "dl": [308, 346], "do": [1, 41, 48, 49, 50, 51, 56, 62, 63, 129, 132, 133, 136, 145, 157, 159, 164, 168, 169, 170, 171, 204, 214, 216, 224, 247, 250, 251, 270, 275, 298, 310, 314, 346, 349, 435, 443, 548, 584, 706, 707, 715, 716, 717, 767, 809, 812, 828, 837, 854, 858, 859, 863, 865, 869, 881, 882, 887, 896, 898, 900, 909, 928, 953, 959, 1046, 1053, 1114, 1165, 1288, 1289, 1297, 1298, 1299, 1332, 1348, 1353], "do_polars_oper": 30, "do_someth": 147, "do_various_th": 199, "doc": [40, 43, 44, 131, 148, 151, 153, 168, 170, 201, 202, 212, 346, 961, 962], "document": [33, 100, 148, 201, 346, 350, 472, 475, 700, 720, 722, 723, 727, 833, 928, 961, 1029, 1086, 1089, 1282, 1302, 1304, 1305, 1309], "doe": [11, 38, 40, 48, 49, 50, 51, 56, 62, 63, 118, 130, 132, 133, 134, 136, 137, 145, 146, 147, 148, 149, 150, 154, 155, 159, 160, 163, 165, 209, 224, 231, 236, 237, 249, 250, 274, 279, 280, 281, 311, 320, 323, 346, 349, 350, 486, 501, 505, 514, 576, 585, 684, 694, 696, 708, 716, 717, 746, 833, 837, 857, 858, 859, 863, 869, 873, 877, 881, 887, 896, 899, 909, 917, 923, 927, 953, 1036, 1100, 1114, 1118, 1129, 1254, 1266, 1276, 1278, 1290, 1348, 1353, 1371], "doesn": [40, 145, 159, 236, 251, 346, 488, 837, 877, 882, 953, 1103, 1348], "dog": [683, 726, 729, 766, 1265, 1308, 1311], "doi": 1372, "dollar": [706, 707, 1288, 1289], "domain": [1, 692, 1274], "don": [64, 236, 251, 255, 311, 314, 346, 435, 548, 585, 626, 837, 877, 882, 917, 953, 959, 1046, 1165, 1201, 1348], "done": [146, 165, 199, 205, 251, 346, 361, 362, 626, 837, 852, 855, 882, 953, 969, 1348], "dot": [56, 600, 833, 837, 898, 909, 953, 1348], "doubl": [305, 346, 706, 707, 1288, 1289], "dow": 1372, "down": [159, 162, 163, 164, 165, 207, 346, 417, 504, 837, 1121, 1348], "download": [155, 159, 162, 163, 600, 909, 953], "downstream": [304, 346, 669, 837, 1250, 1348], "dr": 161, "drago": [697, 1279], "dragon": 697, "dragonfr": 1279, "dragonfruit": [697, 710, 721, 1279, 1292, 1303], "dramat": 150, "draw": [21, 26, 175, 179, 1379], "drawback": 833, "drawfn": 1379, "drawing_charact": 21, "dremio": 147, "driver": [39, 147, 148, 346], "drop": [1, 133, 217, 218, 219, 255, 274, 311, 320, 346, 439, 441, 442, 546, 547, 633, 837, 866, 867, 899, 917, 923, 953, 1049, 1051, 1052, 1163, 1164, 1222, 1348, 1375], "drop_dupl": [311, 346, 917, 953], "drop_empty_col": [150, 156], "drop_empty_row": [150, 156], "drop_first": [301, 346, 1324, 1348], "drop_in_plac": 346, "drop_nan": [346, 442, 837, 953, 1052, 1348], "drop_nul": [346, 441, 837, 953, 1051, 1348], "dset": 165, "dst": [470, 483, 1084, 1097], "dst_offset": [444, 1054], "dt": [1, 41, 56, 150, 156, 278, 346, 646, 781, 837, 846, 902, 953, 959, 1356, 1371, 1372], "dt1": 1371, "dt2": 1371, "dtm": [41, 346, 447, 475, 959, 1057, 1089, 1371], "dtm_iso": 475, "dtm_iso_strict": 475, "dtype": [11, 41, 55, 59, 65, 71, 75, 87, 96, 97, 107, 130, 132, 134, 136, 137, 145, 146, 147, 148, 150, 154, 155, 156, 159, 163, 172, 173, 174, 175, 179, 201, 203, 207, 210, 222, 236, 251, 278, 302, 303, 304, 305, 308, 314, 323, 346, 403, 417, 418, 419, 420, 421, 422, 433, 434, 475, 486, 495, 508, 543, 551, 582, 584, 585, 592, 631, 638, 639, 646, 671, 673, 699, 720, 737, 741, 747, 757, 764, 783, 787, 791, 792, 794, 795, 796, 797, 798, 799, 809, 812, 819, 828, 837, 855, 860, 877, 882, 902, 927, 953, 958, 959, 961, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1034, 1044, 1045, 1048, 1049, 1089, 1100, 1107, 1138, 1156, 1157, 1160, 1168, 1192, 1199, 1201, 1220, 1231, 1253, 1256, 1281, 1302, 1319, 1326, 1327, 1329, 1330, 1331, 1332, 1336, 1348, 1376, 1379], "dtype_format": [41, 346], "dtypekind": 203, "dtypelik": [201, 961], "dtypeoper": [1, 59], "dubiou": 100, "due": [236, 251, 278, 281, 316, 346, 357, 452, 465, 470, 483, 609, 610, 612, 614, 616, 617, 646, 649, 651, 653, 655, 657, 660, 662, 664, 762, 776, 777, 779, 780, 824, 825, 837, 855, 877, 882, 902, 953, 1062, 1079, 1084, 1097], "dummi": [301, 346, 1324, 1348], "dump": 141, "duplic": [56, 105, 243, 250, 251, 252, 311, 315, 346, 357, 523, 609, 633, 837, 881, 882, 883, 917, 920, 953, 1137, 1222, 1348, 1377], "duplicateerror": [633, 837, 1222, 1348], "dur": [252, 346, 883, 953], "durat": [199, 251, 316, 346, 444, 452, 475, 476, 477, 478, 479, 480, 481, 482, 486, 492, 741, 776, 777, 779, 780, 824, 825, 837, 882, 953, 958, 959, 1054, 1062, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1100, 1109, 1329, 1331, 1348], "dure": [55, 104, 145, 146, 159, 199, 224, 346, 1114, 1348], "dutch": [443, 762, 1053], "dynam": [142, 236, 346, 395, 576, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 837, 877, 953, 957, 1002, 1193], "dynamicgroupbi": [236, 346], "e": [11, 34, 36, 38, 40, 43, 44, 47, 48, 141, 145, 151, 153, 157, 162, 164, 165, 177, 215, 227, 234, 238, 247, 251, 254, 297, 298, 304, 314, 346, 355, 438, 488, 492, 495, 522, 579, 585, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 671, 676, 695, 716, 717, 728, 783, 799, 816, 827, 837, 864, 873, 882, 885, 900, 953, 957, 959, 1103, 1109, 1136, 1259, 1277, 1310, 1348, 1366, 1371, 1379], "e101": [41, 346], "e_filt": [596, 598], "e_sum_ov": [596, 598], "e_sum_slic": [596, 598], "each": [38, 41, 48, 53, 54, 56, 65, 72, 83, 146, 147, 150, 155, 163, 168, 169, 170, 171, 173, 211, 213, 220, 227, 234, 235, 236, 249, 251, 255, 268, 270, 274, 278, 280, 282, 303, 308, 312, 315, 316, 324, 325, 327, 329, 331, 332, 340, 346, 371, 416, 420, 421, 436, 470, 483, 501, 525, 528, 554, 557, 564, 574, 581, 585, 633, 636, 644, 645, 652, 656, 667, 672, 679, 692, 696, 697, 701, 702, 710, 712, 713, 721, 728, 743, 757, 760, 766, 791, 792, 796, 819, 827, 837, 858, 861, 862, 868, 873, 877, 882, 896, 899, 902, 918, 920, 929, 931, 933, 935, 936, 944, 953, 978, 1026, 1027, 1033, 1047, 1084, 1097, 1140, 1143, 1171, 1174, 1181, 1191, 1222, 1224, 1232, 1233, 1246, 1255, 1274, 1278, 1279, 1283, 1284, 1292, 1294, 1295, 1303, 1310, 1318, 1348, 1365, 1376, 1377, 1379], "eager": [95, 236, 251, 270, 314, 346, 445, 448, 451, 453, 462, 463, 465, 466, 469, 470, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 649, 651, 653, 655, 657, 660, 662, 664, 757, 761, 776, 777, 779, 780, 787, 791, 792, 795, 796, 809, 812, 815, 816, 819, 824, 825, 828, 836, 837, 877, 882, 887, 953, 958, 1054, 1055, 1058, 1061, 1062, 1063, 1064, 1069, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1376], "eagerli": [576, 1357], "ear": [710, 721, 1292], "earlier": [251, 346, 882, 953], "earliest": [236, 346, 468, 469, 720, 723, 778, 877, 945, 953, 1082, 1083, 1302, 1305], "easi": 199, "easiest": 204, "easili": [56, 284, 308, 320, 325, 346, 819, 833, 904, 923, 929, 953], "east": [74, 164, 252, 346, 883, 953], "ebf1d": [41, 346], "eee": [1, 41, 346, 959], "ef": 707, "effect": [41, 229, 236, 346, 452, 505, 585, 611, 613, 615, 767, 837, 877, 926, 927, 953, 1054, 1062], "effici": [131, 147, 247, 249, 346, 584, 837], "efgh": 1371, "eg": [18, 26, 27, 41, 64, 148, 199, 303, 346, 470, 720, 723, 744, 837, 959, 1302, 1305], "egnaro": 1371, "either": [62, 63, 87, 142, 175, 246, 250, 251, 252, 268, 278, 279, 303, 304, 346, 492, 584, 631, 633, 646, 720, 752, 760, 764, 819, 837, 858, 859, 881, 882, 883, 885, 902, 953, 957, 959, 1109, 1220, 1222, 1302, 1348, 1361, 1379], "element": [14, 15, 26, 170, 171, 174, 175, 177, 179, 204, 206, 213, 246, 270, 279, 292, 294, 309, 317, 346, 363, 364, 365, 366, 367, 368, 379, 380, 415, 416, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 441, 442, 496, 497, 501, 514, 518, 526, 537, 545, 547, 548, 549, 552, 557, 565, 566, 567, 568, 572, 578, 580, 581, 584, 585, 626, 627, 636, 639, 647, 648, 650, 652, 654, 656, 658, 659, 661, 663, 668, 673, 674, 675, 679, 680, 681, 712, 713, 724, 739, 740, 742, 743, 749, 760, 769, 795, 813, 814, 818, 826, 837, 853, 862, 911, 913, 916, 921, 953, 970, 971, 972, 973, 974, 975, 986, 987, 1021, 1031, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1051, 1052, 1112, 1113, 1118, 1119, 1130, 1133, 1141, 1150, 1152, 1154, 1155, 1162, 1164, 1165, 1166, 1169, 1174, 1182, 1183, 1184, 1185, 1197, 1198, 1201, 1217, 1224, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1248, 1256, 1257, 1258, 1262, 1263, 1294, 1295, 1306, 1320, 1321, 1322, 1326, 1333, 1334, 1338, 1348, 1365, 1366], "elementwis": [584, 626, 647, 648, 650, 652, 654, 656, 659, 661, 663, 837, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1348], "elif": 827, "elig": [887, 953], "elimin": [62, 129, 534, 837, 1151, 1348], "elis": [262, 346, 892, 953], "ellips": 21, "ellipsi": [234, 346], "elppa": 1371, "els": [146, 827], "email": [692, 1274], "email_part": [692, 1274], "emphas": [346, 350], "emploi": 959, "empti": [14, 36, 38, 48, 109, 133, 145, 146, 150, 156, 159, 208, 209, 236, 261, 313, 346, 682, 690, 797, 815, 856, 857, 877, 891, 919, 953, 958, 959, 1034, 1036, 1119, 1138, 1152, 1264, 1272, 1348], "en": [21, 41, 346], "enabl": [29, 30, 47, 51, 55, 62, 63, 96, 97, 149, 157, 160, 162, 164, 168, 169, 170, 171, 183, 201, 284, 305, 320, 346, 358, 360, 640, 641, 669, 684, 694, 696, 708, 748, 833, 837, 858, 859, 869, 896, 904, 909, 923, 953, 961, 966, 967, 1228, 1229, 1250, 1266, 1276, 1278, 1290, 1330, 1337, 1348], "enable_string_cach": 96, "enclos": [507, 837], "encod": [68, 74, 86, 141, 145, 146, 159, 301, 346, 349, 400, 507, 644, 686, 732, 837, 1006, 1232, 1268, 1324, 1348, 1353], "encount": [120, 145, 146, 159, 236, 346, 618, 619, 699, 700, 767, 771, 785, 837, 877, 953, 1210, 1211, 1281, 1282, 1348], "end": [38, 41, 48, 145, 146, 159, 236, 270, 346, 399, 402, 405, 418, 422, 444, 470, 495, 570, 683, 688, 692, 697, 704, 710, 714, 715, 716, 719, 757, 762, 775, 776, 777, 778, 779, 780, 783, 791, 792, 795, 796, 824, 825, 827, 833, 837, 877, 896, 953, 959, 1008, 1023, 1028, 1054, 1084, 1148, 1187, 1270, 1274, 1279, 1286, 1292, 1296, 1297, 1298, 1303, 1348, 1371], "endian": [403, 1009], "endpoint": [184, 436, 633, 795, 837, 1047, 1222, 1348], "ends_a": 1371, "ends_in_digit": 1371, "ends_with": [399, 405, 422, 683, 714, 959, 1028, 1296, 1369], "ends_with_expr": 402, "ends_with_lit": 402, "engin": [10, 15, 39, 48, 49, 50, 51, 62, 63, 95, 140, 147, 148, 150, 156, 181, 235, 250, 255, 304, 311, 332, 346, 584, 816, 837, 858, 859, 869, 876, 881, 887, 891, 896, 909, 917, 928, 936, 950, 953, 957, 1201, 1329, 1348, 1360, 1376], "engine_opt": [39, 150, 346], "enginetyp": [48, 49, 50, 51, 62, 63, 858, 859, 869, 896, 909, 953], "enough": [548, 676, 837, 1165, 1259, 1348], "ensur": [11, 41, 52, 54, 95, 142, 148, 174, 177, 201, 227, 235, 268, 270, 274, 279, 304, 346, 522, 584, 837, 873, 876, 887, 899, 928, 953, 959, 961, 1329, 1348], "enter": 199, "entir": [41, 150, 156, 346], "entri": [199, 346, 953, 958, 1376], "entropi": [837, 1348], "enumer": [74, 135, 145, 146, 150, 156, 159, 249, 346], "env": [4, 180], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 142, 155, 157, 159, 162, 163, 164, 178, 181, 184, 189, 303, 346, 858, 859, 869, 896, 909, 953], "eol_char": [145, 146, 159], "eparg": 1371, "epoch": [70, 71, 787, 1372], "epoch_": [453, 1063], "epoch_n": [453, 1063], "epochtimeunit": [453, 787, 1063], "eq": [227, 274, 346, 490, 501, 837, 873, 899, 953, 1105, 1348], "eq_miss": [837, 1213, 1348], "equal": [55, 97, 145, 146, 159, 168, 169, 170, 171, 236, 251, 252, 262, 292, 346, 436, 483, 489, 490, 510, 536, 576, 621, 633, 639, 647, 648, 650, 652, 654, 656, 659, 661, 663, 679, 704, 705, 708, 730, 760, 795, 813, 814, 827, 833, 837, 873, 877, 882, 883, 892, 899, 911, 953, 1047, 1084, 1105, 1193, 1213, 1222, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1286, 1287, 1290, 1312, 1348, 1365, 1368, 1379], "equival": [41, 64, 130, 132, 133, 134, 136, 154, 155, 163, 236, 246, 266, 346, 355, 359, 421, 489, 490, 492, 505, 510, 512, 536, 583, 605, 607, 620, 621, 622, 625, 631, 702, 726, 728, 729, 736, 744, 751, 837, 877, 953, 1027, 1104, 1105, 1109, 1124, 1126, 1150, 1153, 1200, 1212, 1213, 1284, 1308, 1310, 1311, 1348, 1358, 1366, 1378], "err": 693, "error": [15, 40, 63, 64, 95, 115, 119, 121, 132, 133, 136, 140, 145, 146, 150, 157, 159, 164, 251, 270, 279, 304, 346, 357, 382, 383, 400, 443, 551, 553, 555, 576, 609, 641, 683, 686, 691, 693, 695, 699, 700, 720, 722, 723, 727, 837, 855, 859, 882, 928, 936, 953, 989, 990, 1006, 1053, 1168, 1170, 1172, 1229, 1265, 1268, 1273, 1275, 1277, 1281, 1282, 1302, 1304, 1305, 1309, 1329, 1348, 1374], "escap": [98, 145, 146, 148, 159, 689, 706, 707, 1271, 1288, 1289], "esp": 15, "especi": [173, 645, 837, 953, 1233, 1348], "espresso": 959, "est": 779, "establish": [147, 199], "estim": [145, 146, 205, 222, 346, 362, 493, 494, 534, 756, 837, 852, 953, 969, 1107, 1110, 1111, 1151, 1348], "estimated_s": [346, 1348], "etc": [22, 40, 41, 142, 145, 149, 150, 151, 153, 160, 161, 346, 585, 837, 959, 1247, 1249, 1348, 1372], "eu": [160, 161], "eur": [234, 346, 1379], "europ": [448, 452, 469, 1058, 1062, 1083], "eval": [302, 346, 584, 585, 782, 837, 1201, 1326, 1348], "evalu": [48, 49, 50, 51, 164, 225, 227, 251, 274, 346, 359, 372, 374, 375, 407, 408, 409, 410, 412, 413, 435, 501, 519, 539, 540, 576, 625, 626, 752, 754, 757, 761, 776, 777, 779, 780, 782, 791, 792, 795, 796, 809, 812, 815, 819, 824, 825, 827, 828, 837, 858, 873, 879, 881, 882, 899, 953, 979, 981, 982, 1013, 1014, 1015, 1016, 1018, 1019, 1046, 1118, 1156, 1157, 1339, 1348, 1368], "even": [38, 48, 145, 250, 346, 492, 630, 633, 837, 881, 953, 959, 1109, 1222, 1348], "evenli": [236, 346, 795, 796, 877, 953], "event": [63, 859, 953], "eventu": [39, 346], "ever": [626, 837], "everi": [15, 38, 48, 145, 146, 150, 156, 159, 230, 236, 300, 316, 346, 374, 375, 376, 377, 380, 382, 388, 431, 432, 433, 434, 435, 470, 483, 497, 509, 541, 542, 546, 549, 552, 553, 554, 562, 565, 570, 574, 645, 690, 771, 772, 837, 875, 877, 953, 981, 982, 983, 984, 987, 989, 995, 1042, 1043, 1044, 1045, 1046, 1084, 1097, 1113, 1123, 1158, 1159, 1163, 1166, 1169, 1170, 1171, 1179, 1182, 1187, 1191, 1233, 1272, 1348], "everybodi": [684, 708, 1266, 1290], "everyth": 959, "ew": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "ewm_mean": [837, 1348], "ewm_mean_bi": [837, 1348], "ewm_std": [837, 1348], "ewm_var": [837, 1348], "ewma": [492, 837, 1109, 1348], "exact": [170, 173, 175, 179, 251, 290, 346, 362, 505, 690, 718, 719, 720, 722, 723, 744, 837, 882, 953, 1272, 1302, 1304, 1305], "exactli": [132, 133, 136, 168, 169, 170, 171, 174, 175, 179, 346, 712, 713, 718, 719, 781, 953, 1254, 1294, 1295, 1300, 1301, 1348], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 837, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 958, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1348, 1353, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1377, 1378], "exc_tb": 1376, "exc_typ": 1376, "exc_val": 1376, "exce": [234, 346], "excel": [37, 41, 144, 150, 346, 849], "excelspreadsheetengin": 150, "except": [0, 216, 231, 238, 251, 254, 275, 297, 346, 641, 697, 721, 783, 837, 849, 865, 882, 900, 953, 959, 1022, 1130, 1155, 1229, 1279, 1303, 1320, 1329, 1348, 1375], "exclud": [175, 179, 236, 346, 416, 431, 434, 443, 522, 592, 743, 762, 833, 837, 877, 953, 959, 1053, 1136, 1348], "excluded_dtyp": [175, 176, 179], "exclus": [279, 346, 751, 757, 791, 792, 837], "execut": [10, 40, 48, 49, 50, 51, 55, 62, 63, 64, 95, 142, 147, 148, 253, 293, 346, 438, 548, 748, 816, 837, 854, 858, 859, 864, 869, 887, 896, 898, 909, 912, 928, 953, 1165, 1337, 1348, 1358, 1359, 1360, 1362, 1376, 1378], "execute_glob": 1376, "execute_opt": [147, 148], "exist": [1, 39, 40, 41, 42, 56, 74, 105, 149, 157, 160, 164, 175, 216, 231, 270, 275, 310, 315, 320, 321, 346, 357, 399, 402, 405, 447, 469, 706, 707, 765, 837, 861, 865, 868, 900, 903, 920, 922, 923, 924, 953, 959, 1057, 1083, 1288, 1289, 1378], "existing_t": 1378, "existing_table_path": [40, 346], "exit": [55, 96, 199, 1363, 1376], "exp": [491, 492, 493, 494, 837, 1108, 1109, 1110, 1111, 1348, 1369], "exp_a": 1370, "expand": [142, 145, 157, 159, 164, 497, 590, 594, 639, 734, 837, 959, 1113, 1348], "expand_selector": 959, "expans": 731, "expect": [38, 40, 43, 47, 48, 49, 50, 51, 54, 72, 78, 110, 118, 126, 145, 147, 149, 155, 157, 159, 160, 162, 163, 164, 169, 171, 189, 346, 576, 585, 797, 837, 885, 887, 953], "expens": [145, 146, 155, 157, 159, 163, 164, 178, 180, 248, 255, 279, 280, 281, 310, 311, 346, 585, 837, 861, 863, 868, 903, 917, 922, 953, 1114, 1201, 1348, 1379], "experiment": [252, 308, 346, 795, 796, 883, 923, 953], "expiri": [38, 40, 43, 47, 48, 49, 50, 51, 149, 155, 157, 159, 160, 162, 163, 164, 189, 346, 953], "explain": [129, 204, 253, 346, 858, 953, 1375], "explainformat": [869, 953], "explicit": [41, 104, 147, 159, 173, 293, 315, 346, 475, 811, 912, 920, 953, 1089], "explicitli": [74, 104, 148, 173, 175, 199, 231, 250, 346, 640, 819, 837, 848, 881, 953, 1376], "explod": [142, 346, 416, 503, 626, 642, 743, 837, 953, 1230, 1348, 1366], "explor": [214, 346, 863, 953], "expon": [631, 837, 1220, 1348, 1370], "exponenti": [491, 492, 493, 494, 496, 631, 837, 1108, 1109, 1110, 1111, 1112, 1348, 1370], "export": [41, 43, 44, 49, 202, 248, 249, 280, 281, 298, 300, 303, 346, 833, 953, 959, 962, 1323, 1348], "expos": 849, "expr": [1, 52, 54, 56, 57, 58, 59, 60, 140, 142, 223, 225, 226, 250, 251, 252, 266, 270, 279, 284, 285, 303, 308, 320, 321, 346, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 832, 833, 837, 838, 839, 842, 843, 844, 845, 846, 870, 871, 872, 881, 882, 883, 897, 904, 905, 923, 924, 953, 959, 1046, 1079, 1104, 1105, 1109, 1116, 1117, 1122, 1124, 1126, 1153, 1165, 1171, 1187, 1191, 1200, 1212, 1213, 1265, 1270, 1277, 1296, 1348, 1374], "expr1": [1368, 1376], "expr2": [1368, 1376], "expr_unique_subset": [266, 346], "express": [0, 8, 48, 49, 50, 51, 52, 54, 62, 63, 129, 140, 142, 172, 175, 179, 206, 223, 225, 227, 235, 241, 250, 251, 255, 266, 270, 274, 279, 284, 285, 289, 292, 303, 308, 309, 320, 321, 323, 325, 332, 346, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 371, 372, 376, 377, 378, 379, 380, 383, 394, 399, 400, 401, 402, 403, 404, 405, 416, 418, 420, 421, 422, 425, 426, 427, 428, 429, 435, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 492, 495, 497, 498, 500, 501, 505, 507, 508, 510, 511, 512, 513, 519, 522, 523, 524, 525, 526, 527, 528, 536, 537, 541, 542, 544, 545, 548, 549, 555, 557, 575, 576, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 605, 607, 609, 610, 612, 614, 616, 617, 620, 621, 623, 625, 626, 630, 631, 632, 633, 635, 639, 640, 641, 642, 644, 645, 667, 668, 669, 672, 674, 675, 677, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 706, 707, 708, 710, 711, 712, 713, 721, 725, 735, 736, 739, 740, 743, 744, 745, 747, 748, 750, 751, 752, 753, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 806, 809, 811, 812, 813, 814, 815, 817, 819, 821, 823, 824, 825, 827, 828, 833, 836, 849, 853, 858, 859, 869, 870, 873, 876, 881, 882, 896, 899, 904, 905, 908, 909, 911, 916, 923, 924, 925, 927, 929, 936, 953, 959, 986, 1035, 1046, 1053, 1057, 1089, 1104, 1105, 1109, 1115, 1124, 1126, 1136, 1153, 1162, 1165, 1200, 1201, 1212, 1213, 1228, 1229, 1248, 1252, 1265, 1266, 1267, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1288, 1289, 1290, 1303, 1307, 1348, 1366, 1368, 1370, 1371, 1375], "exprmetanamespac": [589, 595], "ext": 147, "extend": [0, 133, 318, 346, 498, 837, 849, 957, 968, 1115, 1348], "extend_const": [837, 1348], "extens": [305, 346, 1330, 1348], "extern": [196, 925, 953], "external_shallow_clon": 196, "extra": [40, 142, 145, 146, 149, 151, 153, 157, 159, 160, 161, 164, 224, 236, 346, 837, 877, 953, 1114, 1348], "extract": [137, 204, 293, 346, 446, 449, 451, 454, 456, 457, 458, 459, 460, 461, 464, 466, 467, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 630, 692, 693, 694, 699, 700, 710, 712, 837, 1056, 1059, 1060, 1061, 1064, 1066, 1070, 1071, 1072, 1074, 1075, 1078, 1080, 1081, 1085, 1087, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1101, 1274, 1275, 1276, 1281, 1282, 1292, 1369], "extract_mani": [696, 1278], "extract_numb": [630, 837], "extracted_nr": 692, "extrem": [498, 647, 837, 1115, 1234, 1348], "extrema": [671, 837, 1253, 1348], "f": [57, 146, 147, 227, 234, 249, 298, 304, 310, 314, 346, 355, 395, 404, 576, 671, 690, 720, 723, 765, 837, 873, 953, 959, 1002, 1193, 1272, 1302, 1305, 1348, 1353, 1366], "f32": [1, 59, 207, 293, 302, 308, 346, 671, 816, 837, 855, 912, 953, 959, 1199, 1348, 1374], "f4": [304, 346], "f5ed2452": [41, 346], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 56, 58, 60, 64, 83, 95, 131, 133, 154, 165, 172, 175, 207, 208, 209, 212, 214, 215, 216, 218, 220, 225, 226, 229, 233, 234, 235, 236, 241, 242, 250, 251, 257, 258, 259, 260, 264, 270, 271, 272, 291, 292, 294, 296, 308, 317, 320, 325, 328, 330, 333, 334, 335, 336, 338, 339, 346, 354, 357, 363, 364, 365, 366, 367, 368, 386, 392, 397, 404, 417, 423, 424, 426, 427, 428, 436, 437, 441, 442, 471, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 504, 505, 510, 512, 520, 521, 529, 530, 531, 532, 534, 536, 548, 559, 560, 572, 578, 579, 580, 581, 583, 586, 587, 588, 604, 607, 609, 618, 619, 620, 621, 627, 631, 633, 634, 635, 636, 640, 641, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 673, 674, 675, 676, 680, 681, 735, 739, 740, 744, 749, 758, 759, 763, 765, 767, 769, 782, 783, 795, 796, 799, 802, 803, 804, 816, 818, 826, 833, 837, 855, 856, 863, 865, 866, 871, 872, 876, 877, 880, 881, 882, 889, 890, 897, 911, 913, 921, 923, 925, 929, 932, 934, 937, 938, 939, 940, 942, 943, 953, 959, 970, 971, 972, 973, 974, 975, 993, 999, 1004, 1010, 1031, 1032, 1037, 1038, 1039, 1047, 1048, 1051, 1052, 1085, 1108, 1109, 1110, 1111, 1112, 1116, 1121, 1131, 1134, 1135, 1165, 1176, 1177, 1189, 1195, 1196, 1197, 1198, 1217, 1220, 1222, 1224, 1229, 1234, 1236, 1237, 1239, 1240, 1241, 1243, 1244, 1245, 1256, 1257, 1258, 1262, 1321, 1322, 1336, 1348, 1357, 1365, 1366, 1370, 1373, 1376, 1379], "f_string": 786, "fa1e": [725, 1307], "face": [38, 43, 47, 48, 49, 50, 51, 155, 157, 159, 162, 163, 164, 189, 346, 953], "facil": 147, "facilit": [210, 346], "factor": [491, 493, 494, 741, 837, 1108, 1110, 1111, 1331, 1348], "fail": [38, 39, 40, 43, 47, 48, 49, 50, 51, 131, 149, 151, 155, 157, 159, 160, 162, 163, 164, 189, 203, 304, 311, 346, 372, 473, 576, 720, 722, 723, 727, 837, 917, 953, 1201, 1302, 1304, 1305, 1309, 1329, 1348, 1374], "fall": [164, 436, 633, 837, 858, 869, 896, 909, 928, 953, 1047, 1222, 1348, 1365], "fallback": [131, 150], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 56, 62, 63, 64, 129, 131, 132, 133, 135, 136, 137, 140, 142, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 203, 206, 207, 208, 209, 214, 221, 227, 229, 233, 234, 235, 236, 240, 241, 243, 244, 245, 248, 250, 251, 253, 258, 259, 265, 266, 268, 270, 271, 274, 279, 280, 281, 282, 284, 287, 290, 292, 293, 296, 299, 301, 304, 305, 309, 310, 311, 315, 316, 318, 320, 328, 330, 333, 334, 336, 339, 346, 358, 359, 360, 371, 374, 375, 378, 382, 383, 391, 396, 399, 402, 405, 416, 417, 418, 422, 430, 431, 432, 433, 434, 435, 436, 443, 455, 471, 488, 489, 490, 491, 493, 494, 512, 513, 516, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 539, 540, 544, 548, 551, 553, 555, 564, 571, 576, 577, 583, 584, 585, 589, 591, 592, 593, 595, 597, 600, 601, 620, 621, 623, 625, 626, 628, 629, 633, 636, 647, 648, 650, 652, 654, 656, 658, 659, 661, 663, 667, 669, 671, 676, 678, 679, 682, 683, 684, 685, 688, 694, 695, 696, 698, 699, 706, 707, 708, 711, 712, 714, 720, 722, 723, 725, 743, 745, 748, 751, 752, 753, 754, 755, 757, 760, 761, 762, 766, 767, 770, 771, 776, 777, 779, 780, 791, 792, 795, 796, 797, 803, 809, 812, 815, 816, 819, 821, 824, 825, 827, 828, 837, 853, 855, 856, 857, 858, 859, 863, 869, 873, 876, 877, 881, 882, 885, 887, 896, 899, 904, 907, 909, 911, 912, 916, 917, 920, 923, 928, 932, 934, 937, 938, 940, 943, 953, 958, 959, 966, 967, 978, 981, 982, 985, 989, 990, 998, 1003, 1005, 1006, 1008, 1011, 1022, 1023, 1025, 1028, 1030, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1053, 1065, 1085, 1105, 1106, 1108, 1110, 1111, 1118, 1120, 1125, 1127, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1156, 1157, 1161, 1165, 1168, 1170, 1172, 1181, 1188, 1194, 1207, 1213, 1215, 1218, 1219, 1222, 1224, 1225, 1226, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1250, 1254, 1259, 1261, 1264, 1265, 1266, 1267, 1270, 1276, 1277, 1278, 1280, 1281, 1288, 1289, 1290, 1293, 1294, 1296, 1302, 1304, 1305, 1307, 1324, 1329, 1330, 1334, 1337, 1339, 1348, 1358, 1360, 1366, 1371, 1376], "far": [41, 346], "fashion": [250, 346], "fast": [47, 49, 51, 142, 178, 180, 346, 498, 669, 837, 953, 957, 1115, 1250, 1348, 1379], "fast_executemani": [39, 346], "faster": [48, 49, 50, 51, 62, 63, 129, 147, 150, 224, 304, 314, 346, 585, 746, 837, 858, 859, 869, 896, 909, 953, 1114, 1201, 1348], "fastexcel": [150, 167], "favor": [39, 346], "fay": 141, "feat1": [303, 308, 346], "feat2": [303, 308, 346], "feather": [43, 151, 162, 346, 849], "featur": [1, 47, 61, 72, 78, 303, 308, 346], "feature_0": [925, 953], "feature_0_train": [925, 953], "feature_1": [925, 953], "feature_nam": [308, 346], "feb": [167, 1371], "februari": 1371, "fed": 716, "feel": [684, 708, 1266, 1290], "fetch": [139, 858, 953], "fetch_california_h": [308, 346], "few": [234, 346], "fewer": [697, 721, 953, 1279, 1303], "ff": 1365, "ff00": [725, 1307], "fff": 1, "ffff00": [400, 401, 686, 1006, 1007, 1268], "ffffff": [41, 346], "ffi": [222, 346, 1107, 1348], "fgg": 959, "fghi": 1371, "fh": 146, "fiction": 1357, "field": [37, 38, 40, 48, 87, 122, 125, 133, 312, 346, 395, 576, 584, 585, 611, 613, 615, 644, 692, 693, 699, 712, 713, 733, 734, 735, 741, 748, 771, 772, 798, 819, 837, 918, 953, 1002, 1193, 1201, 1232, 1275, 1294, 1295, 1316, 1318, 1331, 1348, 1372], "field_0": [395, 576, 1002, 1193], "field_1": [395, 576, 1002, 1193], "field_2": [1002, 1193], "field_n": [395, 576, 1002, 1193], "field_nam": [585, 837, 1201, 1348], "fiftyf": [518, 837], "figsiz": [600, 896, 909, 953], "figur": [600, 666, 837, 909, 953, 1245, 1348], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 215, 224, 286, 346, 438, 507, 599, 603, 837, 864, 906, 953, 957, 1114, 1348], "file_cache_ttl": [155, 159, 162, 163], "filenam": 151, "filesourc": [150, 156, 157, 164], "filesystem": [40, 149, 160, 161, 346], "fill": [56, 64, 208, 225, 226, 289, 314, 346, 350, 398, 431, 434, 499, 500, 506, 520, 521, 648, 650, 652, 654, 656, 659, 661, 663, 670, 786, 809, 812, 828, 837, 871, 872, 908, 925, 953, 1116, 1117, 1134, 1135, 1214, 1235, 1236, 1238, 1241, 1242, 1243, 1252, 1348], "fill_char": [704, 705, 1286, 1287], "fill_nan": [226, 346, 500, 837, 872, 953, 1117, 1348], "fill_nul": [56, 225, 346, 499, 837, 871, 925, 953, 1116, 1348], "fill_valu": [289, 314, 346, 670, 837, 908, 953, 1252, 1348], "fillnullstrategi": [226, 346, 500, 837, 872, 953, 1117, 1348], "film": 1357, "filter": [1, 48, 49, 50, 51, 57, 62, 63, 95, 129, 140, 159, 160, 164, 165, 218, 219, 243, 244, 245, 270, 274, 332, 346, 418, 422, 596, 598, 688, 714, 750, 775, 778, 785, 815, 816, 827, 837, 858, 859, 866, 867, 869, 879, 896, 899, 909, 912, 936, 953, 959, 1249, 1348, 1364], "final": [14, 41, 56, 142, 164, 251, 253, 346, 491, 493, 494, 837, 863, 882, 953, 1108, 1110, 1111, 1348, 1377], "find": [64, 232, 346, 518, 668, 683, 684, 696, 837, 1133, 1248, 1266, 1278, 1288, 1348], "find_pat": 695, "fine": [858, 869, 896, 909, 950, 953], "finish": [224, 346, 1114, 1348], "finit": [524, 744, 767, 837, 1139, 1348], "first": [47, 56, 145, 146, 150, 151, 153, 156, 157, 159, 164, 168, 169, 170, 171, 204, 234, 236, 238, 250, 251, 254, 255, 265, 269, 270, 278, 297, 301, 302, 310, 311, 316, 323, 329, 346, 371, 373, 382, 435, 439, 463, 465, 470, 486, 505, 515, 518, 525, 538, 546, 548, 553, 554, 576, 584, 585, 597, 606, 630, 631, 646, 668, 679, 683, 690, 691, 695, 697, 699, 700, 706, 707, 721, 728, 763, 764, 771, 785, 789, 827, 833, 837, 877, 878, 881, 882, 886, 895, 902, 917, 925, 927, 933, 953, 959, 978, 989, 1046, 1048, 1049, 1077, 1079, 1084, 1100, 1130, 1133, 1140, 1155, 1163, 1165, 1170, 1171, 1193, 1201, 1248, 1261, 1272, 1273, 1275, 1277, 1279, 1281, 1282, 1288, 1289, 1303, 1310, 1320, 1324, 1326, 1329, 1348, 1368, 1369, 1371, 1377, 1379], "first_column": [41, 346], "first_non_nul": [576, 1193], "first_part": [712, 713, 1294, 1295], "fisher": [534, 676, 837, 1151, 1259, 1348], "fit": [141, 248, 290, 314, 346, 671, 812, 837, 1253, 1254, 1348], "five": [307, 346, 1379], "fix": [11, 65, 74, 173, 486, 781, 796, 1100], "flag": [61, 149, 160, 172, 287, 304, 346, 669, 683, 691, 692, 695, 706, 707, 837, 869, 887, 907, 953, 959, 1250, 1265, 1273, 1274, 1277, 1288, 1289, 1329, 1348, 1371], "flat": [141, 281, 346, 549, 642, 837, 1166, 1230, 1348], "flatten": 837, "flavour": [41, 147, 346], "flight": 147, "flight_sql": 147, "flightsql": 147, "float": [11, 12, 38, 41, 48, 76, 77, 145, 146, 159, 165, 168, 169, 170, 171, 172, 175, 179, 203, 214, 218, 222, 225, 251, 272, 282, 303, 304, 338, 346, 378, 424, 436, 441, 442, 471, 488, 489, 490, 491, 493, 494, 499, 504, 505, 510, 512, 520, 524, 527, 529, 530, 531, 532, 536, 544, 564, 579, 583, 586, 600, 604, 618, 619, 620, 621, 631, 633, 634, 647, 648, 650, 652, 654, 656, 657, 659, 661, 663, 665, 667, 673, 744, 810, 812, 837, 863, 866, 871, 882, 897, 909, 942, 953, 959, 985, 1022, 1032, 1047, 1048, 1050, 1051, 1052, 1085, 1103, 1107, 1108, 1110, 1111, 1116, 1121, 1131, 1151, 1161, 1181, 1196, 1210, 1211, 1220, 1221, 1222, 1223, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1246, 1249, 1256, 1259, 1263, 1319, 1329, 1338, 1348, 1376, 1379], "float16": [308, 346], "float32": [1, 11, 38, 48, 59, 207, 229, 302, 303, 304, 308, 346, 492, 837, 855, 953, 959, 1109, 1138, 1199, 1327, 1329, 1332, 1348], "float4": [293, 346, 816, 912, 953, 1374], "float64": [11, 38, 41, 48, 95, 133, 145, 154, 172, 175, 210, 220, 222, 229, 283, 308, 320, 346, 363, 364, 365, 366, 367, 368, 404, 417, 426, 427, 428, 437, 471, 492, 495, 529, 530, 635, 674, 675, 739, 740, 783, 799, 809, 812, 828, 833, 837, 860, 868, 903, 923, 953, 958, 959, 1085, 1109, 1330, 1336, 1348], "float_list": 83, "float_precis": [9, 11, 28, 38, 41, 48, 346, 953], "float_scientif": [38, 48, 346, 953], "floatfmt": 12, "floor": [58, 505, 837, 1348, 1369], "floor_a": 1370, "floordiv": [744, 837], "fmt": [12, 251, 346, 519, 786, 837, 879, 882, 953], "fmt_number": [346, 350], "fmt_str_length": [13, 776, 777, 779, 780], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 346], "fn": [771, 772, 785, 811], "foggi": [706, 707, 1288, 1289], "fold": [346, 597, 763, 771, 772, 811], "folder": 165, "follow": [41, 47, 61, 140, 145, 146, 147, 149, 150, 156, 159, 160, 161, 236, 251, 255, 269, 278, 304, 316, 346, 465, 470, 483, 492, 584, 630, 631, 636, 646, 649, 651, 653, 655, 657, 658, 660, 662, 664, 673, 733, 744, 759, 776, 777, 779, 780, 799, 824, 825, 827, 829, 830, 832, 837, 838, 839, 842, 844, 845, 846, 877, 882, 895, 902, 953, 959, 1079, 1084, 1097, 1109, 1220, 1224, 1247, 1249, 1256, 1329, 1340, 1342, 1344, 1348, 1349, 1354, 1355, 1356, 1374, 1379], "font": [41, 346], "font_color": [41, 346], "font_siz": [41, 346], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 141, 154, 155, 207, 210, 211, 212, 216, 217, 218, 219, 220, 221, 224, 227, 229, 231, 232, 233, 237, 238, 239, 240, 241, 242, 244, 250, 254, 255, 256, 257, 258, 259, 260, 263, 264, 267, 270, 272, 274, 275, 276, 279, 282, 283, 284, 286, 288, 291, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 310, 311, 312, 317, 318, 319, 324, 346, 419, 436, 438, 465, 509, 515, 519, 538, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 633, 642, 682, 685, 687, 690, 692, 693, 698, 709, 711, 713, 715, 716, 717, 718, 719, 726, 729, 738, 756, 767, 768, 769, 784, 788, 789, 790, 793, 794, 800, 802, 804, 805, 807, 808, 810, 815, 818, 822, 826, 827, 833, 837, 855, 860, 861, 865, 866, 867, 868, 873, 879, 880, 881, 894, 899, 900, 903, 904, 917, 918, 922, 925, 953, 958, 959, 1024, 1047, 1079, 1172, 1220, 1222, 1230, 1267, 1269, 1272, 1274, 1275, 1291, 1295, 1300, 1301, 1308, 1311, 1348, 1362, 1364, 1365, 1366, 1368, 1371, 1374], "foo1": 1371, "foo11": [229, 346], "foo_": [594, 711, 786], "foo_1": [301, 346], "foo_2": [301, 346], "foo_3_4": 1371, "foo_a": [270, 346], "foo_a_bar_1": 786, "foo_at_1": 1366, "foo_b": [270, 346], "foo_b_bar_2": 786, "foo_bar": [589, 595, 711, 797, 1362], "foo_bar2": [589, 595], "foo_bar_baz": 711, "foo_c_bar_3": 786, "foo_low": [726, 1371], "foo_mean": 1366, "foo_q25": 1365, "foo_q50": 1365, "foo_q75": 1365, "foo_std": 1365, "foo_strip": 715, "foo_strip_end": 716, "foo_strip_start": 717, "foo_sum": [1365, 1366], "foo_uniqu": 1366, "foo_upp": [729, 1371], "foo_var": 1365, "foobar": [718, 719, 1300, 1301, 1371], "foobarbar": [719, 1301], "foofoobar": [718, 1300], "foral": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "forc": [145, 151, 155, 157, 251, 255, 304, 332, 346, 576, 881, 882, 936, 953, 1201, 1329, 1348], "force_parallel": [251, 346, 881, 882, 953], "foreign": 196, "form": [38, 48, 130, 132, 133, 134, 136, 154, 155, 163, 248, 280, 314, 346, 475, 627, 703, 728, 837, 953, 1089, 1217, 1285, 1310, 1348, 1371], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 48, 52, 53, 54, 100, 131, 143, 145, 146, 147, 150, 151, 153, 156, 159, 165, 202, 215, 223, 234, 248, 261, 270, 280, 281, 286, 300, 313, 344, 346, 350, 438, 470, 472, 475, 599, 600, 601, 720, 722, 723, 727, 781, 837, 864, 869, 870, 891, 906, 919, 953, 957, 962, 1086, 1089, 1302, 1304, 1305, 1309, 1347, 1371, 1372], "formul": [218, 346, 866, 867, 953], "formula": [41, 346, 488, 837, 1103, 1348], "fortran": [303, 304, 346], "forward": [226, 251, 289, 346, 390, 443, 462, 500, 506, 569, 670, 837, 872, 882, 908, 953, 997, 1053, 1076, 1117, 1186, 1252, 1348], "forward_fil": [316, 346, 398, 431, 434, 670, 837], "found": [21, 38, 41, 48, 101, 122, 125, 133, 137, 150, 157, 164, 220, 293, 346, 518, 668, 695, 700, 718, 719, 720, 723, 837, 912, 953, 1133, 1248, 1277, 1282, 1300, 1301, 1302, 1305, 1348, 1360, 1376], "four": [307, 346, 1376], "fourth": [534, 837, 1151, 1348], "frac": [491, 492, 493, 494, 676, 837, 1108, 1109, 1110, 1111, 1259, 1348], "fraction": [38, 48, 168, 169, 170, 171, 282, 346, 471, 564, 627, 667, 720, 723, 837, 953, 1085, 1181, 1217, 1246, 1302, 1305, 1348], "fragment": 1376, "frame": [38, 39, 41, 48, 56, 63, 64, 133, 146, 150, 156, 168, 169, 207, 208, 214, 248, 249, 253, 255, 262, 266, 269, 279, 280, 281, 293, 308, 314, 315, 346, 475, 816, 855, 856, 863, 892, 895, 912, 920, 953, 959, 1034, 1089, 1348, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1375, 1379], "frame_data": [1359, 1362], "frameinittyp": [346, 953], "frametyp": [56, 1376], "framework": [270, 313, 346, 919, 953], "freedom": [294, 317, 346, 572, 578, 659, 660, 663, 664, 681, 749, 769, 813, 814, 818, 826, 837, 913, 921, 953, 1241, 1243, 1263, 1338, 1348], "freeli": [816, 912, 953, 959], "freez": [41, 346], "freeze_pan": [41, 346], "frequenc": [316, 346, 748, 837, 1337, 1348], "frequent": [1247, 1249, 1348], "fri": [346, 349], "fridai": [236, 346, 443, 472, 762, 877, 953, 1053, 1086, 1089], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 48, 49, 50, 51, 56, 64, 74, 87, 95, 100, 104, 120, 124, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 184, 189, 204, 207, 214, 215, 216, 222, 224, 227, 228, 234, 236, 248, 249, 250, 251, 252, 253, 261, 270, 274, 275, 278, 279, 281, 282, 284, 285, 293, 301, 308, 310, 311, 313, 314, 315, 316, 322, 346, 349, 350, 395, 404, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 492, 495, 505, 507, 520, 534, 552, 564, 576, 585, 593, 618, 619, 621, 626, 627, 630, 633, 635, 646, 647, 649, 651, 653, 655, 657, 660, 662, 664, 667, 679, 691, 692, 697, 699, 700, 710, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 746, 758, 759, 762, 763, 775, 776, 777, 778, 779, 780, 781, 795, 797, 812, 816, 823, 824, 825, 833, 836, 837, 855, 863, 864, 865, 873, 877, 881, 882, 883, 891, 899, 900, 902, 904, 905, 912, 917, 919, 920, 925, 926, 953, 957, 958, 959, 1002, 1010, 1047, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1105, 1107, 1109, 1114, 1151, 1169, 1181, 1193, 1210, 1211, 1213, 1214, 1217, 1222, 1234, 1246, 1273, 1274, 1279, 1281, 1292, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1309, 1324, 1339, 1348, 1357, 1358, 1359, 1360, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379], "from_arrai": 816, "from_arrow": 131, "from_json": 837, "from_panda": 131, "from_repr": [302, 346, 1326, 1348], "fromkei": [57, 59], "front": [236, 346, 877, 953], "fruit": [299, 346, 418, 422, 643, 688, 714, 721, 837, 1023, 1028, 1270, 1296, 1303], "fruits_revers": [643, 837], "fsspec": [145, 146, 151, 153, 160, 161, 167], "fsspecfileio": 161, "full": [12, 27, 47, 51, 56, 71, 100, 133, 136, 145, 146, 147, 149, 151, 154, 155, 157, 159, 160, 161, 163, 164, 165, 250, 315, 346, 697, 699, 706, 707, 720, 721, 722, 723, 727, 776, 777, 881, 887, 920, 953, 957, 959, 1279, 1281, 1288, 1289, 1302, 1303, 1304, 1305, 1309, 1348, 1364, 1379], "full_sent": 766, "fulli": [177, 269, 282, 304, 346], "funcnam": [41, 346], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 72, 78, 95, 96, 97, 127, 131, 135, 137, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 195, 199, 201, 203, 206, 212, 215, 222, 229, 252, 255, 261, 269, 270, 275, 293, 303, 304, 305, 308, 309, 310, 313, 315, 332, 346, 349, 350, 358, 395, 415, 416, 435, 436, 438, 491, 493, 494, 516, 576, 584, 585, 610, 611, 626, 630, 633, 645, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 673, 676, 696, 741, 742, 743, 752, 756, 764, 768, 770, 771, 772, 784, 785, 787, 789, 790, 793, 795, 796, 798, 799, 802, 804, 807, 809, 811, 818, 822, 826, 828, 833, 837, 849, 853, 859, 864, 883, 887, 891, 895, 900, 912, 916, 919, 920, 927, 936, 953, 957, 961, 1002, 1021, 1030, 1046, 1047, 1107, 1108, 1110, 1111, 1131, 1193, 1201, 1222, 1233, 1234, 1237, 1239, 1240, 1247, 1249, 1254, 1256, 1259, 1278, 1327, 1330, 1332, 1333, 1348, 1353, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1374, 1375, 1376, 1377, 1378, 1379], "function_nam": 142, "further": 833, "futur": [63, 203, 214, 250, 287, 346, 859, 863, 881, 907, 953], "g": [34, 38, 48, 141, 145, 149, 151, 153, 160, 165, 177, 203, 215, 247, 304, 314, 346, 355, 438, 492, 495, 585, 671, 783, 837, 864, 900, 953, 957, 1109, 1348, 1379], "g1": [501, 750, 837], "g2": [501, 750, 837], "g_1": [676, 837, 1259, 1348], "gag": 27, "gamma": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "gantt": [896, 953], "gather": [146, 230, 346, 371, 509, 552, 760, 837, 875, 953, 978, 1123, 1169, 1348], "gather_everi": [346, 837, 953, 1348], "gb": [222, 346, 404, 1107, 1348], "gbp": 1379, "gc": [40, 149, 160, 161, 346], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 48, 49, 50, 51, 155, 157, 159, 161, 162, 163, 164, 189, 346, 953], "gdp": [251, 346, 882, 953], "gdp2": [251, 346, 882, 953], "gdp_date": [251, 346, 882, 953], "ge": [837, 1348], "gener": [1, 52, 53, 95, 140, 141, 147, 148, 166, 172, 173, 174, 175, 176, 177, 179, 203, 210, 212, 270, 282, 301, 304, 310, 346, 564, 667, 672, 757, 776, 779, 791, 792, 794, 795, 796, 812, 824, 825, 837, 953, 1022, 1181, 1246, 1255, 1324, 1348, 1379], "geq": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "germani": [251, 346, 882, 953], "get": [56, 63, 74, 142, 152, 158, 165, 195, 204, 206, 210, 211, 220, 228, 231, 233, 236, 238, 239, 243, 245, 246, 254, 257, 264, 265, 270, 278, 279, 283, 288, 291, 297, 305, 309, 319, 329, 340, 346, 356, 369, 370, 371, 373, 381, 384, 396, 404, 416, 419, 431, 432, 433, 434, 443, 453, 502, 508, 515, 518, 533, 535, 538, 550, 556, 577, 586, 587, 588, 596, 598, 604, 618, 619, 628, 629, 634, 645, 646, 677, 681, 690, 737, 738, 742, 743, 745, 749, 760, 762, 784, 789, 793, 799, 800, 801, 802, 804, 805, 806, 808, 818, 822, 826, 837, 853, 858, 859, 861, 868, 873, 874, 877, 878, 884, 886, 902, 903, 910, 915, 916, 922, 933, 944, 953, 958, 963, 976, 977, 978, 979, 980, 988, 991, 1003, 1010, 1024, 1033, 1042, 1043, 1044, 1045, 1053, 1063, 1102, 1119, 1120, 1125, 1130, 1133, 1136, 1137, 1149, 1152, 1155, 1167, 1173, 1194, 1202, 1204, 1205, 1207, 1209, 1210, 1211, 1218, 1219, 1223, 1233, 1260, 1263, 1272, 1320, 1324, 1330, 1334, 1338, 1348], "get_chunk": 1348, "get_column": [203, 306, 346], "get_column_index": 346, "get_polars_schema": 197, "get_table_info": 197, "get_token": 34, "get_worksheet_by_nam": [41, 346], "gevent": [63, 167, 859, 953], "gh": 707, "gh45": 707, "gh45ij67kl": 707, "ghi": [355, 692, 837, 959, 1274], "gil": [585, 837, 957], "git": 61, "github": [148, 346], "give": [155, 162, 163, 251, 261, 311, 313, 346, 453, 505, 534, 639, 744, 748, 837, 849, 882, 891, 898, 917, 919, 953, 1063, 1151, 1337, 1348, 1375], "given": [41, 53, 56, 95, 106, 111, 128, 130, 132, 133, 134, 136, 140, 141, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 159, 162, 163, 164, 170, 171, 172, 173, 175, 177, 178, 179, 180, 201, 222, 223, 225, 227, 236, 246, 255, 262, 268, 269, 274, 279, 280, 281, 289, 292, 308, 315, 346, 378, 390, 395, 404, 416, 425, 444, 448, 472, 474, 475, 488, 492, 516, 522, 544, 569, 576, 579, 585, 626, 630, 636, 639, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 670, 692, 693, 704, 705, 720, 723, 730, 733, 743, 783, 784, 793, 798, 799, 812, 813, 814, 837, 870, 877, 887, 892, 895, 898, 899, 908, 911, 920, 936, 953, 958, 959, 961, 985, 997, 1002, 1010, 1035, 1054, 1058, 1086, 1088, 1089, 1103, 1107, 1109, 1131, 1136, 1150, 1161, 1186, 1193, 1196, 1199, 1201, 1214, 1220, 1224, 1230, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1248, 1252, 1274, 1275, 1286, 1287, 1302, 1305, 1312, 1336, 1339, 1348, 1357, 1359, 1364, 1366, 1367, 1370, 1371, 1376, 1378, 1379], "glimps": [214, 238, 346], "glob": [145, 146, 150, 151, 155, 157, 159, 162, 163, 164], "global": [55, 96, 97, 150, 166, 175, 183, 293, 346, 640, 641, 816, 837, 912, 953, 1025, 1029, 1228, 1229, 1348, 1358, 1360, 1375], "gmt": [448, 452, 469, 1058, 1062, 1083], "go": [13, 145, 146, 159, 418, 688, 1023, 1270], "godfath": 1357, "goe": 13, "gonfruit": 1303, "good": [47, 49, 51, 248, 346, 953, 1370], "goodby": 1, "googl": [35, 149, 160, 161], "gpu": [10, 48, 49, 50, 51, 62, 63, 303, 346, 858, 859, 869, 896, 909, 928, 950, 953, 1327, 1348], "gpu_devic": [303, 346], "gpudevic": [303, 346], "gpuengin": [10, 858, 869, 896, 909, 953], "grade": [1151, 1348], "grain": [858, 869, 896, 909, 950, 953], "granular": 1376, "grape": 1371, "graph": [62, 147, 253, 346, 600, 858, 879, 925, 953], "graphviz": [253, 346, 600, 909, 953], "great": [346, 350], "great_tabl": [346, 350], "greater": [208, 251, 346, 510, 512, 522, 676, 704, 705, 713, 730, 837, 882, 953, 1136, 1259, 1286, 1287, 1295, 1312, 1348], "greatest": [1365, 1369], "greatli": [151, 162], "green": [55, 96, 97, 332, 748, 837, 936, 1337, 1348], "greenlet": [63, 859, 953], "greet": 1, "grid": [520, 837], "grid_point": [520, 837], "gridlin": [41, 346], "gross": 1357, "group": [9, 28, 47, 51, 54, 142, 146, 164, 207, 235, 236, 249, 251, 266, 268, 270, 278, 281, 314, 316, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 356, 416, 435, 497, 503, 508, 511, 548, 584, 585, 596, 598, 626, 636, 645, 646, 678, 679, 683, 691, 692, 693, 695, 706, 707, 743, 748, 799, 837, 855, 876, 877, 882, 902, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 959, 1046, 1165, 1233, 1265, 1273, 1274, 1275, 1277, 1288, 1289, 1337, 1348, 1357, 1365, 1375, 1376], "group_bi": [236, 266, 270, 278, 316, 345, 346, 356, 406, 411, 414, 416, 501, 503, 508, 511, 584, 585, 626, 678, 679, 743, 750, 776, 779, 799, 837, 858, 859, 869, 877, 896, 898, 902, 909, 951, 953, 959], "group_by_dynam": [278, 346, 902, 953], "group_by_partit": [896, 953], "group_col": [501, 750, 837], "group_df": [332, 936], "group_dtyp": [626, 837], "group_index": [691, 1273], "group_to_row": [626, 837], "groupbi": [235, 346, 585, 799, 837], "grouper": [406, 411, 414, 837], "grow": [318, 346], "grown": [240, 346], "gt": [346, 350, 837, 1348], "gte": [501, 750, 837], "guarante": [10, 47, 51, 145, 146, 206, 214, 237, 262, 309, 311, 346, 415, 416, 514, 741, 742, 743, 837, 853, 863, 892, 916, 917, 953, 1021, 1129, 1331, 1333, 1348], "guid": [140, 142, 837, 957, 1379], "gzip": [47, 51, 346, 953], "h": [314, 346, 355, 472, 475, 671, 706, 707, 720, 723, 727, 837, 1288, 1289, 1302, 1305, 1309, 1371, 1372], "ha": [40, 41, 56, 63, 135, 147, 159, 182, 203, 316, 322, 327, 346, 415, 416, 435, 507, 584, 597, 603, 697, 721, 731, 742, 743, 767, 784, 793, 833, 837, 859, 926, 931, 936, 953, 1021, 1034, 1046, 1048, 1279, 1303, 1333, 1348], "half": [308, 346, 470, 491, 492, 493, 494, 837, 1084, 1108, 1109, 1110, 1111, 1348], "half_lif": [491, 492, 493, 494, 837, 1108, 1109, 1110, 1111, 1348], "ham": [36, 38, 40, 43, 44, 47, 207, 210, 211, 212, 216, 217, 218, 219, 220, 221, 227, 232, 237, 238, 240, 250, 254, 256, 258, 260, 263, 267, 272, 274, 275, 276, 279, 282, 283, 284, 291, 294, 295, 297, 301, 302, 304, 305, 306, 311, 317, 318, 346, 419, 600, 601, 833, 855, 860, 861, 865, 866, 867, 868, 873, 881, 894, 899, 900, 903, 904, 917, 925, 953, 1024, 1364, 1365], "ham_a": [301, 346], "ham_b": [301, 346], "ham_right": [250, 346, 881, 953], "hamburg": 833, "hand": [41, 145, 146, 159, 346, 565, 566, 567, 568, 1182, 1183, 1184, 1185], "handi": [443, 762, 1053], "handl": [40, 42, 103, 137, 142, 145, 146, 159, 165, 227, 231, 274, 346, 439, 546, 690, 730, 837, 858, 873, 899, 953, 1049, 1163, 1272, 1312, 1348], "handler": [143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 215, 346, 438, 837, 864, 953], "happen": [147, 448, 633, 837, 1058, 1222, 1348], "hard": [95, 140, 159, 887, 953], "harder": [236, 346, 877, 953], "hardwar": 1379, "has_head": [145, 146, 150, 156, 159], "has_nul": [837, 1128, 1348], "has_prefix": [422, 714], "has_suffix": [418, 688], "has_two": 1366, "has_valid": 1348, "hash": [237, 346, 837, 1348], "hash_row": 346, "hat": [706, 707, 1288, 1289], "have": [5, 15, 31, 34, 41, 53, 55, 56, 64, 71, 97, 142, 143, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 204, 215, 224, 248, 250, 251, 270, 273, 278, 280, 281, 300, 308, 323, 346, 435, 438, 491, 493, 494, 585, 597, 636, 640, 641, 646, 693, 708, 764, 837, 864, 881, 882, 891, 902, 926, 927, 953, 959, 1046, 1048, 1108, 1110, 1111, 1114, 1224, 1228, 1229, 1288, 1290, 1348, 1375, 1377, 1379], "haystack": [692, 1274], "he": 716, "head": [74, 159, 234, 254, 297, 346, 361, 538, 837, 886, 953, 1155, 1320, 1348], "header": [38, 41, 47, 48, 51, 137, 145, 146, 150, 156, 159, 220, 310, 346, 953], "header_format": [41, 346], "header_nam": [310, 346], "headerless": 159, "heap": [142, 222, 346, 837, 1107, 1348], "heatmap": [41, 346], "heavili": 164, "height": [41, 141, 175, 219, 346, 349, 1348, 1353], "hell": [715, 1297], "hello": [1, 21, 715, 716, 717, 959, 1172, 1297, 1298, 1299, 1359, 1362], "hello_": 786, "hello_data": 1362, "hello_world": 1362, "help": [41, 168, 169, 170, 171, 346, 953], "helper": [346, 350, 833], "henc": [706, 1289], "here": [38, 40, 41, 43, 47, 48, 49, 50, 51, 130, 132, 133, 134, 136, 147, 148, 149, 154, 155, 157, 159, 160, 161, 162, 163, 164, 173, 175, 179, 189, 204, 270, 346, 443, 584, 585, 600, 693, 700, 762, 837, 909, 953, 959, 1053, 1282], "hex": [400, 401, 686, 687, 725, 1006, 1007, 1268, 1269, 1307], "hexadecim": [1006, 1007], "hf": [38, 43, 47, 48, 49, 50, 51, 155, 157, 159, 162, 163, 164, 189, 346, 953], "hf_token": [38, 43, 47, 48, 49, 50, 51, 155, 157, 159, 162, 163, 164, 189, 346, 953], "hi": [1, 1371], "hidden": [41, 346], "hidden_column": [41, 346], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 346], "hide_password": 147, "high": [281, 346, 350, 633, 837, 849, 1222, 1348], "higher": [47, 51, 214, 272, 338, 346, 634, 656, 657, 810, 837, 863, 897, 942, 953, 1048, 1223, 1239, 1348], "highest": [346, 350, 636, 747, 767, 837, 953, 1224, 1348], "highli": [142, 837], "hint": 140, "hippopotamu": [704, 705, 1286, 1287], "hist": [837, 1348, 1353], "histogram": [1348, 1353], "hit": [854, 953], "hive": [52, 157, 162, 164], "hive_custom": 192, "hive_partit": [157, 162, 164], "hive_schema": [157, 162, 164], "hive_serd": 192, "hmm": 959, "hold": [290, 304, 346, 1329, 1348], "holidai": [443, 762, 1053], "home": [728, 1310], "horizont": [21, 64, 105, 229, 240, 257, 259, 264, 296, 314, 346, 753, 755, 764, 765, 766, 771, 772, 774, 782, 785, 801, 803, 806, 811, 821, 925, 953], "host": [61, 145, 151, 153, 164], "hour": [155, 159, 162, 163, 236, 251, 278, 316, 346, 457, 459, 460, 464, 465, 468, 470, 471, 475, 477, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 778, 779, 780, 781, 795, 823, 824, 825, 837, 877, 882, 902, 953, 959, 1079, 1082, 1084, 1091, 1097, 1109, 1348, 1372], "hours_diff": 477, "hous": [308, 346], "how": [12, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 56, 64, 105, 142, 148, 155, 157, 159, 162, 163, 164, 189, 219, 227, 250, 251, 270, 314, 315, 346, 379, 439, 468, 469, 520, 545, 546, 626, 639, 658, 720, 723, 762, 778, 827, 837, 873, 881, 882, 920, 925, 953, 986, 1049, 1082, 1083, 1162, 1163, 1240, 1302, 1305, 1348], "howev": [1, 10, 52, 133, 147, 157, 164, 199, 222, 255, 304, 346, 626, 837, 858, 869, 896, 909, 953, 1107, 1348], "hstack": [105, 346], "html": [33, 41, 43, 44, 131, 147, 151, 153, 201, 202, 203, 212, 346, 961, 962], "http": [21, 33, 41, 43, 44, 74, 131, 147, 148, 151, 153, 184, 201, 202, 203, 212, 346, 600, 691, 693, 703, 909, 953, 961, 962, 1273, 1275, 1285], "httpmethod": 74, "hug": [38, 43, 47, 48, 49, 50, 51, 155, 157, 159, 162, 163, 164, 189, 346, 953], "huge": [222, 346, 1107, 1348], "hut": [706, 707, 1288, 1289], "hvplot": [346, 349, 1348, 1353], "hyperbol": [364, 366, 368, 427, 675, 740, 837, 971, 973, 975, 1038, 1258, 1322, 1348], "hyperloglog": [205, 346, 362, 756, 837, 852, 953, 969, 1348], "hyphen": [682, 1264], "hypothesi": [173, 175, 178, 179, 1379], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 72, 73, 78, 88, 95, 97, 101, 103, 104, 105, 106, 107, 108, 110, 111, 116, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 193, 195, 199, 204, 205, 206, 207, 209, 210, 214, 215, 218, 219, 221, 222, 224, 227, 231, 235, 236, 237, 238, 241, 242, 246, 248, 249, 250, 251, 252, 253, 254, 255, 261, 262, 266, 268, 269, 270, 274, 275, 276, 278, 279, 280, 281, 282, 285, 286, 287, 289, 291, 292, 293, 294, 297, 298, 303, 304, 305, 308, 309, 310, 311, 313, 315, 316, 317, 321, 323, 324, 332, 346, 349, 350, 355, 358, 360, 361, 362, 372, 375, 382, 383, 390, 395, 403, 415, 416, 417, 420, 421, 435, 436, 438, 441, 442, 443, 444, 447, 455, 462, 463, 465, 470, 472, 475, 483, 491, 492, 493, 494, 497, 501, 505, 514, 516, 519, 522, 534, 540, 547, 548, 551, 553, 555, 564, 569, 570, 572, 576, 578, 581, 584, 585, 589, 591, 592, 593, 595, 596, 597, 599, 608, 626, 631, 633, 636, 638, 639, 640, 641, 642, 645, 646, 647, 649, 651, 653, 655, 657, 658, 659, 660, 662, 663, 664, 667, 668, 669, 670, 672, 673, 676, 677, 678, 679, 681, 682, 683, 684, 685, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 713, 715, 716, 717, 720, 721, 722, 723, 725, 727, 728, 730, 735, 742, 743, 748, 749, 752, 753, 754, 755, 756, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 776, 777, 779, 780, 785, 789, 790, 791, 792, 794, 795, 796, 797, 799, 802, 804, 807, 809, 812, 813, 814, 815, 816, 818, 822, 824, 825, 826, 827, 828, 833, 837, 852, 853, 854, 857, 858, 859, 861, 863, 864, 866, 867, 868, 869, 873, 876, 877, 880, 881, 882, 883, 885, 887, 891, 892, 896, 899, 900, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 919, 920, 921, 922, 924, 927, 928, 936, 946, 953, 957, 959, 966, 967, 968, 969, 982, 989, 990, 997, 1002, 1009, 1021, 1025, 1026, 1027, 1030, 1035, 1036, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1057, 1065, 1079, 1084, 1086, 1089, 1097, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1118, 1119, 1129, 1130, 1131, 1133, 1136, 1138, 1141, 1148, 1150, 1151, 1152, 1155, 1157, 1164, 1165, 1168, 1170, 1172, 1181, 1186, 1187, 1193, 1201, 1220, 1222, 1224, 1226, 1228, 1229, 1230, 1233, 1234, 1237, 1239, 1240, 1241, 1243, 1246, 1247, 1248, 1249, 1250, 1252, 1255, 1256, 1259, 1260, 1263, 1264, 1265, 1266, 1267, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1292, 1295, 1297, 1298, 1299, 1302, 1303, 1304, 1305, 1307, 1309, 1310, 1312, 1320, 1323, 1327, 1329, 1330, 1332, 1333, 1337, 1338, 1348, 1353, 1357, 1358, 1363, 1367, 1368, 1371, 1374, 1376, 1377, 1379], "i0e0": 1379, "i16": [1, 59, 451, 466, 485, 671, 837, 959, 1080, 1326, 1348, 1379], "i32": [1, 59, 130, 133, 137, 172, 174, 175, 284, 293, 346, 381, 382, 384, 403, 417, 446, 454, 456, 457, 458, 459, 460, 464, 487, 671, 762, 827, 837, 904, 953, 958, 988, 989, 991, 1009, 1056, 1066, 1070, 1071, 1072, 1078, 1101, 1199, 1348, 1368, 1372, 1379], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 141, 145, 147, 154, 155, 159, 204, 206, 207, 208, 209, 211, 215, 216, 219, 220, 223, 224, 226, 227, 230, 231, 233, 234, 235, 236, 238, 240, 241, 243, 245, 247, 250, 251, 252, 254, 255, 256, 262, 263, 268, 269, 270, 271, 274, 275, 276, 277, 278, 282, 284, 286, 289, 291, 292, 293, 295, 297, 299, 306, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 336, 339, 340, 346, 355, 357, 361, 371, 376, 377, 379, 380, 385, 387, 388, 389, 390, 391, 393, 396, 398, 406, 411, 414, 415, 416, 425, 431, 432, 433, 434, 435, 436, 439, 440, 453, 468, 474, 476, 477, 478, 479, 480, 481, 482, 492, 495, 497, 498, 500, 501, 502, 503, 505, 506, 508, 509, 511, 515, 517, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 532, 535, 538, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 582, 584, 585, 605, 606, 607, 609, 610, 612, 614, 616, 617, 622, 626, 627, 630, 631, 632, 633, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 667, 669, 670, 671, 672, 677, 678, 679, 697, 706, 707, 721, 725, 730, 731, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 747, 750, 757, 760, 763, 764, 765, 766, 771, 772, 773, 774, 775, 778, 781, 782, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 808, 811, 815, 816, 817, 820, 821, 822, 823, 827, 833, 837, 853, 855, 856, 858, 859, 864, 865, 867, 870, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 886, 887, 888, 892, 893, 895, 896, 898, 899, 900, 901, 902, 904, 906, 908, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 923, 926, 927, 929, 930, 932, 933, 934, 936, 937, 940, 943, 944, 953, 959, 963, 964, 965, 968, 987, 992, 994, 996, 997, 998, 1000, 1003, 1021, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1063, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1113, 1114, 1115, 1117, 1118, 1122, 1123, 1125, 1130, 1132, 1141, 1155, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1175, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1193, 1194, 1201, 1206, 1214, 1220, 1222, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1235, 1238, 1242, 1246, 1247, 1249, 1252, 1253, 1255, 1260, 1261, 1307, 1313, 1318, 1320, 1325, 1333, 1334, 1339, 1348, 1357, 1358, 1360, 1364, 1365, 1366, 1367, 1368, 1370, 1373, 1374, 1376, 1377, 1379], "i8": [394, 395, 451, 454, 457, 459, 460, 461, 464, 466, 467, 471, 484, 485, 575, 671, 809, 812, 828, 837, 1001, 1002, 1049, 1061, 1064, 1074, 1075, 1081, 1085, 1098, 1099, 1192, 1231, 1253, 1336, 1348, 1372], "i_bitand_j": 1367, "i_bitand_op_j": 1367, "i_bitcount": 1367, "i_bitor_j": 1367, "i_bitor_op_j": 1367, "i_bitxor_j": 1367, "i_bitxor_op_j": 1367, "iceberg": [42, 161, 346, 849], "icon": [41, 346], "id": [27, 34, 41, 64, 141, 145, 150, 161, 252, 303, 310, 323, 332, 346, 645, 706, 707, 746, 837, 883, 927, 936, 953, 959, 1233, 1335, 1348, 1376, 1377, 1379], "id_char": 1379, "id_var": [261, 313, 346, 891, 919, 953], "ideal": [139, 140], "ident": [34, 137, 208, 209, 346, 472, 644, 645, 837, 856, 857, 953, 1034, 1036, 1086, 1232, 1233, 1348], "identif": [150, 156], "identifi": [137, 147, 261, 268, 311, 313, 324, 346, 891, 917, 919, 953], "idiograph": 959, "idiomat": [833, 861, 868, 903, 922, 936, 953], "idx": [159, 236, 249, 323, 346, 382, 395, 576, 877, 927, 953, 1002, 1193, 1277], "idx_lit": 1277, "idx_rx": 1277, "ieee": [744, 837], "if_set": [5, 31], "if_table_exist": [39, 346], "ifnul": 1369, "ignor": [40, 147, 174, 175, 179, 259, 296, 315, 346, 358, 360, 383, 403, 439, 469, 491, 493, 494, 546, 555, 618, 619, 682, 698, 752, 754, 766, 803, 821, 837, 920, 953, 959, 966, 967, 990, 1009, 1049, 1083, 1108, 1110, 1111, 1163, 1172, 1210, 1211, 1264, 1280, 1348], "ignore_error": [145, 146, 155, 159, 163], "ignore_nul": [259, 296, 346, 358, 360, 383, 491, 493, 494, 555, 682, 698, 752, 754, 766, 803, 821, 837, 966, 967, 990, 1108, 1110, 1111, 1172, 1264, 1280, 1348], "ignore_spac": 959, "ij": 707, "ij67": 707, "ijkl": 1371, "ilmsuxu": [683, 691, 692, 695, 706, 707, 1265, 1273, 1274, 1277, 1288, 1289], "imbal": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "imdb_scor": 1357, "immedi": [199, 636, 757, 761, 776, 777, 779, 780, 791, 792, 795, 796, 809, 812, 815, 819, 824, 825, 828, 837, 1224, 1348, 1358], "immut": [304, 346, 1329, 1348], "impact": [236, 346, 877, 953, 1357, 1376], "impl": 161, "implement": [47, 95, 140, 147, 203, 237, 255, 332, 346, 349, 350, 514, 585, 609, 610, 612, 614, 616, 617, 731, 741, 799, 837, 936, 1129, 1201, 1247, 1249, 1331, 1348, 1353], "implic": [438, 837, 864, 953], "implicit": [315, 346, 920, 953], "implicitli": [227, 274, 346, 501, 827, 837, 873, 899, 953, 1376], "implod": [837, 1348, 1366], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 56, 71, 74, 95, 130, 131, 134, 135, 141, 145, 147, 148, 154, 155, 159, 165, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 207, 214, 215, 216, 219, 234, 236, 249, 251, 268, 270, 286, 293, 301, 303, 308, 313, 314, 316, 346, 349, 350, 404, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 592, 593, 599, 626, 647, 649, 651, 653, 655, 657, 660, 662, 664, 762, 775, 776, 777, 778, 779, 780, 781, 795, 816, 824, 825, 833, 837, 849, 855, 859, 863, 864, 865, 867, 877, 882, 887, 906, 919, 953, 957, 1010, 1037, 1039, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1109, 1139, 1142, 1144, 1145, 1234, 1257, 1321, 1348, 1353, 1358, 1373, 1376, 1379], "improv": [39, 51, 151, 162, 250, 346, 584, 837, 881, 953], "in_plac": [240, 290, 318, 346, 1225, 1254, 1261, 1348], "in_progress": [898, 953], "includ": [7, 21, 31, 38, 40, 41, 48, 52, 54, 61, 135, 147, 149, 150, 155, 156, 157, 159, 160, 161, 162, 163, 164, 175, 176, 199, 210, 214, 222, 252, 268, 270, 274, 281, 292, 308, 310, 314, 315, 346, 436, 471, 501, 505, 516, 522, 592, 633, 648, 650, 652, 654, 656, 658, 659, 661, 663, 706, 707, 711, 712, 715, 716, 762, 771, 813, 814, 837, 863, 873, 883, 899, 911, 920, 953, 959, 1047, 1048, 1085, 1107, 1118, 1131, 1136, 1222, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1288, 1289, 1293, 1294, 1297, 1348, 1376], "include_bom": [38, 48, 346, 953], "include_boundari": [236, 346, 877, 953], "include_break": [436, 633, 837, 1047, 1222, 1348], "include_breakpoint": [516, 837, 1131, 1348], "include_categor": 959, "include_categori": [516, 837, 1131, 1348], "include_col": 175, "include_file_path": [150, 155, 156, 157, 159, 162, 163, 164], "include_head": [38, 41, 48, 146, 310, 346, 953], "include_index": 135, "include_init": 771, "include_kei": [52, 54, 268, 281, 346], "include_nul": [315, 346, 920, 953], "inclus": [204, 236, 278, 346, 475, 522, 646, 649, 651, 653, 655, 657, 660, 662, 664, 711, 712, 757, 776, 777, 779, 780, 791, 792, 795, 796, 824, 825, 837, 877, 902, 953, 1089, 1136, 1293, 1294, 1348], "incom": 147, "incompat": 123, "incomplet": [641, 837, 1229, 1348], "incorpor": 1376, "incorrect": [287, 346, 486, 584, 585, 669, 837, 907, 936, 953, 1100, 1250, 1348], "incorrectli": [145, 576], "increas": [41, 56, 145, 150, 156, 157, 164, 346, 435, 645, 837, 1046, 1233, 1348], "independ": [62, 63, 129, 172, 175, 179, 308, 346, 672, 837, 858, 859, 869, 896, 909, 953], "index": [41, 52, 53, 54, 111, 131, 135, 138, 145, 146, 151, 153, 155, 157, 159, 162, 163, 164, 167, 203, 230, 232, 236, 241, 246, 248, 270, 276, 278, 279, 280, 289, 291, 303, 304, 306, 313, 315, 316, 322, 323, 346, 356, 369, 370, 371, 373, 376, 377, 382, 390, 395, 492, 508, 509, 511, 518, 541, 542, 551, 552, 553, 569, 570, 576, 646, 649, 651, 653, 655, 657, 660, 662, 664, 668, 670, 677, 683, 691, 695, 697, 710, 721, 731, 760, 791, 794, 837, 875, 877, 902, 908, 910, 919, 920, 926, 927, 953, 959, 976, 977, 978, 979, 980, 983, 984, 989, 997, 1002, 1109, 1122, 1123, 1133, 1150, 1158, 1159, 1168, 1169, 1170, 1186, 1187, 1193, 1214, 1247, 1248, 1252, 1260, 1273, 1277, 1279, 1292, 1303, 1348, 1353, 1366, 1371], "index_column": [236, 278, 346, 646, 837, 877, 902, 953], "index_of": [837, 1348], "indexord": [303, 304, 346], "indic": [38, 41, 43, 47, 48, 49, 50, 51, 70, 71, 73, 88, 104, 114, 142, 143, 145, 146, 147, 150, 151, 153, 155, 156, 157, 159, 162, 163, 164, 172, 173, 179, 189, 236, 278, 281, 289, 301, 346, 372, 390, 508, 516, 523, 524, 525, 527, 528, 529, 530, 531, 532, 551, 569, 589, 590, 591, 592, 593, 594, 595, 626, 646, 649, 651, 653, 655, 657, 660, 662, 664, 668, 670, 760, 761, 808, 837, 877, 902, 908, 953, 959, 997, 1030, 1122, 1131, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1168, 1186, 1247, 1248, 1252, 1324, 1348, 1379], "indistinguish": [38, 48, 346, 953], "individu": [41, 51, 199, 278, 303, 304, 308, 346, 585, 692, 734, 837, 858, 902, 953, 959, 1033, 1274, 1348], "inequ": [620, 837], "inexact": [168, 169, 170, 171], "inf": [172, 175, 179, 368, 436, 524, 527, 633, 744, 837, 975, 1039, 1047, 1139, 1142, 1199, 1217, 1222, 1336, 1348, 1373], "infer": [38, 43, 47, 48, 49, 50, 51, 72, 87, 104, 130, 132, 133, 134, 135, 136, 145, 146, 147, 150, 154, 155, 156, 157, 159, 162, 163, 164, 189, 255, 346, 584, 585, 642, 699, 720, 722, 723, 724, 727, 781, 797, 812, 837, 953, 1201, 1230, 1281, 1302, 1304, 1305, 1306, 1309, 1348], "infer_schema": [145, 159], "infer_schema_length": [133, 136, 141, 145, 146, 147, 150, 154, 155, 156, 159, 163, 346, 699, 953, 1281], "inference_length": [724, 1306], "inference_s": [255, 346], "infin": [728, 744, 837, 1310], "infinit": [527, 744, 837, 1142, 1348], "influenc": [150, 887, 953], "influxdb": 147, "info": [149, 160, 161, 167], "inform": [20, 24, 38, 39, 43, 47, 48, 49, 50, 51, 61, 140, 142, 149, 155, 157, 159, 160, 161, 162, 163, 164, 168, 170, 189, 190, 191, 193, 194, 201, 212, 214, 346, 350, 534, 585, 676, 683, 691, 692, 695, 706, 707, 837, 858, 863, 869, 896, 909, 953, 957, 961, 1029, 1151, 1259, 1265, 1273, 1274, 1277, 1288, 1289, 1348], "inherit": [279, 346, 438, 837, 864, 953], "init": [199, 1357], "initcap": 1369, "initi": [33, 34, 35, 41, 87, 140, 184, 199, 346, 771, 785, 827, 1376], "initialis": [74, 147, 199, 953], "inject": [41, 56, 346], "inlin": [25, 281, 346, 683, 691, 692, 695, 706, 707, 1265, 1273, 1274, 1277, 1288, 1289, 1366], "inner": [65, 83, 174, 250, 252, 315, 346, 383, 394, 440, 555, 575, 585, 639, 741, 816, 837, 881, 883, 920, 953, 990, 1001, 1050, 1172, 1192, 1201, 1331, 1348, 1364, 1376], "inner_dtyp": [174, 177], "innermost": [174, 177], "innter": 989, "inprocessqueri": [858, 953], "input": [0, 54, 56, 62, 104, 133, 135, 142, 145, 146, 206, 216, 235, 252, 255, 259, 268, 270, 275, 284, 285, 289, 292, 296, 309, 315, 320, 321, 325, 346, 355, 416, 418, 422, 425, 492, 495, 507, 522, 580, 584, 585, 597, 626, 640, 641, 673, 679, 697, 708, 710, 716, 717, 718, 719, 721, 723, 735, 743, 751, 753, 755, 757, 760, 763, 764, 765, 766, 774, 781, 783, 791, 792, 797, 798, 799, 801, 803, 806, 815, 819, 821, 827, 833, 837, 849, 853, 865, 876, 883, 900, 904, 905, 908, 911, 916, 920, 923, 924, 929, 953, 1035, 1109, 1136, 1197, 1198, 1201, 1220, 1228, 1229, 1252, 1256, 1279, 1292, 1303, 1305, 1348, 1370, 1371, 1373], "input_wildcard_expans": [142, 837], "insensit": [684, 692, 694, 696, 706, 707, 708, 959, 1265, 1266, 1274, 1276, 1277, 1278, 1288, 1289, 1290], "insensitive_match": [683, 695], "insert": [39, 145, 146, 151, 153, 155, 157, 159, 162, 163, 164, 241, 310, 312, 346, 668, 682, 698, 730, 837, 918, 953, 1248, 1264, 1280, 1312, 1348], "insert_aft": [41, 346], "insert_befor": [41, 346], "insert_chart": [41, 346], "insert_column": 346, "insid": [63, 584, 837, 859, 953], "inspect": [837, 953], "instal": [33, 34, 35, 108, 135, 145, 146, 148, 151, 153, 212, 305, 346, 443, 600, 762, 909, 953, 1053, 1330, 1348], "instanc": [38, 43, 47, 48, 49, 50, 51, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 175, 179, 189, 224, 229, 346, 597, 771, 785, 833, 849, 855, 887, 898, 926, 927, 953, 1114, 1348], "instanti": [34, 39, 41, 147, 177, 284, 302, 303, 320, 346, 904, 923, 953, 958, 1326, 1327, 1348], "instantli": [63, 859, 953], "instead": [38, 40, 45, 46, 56, 63, 65, 131, 132, 133, 136, 145, 146, 147, 150, 156, 157, 159, 164, 165, 172, 173, 174, 175, 179, 205, 206, 234, 247, 248, 251, 255, 261, 266, 268, 279, 280, 281, 284, 285, 286, 289, 303, 304, 305, 309, 321, 322, 346, 349, 350, 371, 390, 416, 417, 420, 421, 436, 450, 475, 492, 495, 505, 569, 599, 633, 640, 670, 682, 690, 701, 702, 715, 716, 717, 718, 719, 730, 743, 750, 757, 759, 761, 768, 776, 777, 779, 780, 781, 791, 792, 795, 796, 809, 812, 815, 816, 819, 824, 825, 828, 837, 852, 853, 859, 869, 882, 891, 904, 905, 906, 908, 916, 924, 925, 926, 928, 953, 959, 978, 997, 1006, 1022, 1026, 1027, 1047, 1060, 1068, 1069, 1089, 1109, 1128, 1186, 1222, 1228, 1247, 1249, 1252, 1261, 1264, 1272, 1283, 1284, 1297, 1298, 1299, 1312, 1329, 1330, 1348, 1353, 1357, 1358, 1362, 1376, 1377], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 48, 49, 50, 51, 53, 58, 65, 72, 133, 136, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 189, 191, 206, 208, 214, 222, 225, 226, 230, 232, 234, 237, 238, 239, 241, 246, 248, 249, 251, 254, 255, 265, 266, 276, 278, 279, 282, 288, 289, 291, 294, 297, 302, 306, 309, 314, 317, 319, 322, 323, 329, 340, 346, 355, 378, 382, 390, 392, 395, 397, 398, 415, 416, 435, 439, 443, 468, 491, 493, 494, 498, 499, 500, 506, 508, 509, 511, 514, 515, 516, 538, 544, 546, 551, 552, 553, 554, 564, 569, 570, 572, 574, 575, 576, 578, 625, 627, 630, 631, 633, 636, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 677, 681, 691, 697, 699, 704, 705, 706, 710, 712, 713, 721, 724, 725, 730, 738, 742, 743, 749, 751, 757, 767, 769, 775, 778, 781, 787, 789, 791, 792, 795, 796, 808, 809, 812, 813, 814, 818, 819, 822, 823, 826, 828, 837, 853, 856, 863, 871, 872, 875, 878, 882, 886, 896, 908, 910, 913, 915, 916, 921, 922, 926, 927, 928, 933, 944, 953, 958, 959, 976, 977, 985, 989, 997, 999, 1002, 1004, 1021, 1022, 1033, 1034, 1040, 1046, 1049, 1050, 1053, 1082, 1107, 1108, 1110, 1111, 1115, 1116, 1117, 1122, 1123, 1129, 1130, 1131, 1133, 1150, 1154, 1155, 1161, 1163, 1168, 1169, 1170, 1171, 1181, 1186, 1187, 1189, 1191, 1192, 1193, 1195, 1207, 1208, 1210, 1211, 1214, 1216, 1217, 1220, 1221, 1222, 1224, 1230, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1255, 1260, 1263, 1273, 1279, 1281, 1286, 1287, 1288, 1292, 1294, 1295, 1303, 1306, 1307, 1312, 1319, 1320, 1326, 1333, 1338, 1348, 1360, 1363, 1376, 1379], "int16": [1, 59, 308, 346, 433, 434, 466, 737, 837, 959, 1044, 1045, 1080, 1319, 1326, 1348], "int32": [1, 41, 59, 64, 130, 133, 172, 174, 175, 236, 249, 278, 303, 346, 381, 382, 384, 403, 417, 446, 456, 457, 458, 459, 464, 487, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 741, 812, 837, 877, 902, 953, 958, 959, 985, 988, 989, 991, 1009, 1056, 1066, 1070, 1071, 1072, 1078, 1101, 1109, 1199, 1331, 1332, 1348], "int64": [1, 40, 41, 58, 59, 64, 65, 87, 106, 145, 154, 210, 220, 229, 236, 269, 278, 283, 284, 298, 305, 346, 376, 377, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 433, 434, 476, 477, 478, 479, 480, 481, 482, 486, 492, 495, 584, 585, 611, 613, 615, 630, 638, 646, 649, 651, 653, 655, 657, 660, 662, 664, 699, 725, 737, 741, 757, 764, 783, 791, 792, 797, 812, 819, 833, 837, 860, 868, 877, 895, 902, 903, 904, 953, 959, 983, 984, 986, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1044, 1045, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1100, 1102, 1109, 1201, 1226, 1307, 1319, 1329, 1330, 1331, 1332, 1348], "int64arrai": [1323, 1348], "int8": [1, 59, 87, 229, 346, 394, 395, 433, 434, 451, 454, 460, 461, 467, 471, 484, 485, 575, 737, 809, 812, 828, 837, 958, 1001, 1002, 1044, 1045, 1049, 1061, 1064, 1074, 1075, 1081, 1085, 1098, 1099, 1192, 1231, 1319, 1329, 1336, 1348], "int_rang": [236, 314, 323, 332, 346, 757, 794, 815, 877, 887, 927, 936, 953], "integ": [38, 41, 48, 70, 71, 73, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 166, 173, 175, 178, 180, 219, 236, 278, 301, 304, 346, 359, 424, 471, 504, 505, 625, 631, 633, 638, 645, 646, 658, 697, 721, 725, 751, 757, 787, 791, 792, 812, 837, 867, 877, 902, 953, 959, 1032, 1085, 1121, 1220, 1222, 1226, 1233, 1240, 1247, 1279, 1303, 1307, 1329, 1348, 1370, 1376, 1379], "integer_list": 83, "integr": [41, 308, 346, 649, 651, 653, 655, 657, 660, 662, 664, 837, 1379], "intend": [1, 168, 169, 170, 171, 730, 1312], "intens": [255, 332, 346, 626, 837, 1201, 1348], "interact": [175, 179, 214, 346, 349, 863, 953, 1348, 1353], "interchang": [131, 203], "interest": [146, 472, 475, 1086, 1089], "interfac": [0, 119, 120, 130, 131, 197, 198, 202, 849, 962, 1376], "interfer": 957, "interleav": 1371, "intermedi": [242, 346, 880, 953, 1379], "intern": [43, 44, 49, 147, 166, 248, 298, 346, 505, 837, 953, 1323, 1348, 1358], "interoper": [201, 961], "interpol": [214, 272, 338, 346, 500, 521, 588, 634, 656, 657, 810, 837, 863, 897, 942, 953, 1048, 1135, 1223, 1239, 1348, 1365], "interpolate_bi": [837, 1348], "interpolationmethod": [520, 837, 1134, 1348], "interpret": [134, 136, 145, 146, 159, 346, 403, 953, 1009], "intersect": [41, 346, 566, 959, 1183, 1375], "interv": [236, 278, 316, 346, 436, 470, 483, 516, 522, 633, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 795, 796, 824, 825, 837, 877, 902, 953, 1047, 1061, 1063, 1064, 1070, 1072, 1074, 1075, 1078, 1080, 1081, 1084, 1088, 1097, 1098, 1131, 1136, 1222, 1348, 1365], "intoexpr": [142, 206, 235, 236, 278, 284, 285, 289, 292, 309, 320, 321, 325, 346, 361, 379, 399, 402, 405, 416, 443, 468, 492, 498, 508, 516, 518, 521, 522, 545, 565, 566, 567, 568, 626, 640, 641, 649, 651, 653, 655, 657, 660, 662, 664, 668, 670, 679, 684, 694, 696, 708, 711, 712, 713, 715, 716, 717, 718, 719, 735, 743, 753, 755, 760, 763, 764, 765, 766, 767, 769, 771, 774, 778, 785, 795, 801, 803, 806, 812, 815, 819, 821, 837, 853, 876, 877, 902, 904, 905, 908, 911, 916, 923, 924, 929, 953, 986, 1005, 1008, 1011, 1053, 1109, 1115, 1133, 1135, 1136, 1162, 1228, 1229, 1248, 1252, 1278, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1348], "intoexprcolumn": [227, 241, 274, 346, 378, 382, 383, 390, 415, 416, 425, 470, 498, 501, 544, 552, 555, 564, 569, 627, 631, 667, 670, 691, 697, 700, 710, 721, 725, 730, 742, 743, 757, 762, 776, 777, 779, 780, 791, 792, 796, 824, 825, 827, 837, 873, 899, 908, 953, 985, 989, 990, 997, 1035, 1084, 1097, 1115, 1161, 1169, 1172, 1181, 1186, 1217, 1273, 1279, 1282, 1292, 1303, 1312, 1348], "introduc": [55, 97, 720, 722, 723, 1302, 1304, 1305], "introduct": 1375, "intuit": [505, 837, 959], "invalid": [38, 48, 120, 145, 146, 159, 207, 346, 417, 699, 700, 725, 744, 837, 953, 1006, 1022, 1281, 1282, 1307, 1348], "invalid_valu": 1006, "invalidoperationerror": [641, 837, 1229, 1348, 1374], "invari": [887, 953], "invers": [363, 364, 365, 366, 367, 368, 837, 970, 971, 972, 973, 974, 975, 1329, 1348, 1373], "invert": 959, "invok": [199, 584, 837], "involv": [227, 274, 346, 873, 899, 953], "io": [36, 38, 41, 43, 44, 47, 143, 145, 151, 152, 153, 154, 155, 158, 159, 161, 162, 163, 215, 286, 346, 438, 507, 599, 837, 864, 906, 953], "io_sourc": 140, "iobas": [45, 46, 154, 155, 215, 286, 346, 438, 599, 603, 837, 864, 906, 953], "ipc": [43, 44, 49, 151, 152, 153, 162, 165, 346, 849, 953], "ipccompress": [43, 44, 49, 346, 953], "is_between": [837, 1348], "is_dupl": [346, 837, 1348], "is_elementwis": [142, 584, 837], "is_empti": [346, 1348], "is_finit": [837, 1348], "is_first_distinct": [837, 1348], "is_in": [106, 227, 346, 837, 1348], "is_infinit": [837, 1348], "is_last_distinct": [837, 1348], "is_nan": [218, 346, 837, 866, 953, 1348], "is_not_nan": [837, 1348], "is_not_nul": [274, 346, 837, 899, 953, 1348], "is_nul": [219, 346, 837, 867, 953, 1348], "is_numer": 1379, "is_odd": [284, 346, 904, 953, 959], "is_selector": 959, "is_sort": 1348, "is_uniqu": [346, 837, 1348], "isn": [95, 140, 827], "iso": [456, 475, 484, 485, 1066, 1089, 1098, 1099, 1371], "iso8601": [145, 146, 159, 475, 1089], "iso_lang": 1371, "iso_year": 487, "isodow": 1372, "isoweek": 1372, "isoyear": 1372, "issu": [99, 100, 103, 104, 107, 114, 116, 127, 145, 146, 147, 159, 346, 433, 434, 737, 837, 1044, 1045, 1319, 1348, 1376], "ital": [41, 346], "item": [14, 64, 146, 234, 279, 282, 346, 378, 382, 383, 439, 497, 544, 546, 553, 555, 564, 667, 713, 837, 985, 989, 990, 1049, 1113, 1161, 1163, 1170, 1172, 1181, 1246, 1295, 1348], "iter": [56, 62, 63, 64, 74, 129, 130, 133, 140, 142, 147, 178, 180, 206, 216, 227, 235, 236, 247, 248, 249, 252, 274, 278, 279, 280, 281, 284, 285, 292, 309, 310, 320, 321, 324, 325, 346, 416, 435, 443, 501, 626, 679, 735, 743, 753, 755, 760, 762, 763, 764, 765, 766, 774, 801, 803, 806, 815, 819, 821, 827, 833, 837, 853, 865, 873, 876, 877, 883, 899, 902, 904, 905, 911, 916, 923, 924, 929, 953, 958, 959, 1046, 1053, 1118, 1247, 1348, 1379], "iter_batch": 147, "iter_column": 346, "iter_row": [249, 279, 280, 281, 346], "iter_slic": 346, "its": [75, 137, 167, 222, 304, 346, 447, 470, 483, 492, 584, 644, 679, 734, 827, 837, 861, 868, 922, 953, 957, 1029, 1057, 1084, 1097, 1107, 1109, 1232, 1329, 1348, 1378], "itself": [173, 346, 349, 350, 585, 648, 650, 652, 654, 656, 658, 659, 661, 663, 813, 814, 837, 885, 953, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1348, 1353, 1357, 1358, 1376], "ix": [270, 346], "j": [310, 346, 1367], "jax": [303, 346, 1327, 1348], "jax_enable_x64": [303, 346], "jaxexporttyp": [303, 346], "jjk": 959, "jkl": [692, 1274], "jklmn": 1371, "job": [854, 953], "join": [48, 49, 50, 51, 55, 56, 62, 63, 64, 97, 129, 227, 251, 252, 274, 315, 346, 501, 520, 626, 682, 816, 837, 858, 859, 869, 873, 882, 883, 896, 899, 909, 920, 925, 953, 1264, 1358, 1360, 1366, 1375, 1376], "join_asof": [250, 346, 881, 953], "join_wher": [346, 953], "joinstrategi": [56, 250, 346, 881, 953], "joinvalid": [250, 346, 881, 953], "jpy": 1379, "json": [2, 3, 5, 6, 45, 46, 141, 142, 154, 155, 161, 163, 192, 215, 286, 346, 438, 507, 599, 603, 699, 700, 732, 837, 849, 864, 906, 953, 1281, 1282, 1315], "json_path": [700, 1282], "json_path_match": [699, 1281], "json_stat": 5, "json_str": [154, 155], "json_val": [700, 1282], "jsonencod": 141, "jsonpath": [699, 700, 1281, 1282], "jst": [137, 959], "jul": [720, 1302, 1371], "juli": [1089, 1371, 1372], "just": [41, 135, 147, 159, 261, 313, 346, 891, 919, 953, 959], "k": [206, 281, 309, 310, 346, 415, 416, 430, 534, 742, 743, 837, 853, 916, 953, 1021, 1041, 1151, 1333, 1348], "k_2": [676, 837, 1259, 1348], "k_3": [676, 837, 1259, 1348], "kadokawa": [703, 1285], "kanji": 959, "karen": [270, 346], "kathmandu": [1059, 1060, 1087], "kb": [222, 346, 404, 1010, 1107, 1348], "kde": [1348, 1353], "keep": [56, 145, 146, 155, 159, 162, 163, 227, 311, 315, 316, 346, 507, 584, 602, 610, 640, 763, 837, 917, 920, 953, 1228, 1348], "kei": [38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 61, 64, 149, 155, 157, 159, 160, 161, 162, 163, 164, 189, 204, 236, 248, 250, 251, 262, 268, 275, 277, 280, 281, 315, 346, 501, 585, 640, 641, 708, 776, 779, 819, 837, 877, 881, 882, 892, 898, 900, 901, 920, 953, 959, 963, 1228, 1229, 1290, 1348, 1364], "kept": [311, 346, 917, 953], "keyerror": 17, "keystrok": 833, "keyword": [40, 149, 157, 160, 175, 179, 189, 212, 235, 269, 279, 284, 285, 305, 320, 321, 325, 346, 501, 630, 735, 815, 819, 827, 837, 876, 895, 904, 905, 923, 924, 929, 953, 1330, 1348, 1361], "kl": 707, "kleen": [358, 360, 752, 753, 754, 755, 837, 966, 967, 1348], "klmnoopqrstuvwxyz": [249, 346], "knight": 1357, "know": [56, 147, 270, 313, 346, 576, 584, 837, 919, 953], "known": [151, 193, 395, 576, 936, 1002, 1193], "kurtosi": [837, 1348], "kuzu_db_conn": 147, "kwarg": [32, 33, 37, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 142, 144, 147, 148, 175, 177, 179, 192, 196, 212, 227, 269, 274, 305, 346, 349, 630, 837, 873, 895, 899, 928, 953, 1330, 1348, 1353, 1361, 1376], "k\u00f9zudb": 147, "l": [795, 796], "l1": 64, "l2": 64, "label": [236, 303, 308, 346, 349, 350, 436, 633, 647, 648, 650, 652, 654, 656, 659, 661, 663, 837, 877, 896, 953, 1047, 1222, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1348, 1353], "label_column": [308, 346], "labelangl": [346, 349, 1348, 1353], "lag": [289, 346, 390, 569, 670, 765, 837, 908, 953, 997, 1186, 1252, 1348], "lake": [40, 149, 160, 346, 849], "lambda": [95, 159, 229, 255, 269, 270, 275, 332, 346, 395, 493, 494, 576, 584, 585, 610, 611, 771, 772, 785, 798, 799, 811, 837, 887, 895, 900, 936, 953, 1002, 1110, 1111, 1193, 1201, 1348], "land": [443, 1053], "languag": [159, 236, 251, 278, 316, 346, 465, 470, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097, 1109, 1348], "larg": [11, 12, 15, 56, 147, 150, 156, 164], "large_str": [249, 298, 305, 346], "larger": [11, 48, 49, 50, 51, 505, 767, 837, 953], "largest": [206, 309, 346, 416, 742, 743, 837, 853, 916, 953, 1333, 1348], "last": [40, 155, 159, 162, 163, 168, 169, 170, 171, 238, 251, 254, 270, 281, 292, 297, 304, 311, 340, 346, 371, 382, 391, 435, 451, 462, 466, 484, 506, 528, 553, 571, 574, 576, 609, 610, 612, 614, 616, 617, 626, 641, 678, 679, 697, 713, 721, 738, 760, 822, 833, 837, 882, 911, 915, 917, 944, 953, 959, 978, 989, 998, 1046, 1061, 1076, 1080, 1098, 1130, 1143, 1155, 1170, 1188, 1191, 1229, 1261, 1279, 1295, 1303, 1320, 1329, 1348, 1369, 1371], "last_column": [41, 346], "later": [251, 286, 346, 599, 882, 906, 953], "latest": [33, 131, 149, 160, 203, 468, 469, 597, 720, 723, 778, 1082, 1083, 1302, 1305], "latt": 959, "latter": [41, 131, 224, 346, 1114, 1348], "lazi": [1, 48, 49, 50, 51, 52, 64, 145, 151, 155, 157, 159, 175, 251, 269, 270, 293, 346, 585, 787, 809, 812, 828, 837, 863, 881, 882, 925, 929, 930, 932, 934, 936, 937, 938, 939, 940, 941, 942, 943, 953, 959, 1357, 1358, 1359, 1360, 1361, 1363, 1376, 1379], "lazili": [145, 146, 151, 155, 157, 159, 160, 161, 162, 163, 164, 859, 953], "lazy_fram": [62, 63, 129], "lazyfram": [0, 1, 10, 56, 57, 58, 59, 60, 62, 63, 64, 95, 129, 140, 145, 151, 155, 157, 159, 160, 161, 162, 163, 164, 165, 168, 169, 175, 189, 210, 215, 253, 269, 270, 286, 293, 346, 438, 501, 576, 599, 815, 816, 837, 849, 950, 951, 952, 958, 959, 1357, 1358, 1361, 1363, 1376, 1377, 1379], "lazyframeext": [898, 953], "lazygroupbi": [876, 877, 902, 953], "lbl": [303, 308, 346], "ldf": [1, 929, 930, 932, 934, 937, 938, 939, 940, 941, 942, 943], "ldot": [492, 837, 1109, 1348], "le": [688, 837, 1348], "lead": [15, 47, 95, 137, 140, 165, 259, 287, 289, 296, 346, 390, 508, 511, 569, 576, 584, 585, 669, 670, 715, 717, 767, 803, 821, 837, 887, 907, 908, 936, 953, 997, 1186, 1201, 1250, 1252, 1297, 1299, 1348], "leap": [455, 465, 1065, 1079], "leap_year": 455, "learn": [308, 346], "least": [64, 110, 270, 346, 412, 413, 627, 691, 693, 837, 1018, 1019, 1217, 1273, 1275, 1348, 1369], "leav": [6, 261, 313, 346, 576, 891, 919, 953], "left": [16, 17, 41, 56, 168, 169, 170, 171, 236, 250, 251, 278, 315, 346, 436, 491, 492, 493, 494, 520, 522, 633, 646, 649, 651, 653, 655, 657, 660, 662, 664, 668, 741, 763, 771, 772, 776, 777, 779, 780, 785, 795, 796, 811, 824, 825, 827, 837, 877, 881, 882, 902, 920, 953, 1047, 1108, 1109, 1110, 1111, 1136, 1222, 1248, 1331, 1348, 1360, 1364, 1369], "left_clos": [436, 633, 837, 1047, 1222, 1348], "left_on": [250, 251, 315, 346, 881, 882, 920, 953], "left_right": [250, 315, 346, 881, 920, 953], "leftmost": [668, 837, 1248, 1348, 1371], "len": [13, 175, 179, 210, 249, 270, 323, 327, 332, 346, 429, 585, 596, 598, 636, 644, 768, 791, 795, 837, 860, 922, 927, 931, 936, 953, 958, 1040, 1232, 1348], "len_byt": [13, 421, 702, 703, 1027, 1284], "len_char": [420, 701, 1026, 1283], "length": [64, 65, 83, 142, 150, 156, 159, 173, 177, 234, 236, 278, 291, 346, 349, 420, 435, 470, 483, 570, 576, 597, 636, 640, 641, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 677, 697, 701, 702, 704, 705, 708, 710, 721, 730, 764, 795, 796, 809, 812, 813, 814, 828, 837, 877, 896, 902, 910, 953, 1026, 1033, 1046, 1057, 1084, 1097, 1187, 1193, 1214, 1228, 1229, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1260, 1279, 1283, 1284, 1286, 1287, 1290, 1292, 1303, 1312, 1348, 1365, 1366, 1369], "leq": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "less": [54, 159, 251, 346, 505, 536, 583, 584, 713, 837, 882, 953, 1295, 1379], "letter": [223, 329, 340, 346, 495, 684, 692, 694, 696, 708, 728, 783, 837, 870, 933, 944, 953, 959, 1266, 1274, 1276, 1278, 1290, 1310, 1371], "level": [11, 41, 43, 44, 47, 49, 51, 141, 159, 162, 163, 164, 229, 255, 266, 293, 298, 346, 350, 501, 837, 849, 912, 953, 1323, 1348, 1376], "lexic": [68, 959, 1030], "lf": [10, 48, 49, 50, 51, 59, 95, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 926, 927, 931, 935, 953, 1365, 1376, 1379], "lf1": [816, 912, 953, 1361, 1363, 1377], "lf2": [816, 912, 953, 1361, 1363, 1377], "lf3": [953, 1361], "lf4": [953, 1361], "lf5": 953, "lf6": 953, "lf_other": [925, 953], "lib": [837, 1323, 1348], "librari": [1, 112, 142, 147, 150, 584, 837, 957, 1379], "life": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "lifetim": [199, 848, 1363], "light": [41, 346], "like": [36, 38, 40, 43, 44, 45, 46, 47, 63, 131, 142, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 215, 236, 243, 245, 250, 281, 286, 303, 304, 346, 349, 438, 444, 507, 548, 584, 602, 636, 691, 716, 717, 748, 833, 837, 854, 859, 864, 877, 953, 1054, 1165, 1224, 1273, 1337, 1348, 1353], "limit": [11, 12, 51, 52, 147, 148, 181, 226, 346, 398, 500, 506, 837, 872, 953, 1117, 1348, 1366, 1375], "line": [11, 21, 41, 145, 146, 150, 159, 234, 243, 245, 346, 349, 691, 1273, 1348, 1353], "line_termin": [38, 48, 346, 953], "linear": [214, 242, 272, 338, 346, 520, 521, 543, 588, 634, 656, 657, 765, 766, 810, 837, 863, 880, 897, 942, 953, 1048, 1134, 1135, 1160, 1223, 1239, 1348], "linearli": 796, "lineitem": [139, 146, 148], "link": 957, "list": [1, 14, 34, 40, 41, 56, 57, 59, 62, 63, 65, 71, 87, 104, 129, 130, 132, 133, 134, 136, 137, 139, 140, 143, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 173, 174, 175, 179, 186, 187, 188, 194, 211, 216, 220, 222, 223, 227, 233, 235, 236, 240, 248, 265, 268, 274, 278, 279, 280, 281, 284, 292, 299, 300, 308, 310, 311, 312, 314, 320, 325, 326, 346, 356, 383, 394, 395, 396, 436, 443, 497, 503, 508, 517, 526, 584, 585, 597, 598, 626, 633, 639, 642, 647, 648, 650, 652, 654, 656, 659, 661, 663, 678, 679, 690, 692, 694, 696, 711, 731, 733, 734, 741, 760, 762, 765, 776, 777, 779, 780, 782, 790, 792, 796, 797, 799, 817, 819, 825, 833, 837, 861, 868, 870, 873, 876, 877, 899, 904, 911, 917, 918, 923, 925, 929, 930, 953, 958, 959, 990, 1001, 1002, 1003, 1033, 1047, 1053, 1107, 1113, 1122, 1125, 1131, 1132, 1141, 1201, 1222, 1230, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1266, 1272, 1274, 1276, 1278, 1290, 1293, 1328, 1331, 1348, 1357, 1362, 1366, 1368, 1378, 1379], "list_catalog": 197, "list_namespac": 197, "list_of_seri": 799, "list_tabl": 197, "listtostructwidthstrategi": [576, 1193], "lit": [1, 357, 399, 522, 593, 609, 695, 764, 765, 771, 785, 809, 812, 828, 837, 1117, 1348], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 48, 49, 50, 51, 147, 149, 155, 157, 159, 160, 162, 163, 164, 178, 179, 180, 189, 192, 196, 265, 284, 285, 289, 315, 320, 321, 346, 357, 399, 418, 422, 425, 447, 468, 489, 490, 498, 505, 510, 512, 522, 536, 583, 593, 605, 607, 620, 621, 631, 640, 641, 683, 684, 685, 694, 695, 696, 706, 707, 708, 735, 736, 744, 753, 755, 757, 763, 764, 765, 766, 774, 775, 778, 791, 795, 797, 801, 803, 806, 815, 819, 821, 823, 837, 872, 904, 905, 908, 920, 923, 924, 953, 959, 1005, 1035, 1057, 1082, 1105, 1115, 1136, 1213, 1228, 1229, 1247, 1249, 1252, 1265, 1266, 1267, 1276, 1277, 1278, 1288, 1289, 1290, 1348, 1371], "littl": [280, 346, 403, 1009], "lmn": 959, "ln": [491, 492, 493, 494, 837, 1108, 1109, 1110, 1111, 1348, 1369], "ln_a": 1370, "load": [3, 5, 6, 133, 135, 142, 147, 149, 150, 156, 160, 161, 178, 180, 346, 837, 849, 953, 1379], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 150, "load_tabl": 150, "load_workbook": 150, "loader": [308, 346], "lobster": [695, 1277], "loc": [346, 350], "local": [4, 40, 147, 149, 160, 161, 164, 346, 483, 628, 629, 837, 1025, 1029, 1059, 1060, 1084, 1087, 1097, 1218, 1219, 1348, 1358], "localhost": 147, "localis": [470, 483, 1097], "locat": [41, 157, 159, 162, 164, 224, 276, 306, 312, 346, 668, 837, 918, 953, 1114, 1122, 1247, 1248, 1348], "lock": 181, "log": [30, 58, 416, 488, 581, 607, 631, 743, 837, 1103, 1348, 1369], "log10": [837, 1348, 1369], "log10_a": 1370, "log16_a": 1370, "log1p": [837, 1348, 1369], "log1p_a": 1370, "log2": 1369, "logarithm": [579, 580, 581, 837, 1196, 1197, 1198, 1348, 1370], "logic": [64, 255, 332, 346, 349, 350, 358, 360, 438, 585, 741, 752, 753, 754, 755, 799, 837, 864, 869, 881, 898, 906, 936, 953, 966, 967, 1201, 1329, 1331, 1348, 1353], "london": [448, 452, 469, 1058, 1062, 1083], "london_timezon": [469, 1083], "london_to_amsterdam": [469, 1083], "long": [223, 261, 270, 313, 314, 346, 403, 870, 891, 919, 953, 1009], "longer": [145, 146, 159], "longest": 576, "look": [11, 236, 346, 399, 576, 877, 953, 1005], "lookup": 833, "loop": [147, 585, 837], "lose": [445, 1055], "lossi": [145, 146, 159], "lot": 54, "love": [684, 708, 1266, 1290], "low": [18, 147, 425, 633, 837, 1222, 1348], "low_memori": [145, 146, 155, 157, 159, 163, 164], "lower": [159, 214, 236, 272, 338, 346, 425, 522, 582, 610, 634, 638, 656, 657, 757, 776, 777, 779, 780, 795, 796, 810, 824, 825, 837, 863, 877, 897, 942, 953, 1035, 1048, 1136, 1199, 1223, 1226, 1239, 1336, 1348, 1366, 1369], "lower_bound": [236, 346, 425, 522, 837, 877, 953, 1035, 1136, 1336, 1348], "lowercas": [616, 726, 728, 1308, 1310, 1371], "lowest": [582, 837], "lru_cach": [255, 346, 585, 837, 1201, 1348], "lst": 174, "lt": [167, 501, 750, 837, 1348], "ltrim": 1369, "lyric": [684, 708, 1266, 1290], "lz4": [43, 44, 47, 49, 51, 346, 953], "lzo": [47, 51, 346, 953], "m": [71, 73, 250, 346, 444, 445, 447, 452, 453, 472, 474, 475, 486, 691, 720, 722, 723, 727, 778, 779, 780, 781, 787, 795, 881, 953, 959, 1054, 1055, 1057, 1062, 1063, 1086, 1088, 1089, 1100, 1273, 1302, 1304, 1305, 1309, 1361, 1371, 1372], "m_2": [676, 837, 1259, 1348], "m_3": [676, 837, 1259, 1348], "m_i": [676, 837, 1259, 1348], "machin": 1379, "maco": 167, "made": [41, 147, 346, 475, 1089], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 64, 72, 78, 130, 131, 132, 133, 134, 136, 140, 141, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 199, 214, 215, 222, 224, 236, 250, 251, 252, 255, 278, 286, 293, 303, 305, 308, 315, 316, 346, 349, 350, 420, 435, 436, 438, 443, 444, 445, 456, 465, 470, 472, 483, 495, 516, 551, 576, 584, 585, 596, 599, 633, 646, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 694, 696, 699, 701, 707, 762, 764, 771, 772, 776, 777, 779, 780, 785, 795, 796, 811, 824, 825, 837, 858, 859, 863, 864, 877, 881, 882, 883, 887, 902, 906, 912, 920, 926, 927, 936, 953, 1026, 1029, 1030, 1046, 1047, 1048, 1053, 1054, 1055, 1066, 1079, 1084, 1086, 1097, 1107, 1114, 1131, 1168, 1201, 1222, 1234, 1237, 1239, 1240, 1276, 1278, 1281, 1283, 1327, 1330, 1332, 1348, 1353, 1379], "main": [167, 859, 953], "maintain": [48, 49, 50, 51, 292, 346, 396, 577, 668, 679, 745, 760, 837, 863, 911, 953, 1003, 1194, 1248, 1334, 1348], "maintain_ord": [48, 49, 50, 51, 235, 250, 268, 270, 292, 311, 315, 316, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 346, 356, 396, 406, 411, 414, 416, 508, 511, 577, 585, 679, 743, 745, 760, 837, 859, 869, 876, 881, 896, 909, 911, 917, 920, 930, 932, 934, 937, 938, 939, 940, 941, 942, 943, 953, 1003, 1194, 1334, 1348], "maintainorderjoin": [250, 315, 346, 881, 920, 953], "major": [150, 303, 346], "make": [41, 64, 87, 130, 131, 135, 142, 145, 146, 149, 150, 151, 153, 157, 160, 262, 266, 273, 304, 316, 346, 349, 493, 494, 516, 616, 617, 626, 639, 712, 837, 892, 953, 1110, 1111, 1131, 1294, 1329, 1348], "man": [709, 1291], "manag": [55, 96, 97, 196, 848, 849, 1363, 1376], "managed_shallow_clon": 196, "mandatori": [41, 346], "mango": [418, 422, 688, 714, 1023, 1028, 1270, 1296], "mani": [147, 148, 164, 224, 346, 694, 696, 708, 1114, 1276, 1290, 1348, 1352], "manner": 147, "many_to_mani": [250, 346, 881, 953], "many_to_on": [250, 346, 881, 953], "map": [52, 54, 87, 132, 133, 145, 146, 147, 148, 151, 152, 157, 158, 159, 162, 175, 207, 210, 228, 248, 255, 275, 279, 280, 281, 283, 299, 346, 357, 470, 483, 584, 585, 609, 611, 612, 614, 616, 617, 640, 641, 708, 748, 798, 837, 855, 900, 903, 953, 958, 959, 1048, 1084, 1097, 1201, 1228, 1229, 1290, 1337, 1348, 1358, 1360, 1361, 1376], "map_": 116, "map_batch": [837, 953], "map_el": [107, 255, 346, 584, 751, 837, 1348], "map_field": [613, 615], "map_row": 346, "mapelementsstrategi": [585, 837], "mapping_strategi": [626, 837], "march": [472, 1086], "mariadb": 148, "mark": [41, 141, 346, 417, 837, 1022, 1348], "mark_area": [1348, 1353], "mark_attr": [346, 349, 1348, 1353], "mark_bar": [346, 349, 1348, 1353], "mark_lin": [346, 349], "mark_point": [346, 349], "markdown": [7, 21, 199], "marker": [41, 346], "mask": [164, 175, 179, 243, 245, 346, 400, 523, 525, 528, 533, 628, 629, 683, 686, 695, 837, 1006, 1118, 1136, 1137, 1140, 1143, 1149, 1218, 1219, 1249, 1265, 1268, 1277, 1339, 1348], "mass": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "massag": [261, 313, 346, 891, 919, 953], "match": [40, 41, 64, 71, 95, 118, 130, 132, 133, 134, 136, 140, 145, 147, 154, 155, 157, 163, 164, 168, 169, 170, 171, 207, 226, 227, 250, 251, 274, 279, 315, 346, 418, 422, 592, 593, 594, 640, 641, 658, 683, 684, 685, 688, 691, 692, 694, 695, 696, 699, 700, 706, 707, 708, 714, 720, 722, 723, 827, 833, 837, 855, 872, 881, 882, 899, 920, 953, 959, 1023, 1028, 1106, 1228, 1229, 1240, 1265, 1266, 1267, 1270, 1273, 1274, 1276, 1277, 1278, 1281, 1282, 1288, 1289, 1290, 1296, 1302, 1304, 1305, 1348, 1371], "matches_overlap": [694, 696, 1278], "matches_supertyp": [226, 346, 872, 953], "materi": [140, 145, 151, 155, 157, 255, 281, 332, 346, 858, 896, 936, 946, 953, 959, 1201, 1348], "materialis": [248, 249, 279, 280, 346], "materialized_view": 196, "math": [1, 11, 60, 270, 346, 437, 837, 1037, 1039, 1257, 1321, 1348, 1369, 1373, 1375], "mathemat": [744, 782, 837, 1369], "mathshortcut": [1, 60], "matplotlib": [167, 600, 896, 909, 953], "matter": [236, 248, 278, 280, 281, 300, 346, 646, 716, 717, 837, 877, 902, 953], "max": [10, 26, 41, 47, 51, 141, 214, 226, 235, 257, 270, 278, 346, 350, 431, 500, 576, 584, 626, 636, 640, 641, 646, 648, 649, 669, 713, 764, 776, 779, 801, 817, 837, 863, 872, 876, 902, 953, 1042, 1048, 1117, 1193, 1224, 1235, 1250, 1295, 1348, 1357, 1366, 1369], "max_a": [278, 346, 646, 837, 902, 953], "max_binary_s": 147, "max_col": [173, 175], "max_colname_length": [234, 346], "max_color": [41, 346], "max_data_s": 179, "max_elem": 1366, "max_horizont": [346, 800], "max_items_per_column": [234, 346], "max_level": 141, "max_siz": [53, 174, 175, 177, 179, 1379], "max_text_s": 147, "max_valu": 1379, "max_width": [576, 1193], "maxim": [333, 369, 837, 937, 976, 1348], "maximum": [11, 27, 38, 47, 48, 51, 53, 72, 133, 136, 145, 146, 147, 150, 154, 155, 156, 159, 163, 165, 173, 174, 175, 177, 179, 234, 236, 256, 257, 346, 376, 421, 541, 586, 618, 628, 636, 697, 699, 702, 710, 721, 800, 801, 837, 877, 888, 953, 983, 1027, 1067, 1158, 1202, 1210, 1218, 1224, 1279, 1281, 1284, 1292, 1303, 1348, 1365], "mb": [222, 346, 404, 1107, 1348], "me": [684, 708, 728, 1266, 1290, 1310], "mean": [47, 51, 62, 129, 145, 146, 151, 157, 159, 162, 199, 214, 226, 235, 236, 251, 259, 270, 278, 316, 325, 346, 465, 470, 483, 497, 500, 505, 646, 649, 650, 651, 653, 655, 657, 660, 662, 664, 676, 682, 691, 698, 776, 777, 779, 780, 781, 803, 824, 825, 827, 837, 863, 872, 876, 877, 882, 887, 902, 929, 953, 1048, 1079, 1084, 1097, 1113, 1117, 1236, 1259, 1264, 1273, 1280, 1348, 1365, 1366], "mean_horizont": [346, 802], "measur": [261, 313, 346, 350, 891, 919, 953], "measure_a": [346, 350], "measure_b": [346, 350], "median": [214, 270, 346, 500, 652, 653, 837, 863, 925, 953, 1048, 1237, 1348, 1369], "mediat": 1376, "medium": [41, 346], "megan": [262, 346, 892, 953], "melt": [313, 346, 919, 953], "member": [236, 346, 877, 953, 1141, 1348], "membership": [378, 544, 985, 1161], "memori": [10, 15, 47, 51, 62, 63, 64, 130, 131, 134, 135, 136, 145, 146, 147, 149, 150, 151, 155, 157, 159, 160, 162, 163, 164, 203, 224, 255, 280, 281, 290, 304, 332, 346, 626, 637, 671, 837, 858, 859, 869, 896, 909, 928, 953, 1114, 1201, 1225, 1253, 1254, 1329, 1348], "memory_map": [151, 157, 162], "memory_resourc": 928, "merg": [40, 250, 251, 262, 346, 881, 882, 892, 953], "merge_sort": [346, 953], "messi": [691, 693, 1273, 1275], "met": 827, "meta": [98, 438, 689, 837, 1271], "metadata": [0, 48, 49, 50, 51, 161, 185, 189, 849, 953], "metastor": 190, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 52, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 128, 131, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 172, 175, 179, 184, 190, 191, 193, 194, 199, 201, 210, 214, 215, 218, 219, 224, 231, 235, 242, 248, 255, 266, 272, 279, 280, 281, 289, 311, 320, 327, 332, 338, 346, 355, 358, 359, 390, 425, 438, 472, 475, 489, 490, 498, 505, 507, 510, 512, 520, 536, 569, 583, 585, 603, 605, 607, 609, 610, 612, 614, 616, 617, 620, 621, 622, 625, 631, 634, 636, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 670, 684, 694, 696, 708, 716, 717, 718, 719, 724, 730, 736, 744, 746, 751, 767, 799, 810, 829, 830, 832, 833, 837, 838, 839, 842, 843, 844, 845, 846, 849, 859, 863, 864, 866, 867, 880, 897, 908, 917, 923, 928, 931, 936, 942, 953, 958, 961, 968, 997, 1035, 1048, 1086, 1089, 1104, 1105, 1114, 1115, 1124, 1126, 1134, 1153, 1186, 1200, 1201, 1212, 1213, 1223, 1224, 1239, 1252, 1266, 1276, 1278, 1290, 1306, 1312, 1331, 1340, 1342, 1344, 1348, 1349, 1352, 1354, 1355, 1356, 1358, 1362], "metric": 147, "micro": [471, 1085], "microsecond": [71, 73, 236, 248, 251, 278, 280, 281, 300, 316, 346, 465, 468, 470, 475, 478, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 778, 779, 780, 781, 823, 824, 825, 837, 877, 882, 896, 902, 953, 959, 1079, 1082, 1084, 1092, 1097, 1109, 1348, 1372], "microsoft": [34, 41, 346], "mid_color": [41, 346], "midnight": 88, "midpoint": [214, 272, 338, 346, 634, 656, 657, 810, 837, 863, 897, 942, 953, 1048, 1223, 1239, 1348], "might": [145, 146, 159, 181, 250, 270, 304, 313, 346, 585, 746, 837, 881, 911, 919, 953], "millennia": 1372, "millennium": 1372, "milli": [471, 1085], "millisecond": [236, 251, 278, 316, 346, 454, 460, 465, 470, 479, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 779, 780, 781, 795, 824, 825, 837, 877, 882, 902, 953, 959, 1079, 1084, 1093, 1097, 1109, 1348, 1372], "milliseconds_diff": [478, 479, 481], "mimic": 765, "min": [41, 47, 51, 142, 214, 226, 264, 270, 278, 346, 432, 500, 585, 626, 636, 646, 654, 655, 776, 779, 806, 815, 837, 863, 872, 902, 953, 1043, 1048, 1117, 1224, 1238, 1348, 1366, 1369, 1372, 1379], "min_a": [278, 346, 646, 837, 902, 953], "min_col": [173, 175], "min_color": [41, 346], "min_elem": 1366, "min_horizont": [346, 805, 815], "min_sampl": [435, 491, 493, 494, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 813, 814, 837, 1046, 1108, 1110, 1111, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1348], "min_siz": [174, 175, 177, 179, 1379], "min_valu": 1379, "mincol": 173, "minim": [336, 370, 377, 542, 671, 679, 837, 940, 977, 984, 1159, 1205, 1253, 1348], "minimum": [47, 51, 173, 174, 175, 177, 179, 229, 263, 264, 346, 491, 493, 494, 604, 619, 629, 636, 805, 806, 837, 893, 953, 1073, 1108, 1110, 1111, 1211, 1219, 1224, 1348, 1365, 1379], "minu": [465, 622, 837, 1079], "minut": [236, 251, 278, 316, 346, 454, 457, 459, 464, 465, 468, 470, 471, 480, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 778, 779, 780, 781, 823, 824, 825, 837, 877, 882, 902, 953, 959, 1079, 1082, 1084, 1094, 1097, 1109, 1348, 1372], "minutes_diff": 480, "misc": 1363, "miscellan": 849, "mismatch": [64, 121, 155, 163, 168, 170], "miss": [64, 145, 146, 159, 225, 231, 346, 398, 491, 493, 494, 499, 506, 529, 530, 576, 837, 871, 953, 1108, 1110, 1111, 1116, 1348], "missing_utf8_is_empty_str": [145, 146, 159], "mix": [12, 251, 304, 346, 764, 816, 882, 912, 953, 959, 1048, 1348], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 54, 953], "mlnm": 458, "mm": [41, 346], "mn": 1371, "mno": [17, 21], "mnop": 1371, "mo": 781, "mocha": 959, "mod": [837, 1369], "mode": [39, 40, 41, 42, 48, 49, 50, 51, 168, 170, 270, 293, 346, 692, 809, 812, 828, 837, 858, 869, 896, 909, 953, 1274, 1348, 1357, 1358, 1376], "model": [308, 346], "modifi": [145, 146, 159, 181, 199, 224, 240, 247, 248, 318, 346, 372, 469, 486, 683, 691, 692, 695, 706, 707, 726, 728, 729, 837, 968, 1083, 1100, 1114, 1265, 1273, 1274, 1277, 1288, 1289, 1308, 1310, 1311, 1348], "modul": [100, 108, 150, 836, 957, 959, 1379], "modulu": [605, 837], "moment": [47, 48, 49, 50, 51, 62, 63, 212, 346, 534, 676, 837, 858, 859, 869, 896, 909, 953, 1151, 1259, 1348], "mon": [346, 349, 1372], "mondai": [236, 346, 443, 483, 485, 762, 877, 953, 1053, 1097, 1099], "monkei": [704, 705, 1286, 1287], "month": [236, 251, 278, 316, 346, 451, 462, 463, 465, 468, 470, 472, 475, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 775, 776, 777, 778, 779, 780, 781, 824, 825, 837, 877, 882, 902, 953, 1061, 1076, 1077, 1079, 1082, 1084, 1086, 1089, 1097, 1109, 1348, 1372], "month_nam": [472, 475], "monthbegin": [463, 1077], "monthend": [462, 1076], "moos": 959, "more": [21, 41, 47, 51, 56, 64, 96, 97, 126, 130, 131, 132, 133, 134, 135, 136, 140, 142, 147, 148, 149, 150, 154, 155, 156, 157, 160, 161, 163, 168, 170, 175, 199, 201, 212, 214, 218, 227, 247, 248, 255, 261, 266, 274, 279, 280, 282, 293, 303, 304, 308, 311, 313, 332, 346, 350, 359, 396, 420, 501, 505, 513, 534, 564, 577, 581, 584, 585, 625, 626, 667, 676, 692, 701, 720, 722, 723, 745, 756, 768, 784, 790, 793, 802, 804, 807, 808, 817, 827, 833, 837, 863, 866, 867, 873, 891, 898, 899, 912, 917, 919, 928, 953, 957, 959, 961, 1003, 1026, 1029, 1048, 1127, 1128, 1151, 1181, 1194, 1201, 1246, 1259, 1274, 1283, 1302, 1304, 1305, 1327, 1329, 1334, 1348, 1363, 1364, 1374, 1377, 1378, 1379], "more_bi": [268, 292, 346, 679, 837, 911, 953], "more_column": [223, 312, 346, 495, 783, 837, 870, 918, 953, 959], "more_expr": [626, 760, 763, 764, 765, 766, 837], "more_nam": [731, 833], "most": [41, 130, 145, 146, 148, 159, 168, 169, 170, 171, 304, 346, 409, 410, 597, 606, 627, 641, 713, 837, 1015, 1016, 1206, 1217, 1229, 1295, 1329, 1348, 1360, 1376], "mostli": [298, 346, 501, 837], "move": [270, 281, 346, 443, 491, 492, 493, 494, 648, 650, 654, 661, 837, 1053, 1108, 1109, 1110, 1111, 1235, 1236, 1238, 1242, 1348], "mr": 928, "mssql": [39, 346], "much": [255, 314, 332, 346, 420, 421, 435, 551, 585, 701, 702, 799, 837, 936, 1026, 1027, 1046, 1168, 1201, 1283, 1284, 1348], "mul": 837, "multi": [8, 41, 145, 146, 308, 346, 495, 691, 837, 1273], "multi_fram": [41, 346], "multicolselector": 204, "multiindexselector": [204, 963], "multipl": [41, 54, 62, 63, 64, 113, 129, 145, 146, 150, 151, 155, 156, 157, 159, 162, 163, 164, 173, 175, 179, 216, 222, 224, 227, 235, 236, 240, 249, 252, 268, 270, 274, 281, 284, 292, 315, 320, 325, 346, 416, 551, 584, 590, 597, 606, 607, 626, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 679, 731, 743, 760, 768, 785, 798, 800, 805, 811, 817, 820, 827, 833, 837, 849, 858, 859, 865, 869, 873, 876, 877, 883, 896, 899, 904, 909, 911, 920, 923, 929, 936, 953, 968, 998, 1107, 1114, 1168, 1188, 1206, 1228, 1230, 1261, 1348, 1361, 1366], "multipli": [584, 647, 648, 650, 652, 654, 656, 659, 661, 663, 735, 837, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1348], "multithread": [292, 346, 679, 760, 837, 911, 953, 998, 1188, 1261, 1348], "must": [34, 41, 74, 95, 132, 140, 142, 145, 149, 157, 160, 161, 164, 165, 214, 223, 236, 251, 252, 262, 270, 278, 279, 346, 436, 576, 585, 600, 633, 640, 641, 646, 708, 764, 776, 777, 796, 827, 837, 863, 870, 877, 882, 883, 887, 892, 902, 909, 928, 953, 1047, 1048, 1222, 1228, 1229, 1290, 1348], "mutual": [279, 346], "my": [161, 165, 346, 349, 1348, 1353], "my_bucket": [898, 953], "my_column": 936, "my_column_": [310, 346], "my_column_0": [310, 346], "my_column_1": [310, 346], "my_column_2": [310, 346], "my_custom_aggreg": 799, "my_fil": 151, "my_holidai": [443, 762, 1053], "my_larger_than_ram_fil": [48, 49, 50, 51, 953], "my_long_fil": 159, "my_struct": 819, "mydf": 159, "myrol": 148, "mysql": 148, "n": [1, 13, 14, 18, 26, 27, 38, 46, 48, 57, 58, 59, 60, 71, 73, 139, 140, 145, 146, 150, 155, 159, 175, 208, 224, 230, 236, 238, 248, 249, 254, 255, 280, 281, 282, 289, 294, 297, 300, 302, 317, 329, 331, 340, 346, 362, 390, 395, 404, 406, 411, 414, 415, 416, 420, 421, 435, 439, 443, 445, 447, 453, 474, 486, 492, 498, 501, 509, 515, 538, 546, 552, 554, 564, 565, 569, 572, 574, 576, 578, 627, 630, 639, 659, 660, 663, 664, 667, 670, 676, 681, 697, 701, 702, 706, 707, 712, 713, 715, 716, 721, 723, 738, 742, 743, 744, 748, 749, 751, 769, 778, 779, 780, 781, 787, 789, 809, 812, 813, 814, 815, 818, 822, 826, 828, 837, 856, 875, 877, 878, 886, 908, 913, 915, 921, 933, 935, 944, 953, 959, 997, 1002, 1010, 1021, 1026, 1027, 1034, 1046, 1049, 1053, 1055, 1057, 1063, 1088, 1100, 1109, 1114, 1115, 1123, 1130, 1155, 1163, 1169, 1171, 1181, 1182, 1186, 1191, 1193, 1217, 1241, 1243, 1246, 1252, 1259, 1263, 1279, 1283, 1284, 1288, 1289, 1294, 1295, 1303, 1305, 1320, 1326, 1333, 1337, 1338, 1348, 1360, 1361, 1368, 1371, 1372, 1374, 1376, 1379], "n0": [395, 576], "n00": [1002, 1193], "n01": [1002, 1193], "n02": [1002, 1193], "n1": [395, 576], "n2": [1, 395], "n3": 1, "n_1": [501, 837], "n_2": [501, 837], "n_3": [501, 837], "n_bar": 1365, "n_bit": 1371, "n_byte": [404, 420, 421, 701, 702, 1371], "n_char": [420, 421, 701, 702, 1371], "n_chunk": [346, 968, 1114, 1225, 1348], "n_elem": 1366, "n_even": 959, "n_field_strategi": [576, 1193], "n_film": 1357, "n_foo_uniqu": 1365, "n_kilobyt": 404, "n_row": [140, 143, 145, 146, 151, 153, 155, 157, 159, 162, 163, 164, 249, 346, 953], "n_thread": [145, 146], "n_uniqu": [346, 362, 837, 1348], "na": [305, 346, 714, 1330, 1348], "naiv": [447, 448, 723, 1057, 1058, 1305], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 48, 52, 54, 57, 58, 59, 60, 75, 87, 105, 130, 132, 133, 134, 135, 136, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 170, 171, 172, 173, 175, 178, 179, 180, 185, 187, 188, 189, 190, 191, 193, 194, 206, 207, 210, 211, 216, 217, 218, 219, 223, 227, 228, 231, 232, 234, 235, 246, 247, 248, 250, 251, 252, 255, 257, 259, 261, 262, 264, 268, 270, 274, 275, 279, 280, 281, 283, 284, 285, 292, 293, 296, 299, 301, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 324, 325, 331, 346, 350, 357, 395, 399, 400, 402, 405, 416, 425, 436, 472, 475, 495, 501, 522, 529, 530, 531, 532, 576, 585, 590, 594, 596, 598, 602, 626, 633, 643, 679, 692, 693, 706, 707, 708, 731, 733, 735, 743, 748, 752, 753, 754, 755, 756, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 783, 784, 789, 790, 793, 800, 801, 802, 803, 804, 805, 806, 807, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 826, 827, 833, 837, 853, 855, 860, 861, 865, 866, 867, 870, 873, 876, 881, 882, 883, 891, 892, 899, 900, 903, 904, 905, 911, 912, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 929, 935, 953, 958, 959, 965, 1002, 1034, 1047, 1086, 1089, 1106, 1193, 1222, 1227, 1273, 1274, 1275, 1288, 1289, 1313, 1316, 1324, 1325, 1330, 1337, 1348, 1353, 1358, 1359, 1360, 1361, 1362, 1363, 1375, 1376, 1379], "name_gener": [310, 346], "named_agg": [325, 929], "named_bi": [235, 346, 876, 953], "named_expr": [284, 285, 320, 321, 346, 735, 815, 819, 904, 905, 923, 924, 953], "named_fram": [1361, 1376], "nameless": 135, "namespac": [1, 147, 185, 187, 188, 189, 193, 345, 346, 349, 731, 816, 836, 849, 951, 952, 957, 1348, 1353, 1379], "namespaceinfo": [187, 197], "nan": [135, 175, 203, 218, 225, 304, 305, 346, 441, 442, 489, 490, 499, 510, 512, 520, 529, 530, 531, 532, 536, 583, 586, 604, 618, 619, 620, 621, 647, 673, 744, 767, 837, 866, 871, 953, 971, 975, 1051, 1052, 1116, 1144, 1145, 1210, 1211, 1234, 1256, 1329, 1330, 1348, 1379], "nan_as_nul": 203, "nan_max": [837, 1348], "nan_min": [837, 1348], "nan_to_nul": [135, 346, 953, 1348], "nana": 1371, "nanmax": [618, 619, 837, 1210, 1211, 1348], "nanosecond": [88, 236, 251, 278, 316, 346, 465, 470, 471, 481, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 779, 780, 781, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1085, 1095, 1097, 1109, 1348, 1372], "nansum": [647, 837, 1234, 1348], "nativ": [11, 39, 145, 147, 150, 151, 153, 157, 195, 248, 255, 280, 281, 300, 304, 332, 346, 585, 799, 816, 837, 843, 912, 936, 953, 957, 1201, 1329, 1348, 1352, 1376, 1379], "natur": [581, 837, 1198, 1348, 1364, 1370], "ndarrai": [134, 201, 227, 274, 304, 346, 508, 668, 837, 873, 899, 953, 961, 1122, 1247, 1248, 1329, 1348], "ndjson": [50, 155, 953], "ne": [621, 837, 1213, 1348], "ne_miss": [227, 274, 346, 837, 873, 899, 953, 1105, 1348], "nearest": [58, 214, 251, 272, 338, 346, 424, 504, 520, 634, 656, 657, 810, 837, 863, 882, 897, 942, 953, 1032, 1048, 1121, 1134, 1223, 1239, 1348, 1370], "nearest_pow2": 58, "necessari": [38, 39, 48, 55, 97, 150, 304, 346, 953, 1329, 1348], "need": [64, 99, 108, 137, 145, 146, 148, 157, 159, 162, 164, 199, 236, 278, 281, 290, 346, 349, 576, 646, 671, 706, 707, 708, 724, 781, 809, 812, 828, 837, 877, 902, 953, 1253, 1288, 1289, 1290, 1306, 1348, 1353, 1379], "neg": [14, 70, 71, 72, 73, 145, 146, 151, 153, 157, 166, 238, 254, 278, 289, 291, 297, 323, 346, 390, 569, 570, 630, 631, 646, 670, 677, 697, 710, 721, 837, 902, 908, 910, 926, 927, 953, 959, 997, 1130, 1155, 1186, 1187, 1220, 1252, 1260, 1279, 1292, 1303, 1320, 1348], "negat": [623, 837, 1215, 1348], "neither": [137, 150, 156, 282, 346, 395, 576, 1002, 1193], "nest": [55, 137, 141, 176, 177, 222, 346, 849, 1107, 1348, 1376, 1379], "nesting_level": 176, "net": [692, 1274], "netherland": [251, 346, 882, 953], "netsuite_format": 192, "never": [38, 48, 147, 250, 251, 279, 346, 881, 882, 953], "new": [39, 40, 41, 42, 53, 54, 159, 199, 204, 230, 240, 241, 255, 266, 267, 270, 275, 310, 312, 314, 315, 320, 321, 346, 357, 447, 497, 507, 509, 520, 610, 611, 626, 640, 641, 645, 703, 706, 707, 712, 713, 731, 733, 833, 837, 849, 875, 900, 918, 920, 923, 924, 936, 953, 963, 965, 1057, 1113, 1123, 1214, 1227, 1228, 1229, 1233, 1288, 1289, 1294, 1295, 1313, 1316, 1325, 1348, 1376, 1378], "new_column": [145, 146, 150, 159], "new_dai": 468, "new_dat": 465, "new_df": [315, 346, 920, 953], "new_fil": [36, 38, 43, 44, 47, 346], "new_from_index": 1348, "new_id": [310, 346], "new_lf": [920, 953], "new_tabl": 1378, "new_valu": [771, 772, 785, 811], "new_york": 779, "newli": 56, "newlin": [46, 145, 155, 159, 163, 346], "next": [19, 58, 236, 251, 278, 316, 346, 398, 443, 465, 470, 483, 636, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1053, 1079, 1084, 1097, 1224, 1348], "next_batch": 146, "next_pow2": 58, "nfc": [703, 1285, 1371], "nfd": [703, 1285, 1371], "nfkc": [703, 1285, 1371], "nfkd": [703, 1285, 1371], "nfruit": 721, "nl": [443, 762, 1053], "nnel_id": 137, "no1": 959, "no_default": [231, 346, 640, 641, 708, 837, 1228, 1229, 1290, 1348], "no_optim": [48, 49, 50, 51, 62, 63, 129, 858, 859, 887, 896, 953], "nodataerror": [145, 146, 150, 156, 159], "nodd": [691, 1273], "node": [854, 858, 879, 887, 891, 896, 900, 953], "nodefault": [231, 346, 640, 641, 708, 837, 1228, 1229, 1290, 1348], "non": [4, 5, 38, 40, 41, 48, 56, 71, 72, 135, 142, 166, 206, 213, 249, 261, 278, 284, 285, 289, 309, 310, 313, 315, 320, 321, 346, 398, 415, 416, 420, 425, 429, 430, 443, 469, 506, 522, 576, 584, 585, 591, 626, 627, 636, 640, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 685, 692, 701, 706, 707, 708, 728, 730, 735, 742, 743, 753, 755, 763, 764, 765, 766, 768, 770, 774, 781, 801, 803, 806, 813, 814, 815, 819, 821, 837, 853, 862, 891, 902, 904, 905, 908, 916, 919, 920, 923, 924, 953, 959, 1021, 1026, 1035, 1040, 1041, 1048, 1053, 1083, 1136, 1193, 1201, 1217, 1228, 1229, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1252, 1267, 1274, 1283, 1288, 1289, 1310, 1312, 1329, 1333, 1348, 1368, 1376], "non_exist": [469, 1083], "non_numer": [38, 48, 346, 953], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 65, 68, 71, 72, 73, 74, 75, 83, 87, 97, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 189, 190, 191, 193, 194, 195, 199, 201, 202, 208, 213, 214, 218, 219, 225, 226, 227, 229, 231, 234, 236, 237, 242, 246, 250, 251, 253, 255, 258, 261, 266, 267, 270, 274, 278, 279, 282, 286, 289, 291, 292, 298, 299, 301, 303, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 327, 331, 346, 358, 360, 361, 373, 374, 375, 382, 383, 395, 398, 418, 420, 421, 422, 425, 429, 430, 431, 434, 436, 441, 442, 450, 465, 468, 469, 475, 490, 491, 492, 493, 494, 495, 498, 499, 500, 506, 513, 514, 516, 518, 520, 521, 522, 529, 530, 531, 532, 537, 539, 540, 547, 553, 555, 557, 564, 565, 566, 567, 568, 570, 576, 584, 585, 596, 599, 600, 601, 603, 608, 621, 622, 623, 624, 626, 627, 633, 636, 637, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 667, 670, 671, 672, 673, 677, 678, 682, 683, 685, 687, 688, 689, 692, 695, 697, 698, 699, 700, 701, 702, 704, 705, 710, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 725, 727, 730, 731, 732, 733, 734, 741, 748, 753, 754, 755, 757, 763, 764, 765, 766, 767, 768, 770, 774, 776, 777, 778, 779, 780, 781, 783, 784, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 806, 812, 813, 814, 819, 821, 823, 824, 825, 827, 837, 856, 857, 859, 862, 863, 866, 867, 869, 871, 872, 873, 877, 880, 881, 882, 885, 887, 891, 894, 898, 899, 902, 906, 908, 909, 910, 911, 917, 918, 919, 920, 925, 928, 931, 935, 936, 945, 946, 953, 958, 959, 961, 962, 966, 967, 969, 976, 977, 981, 982, 989, 990, 1002, 1012, 1017, 1020, 1023, 1026, 1027, 1028, 1034, 1035, 1040, 1041, 1047, 1048, 1050, 1051, 1052, 1060, 1067, 1068, 1069, 1073, 1082, 1083, 1089, 1103, 1105, 1108, 1109, 1110, 1111, 1115, 1116, 1117, 1119, 1127, 1129, 1131, 1133, 1134, 1135, 1136, 1141, 1146, 1147, 1150, 1151, 1152, 1154, 1156, 1157, 1160, 1164, 1170, 1172, 1174, 1181, 1182, 1183, 1184, 1185, 1187, 1193, 1201, 1202, 1203, 1204, 1205, 1213, 1216, 1222, 1223, 1224, 1228, 1229, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1246, 1247, 1248, 1249, 1252, 1255, 1256, 1259, 1260, 1263, 1264, 1265, 1267, 1269, 1270, 1271, 1274, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1302, 1303, 1304, 1305, 1307, 1309, 1312, 1315, 1323, 1325, 1326, 1327, 1329, 1330, 1331, 1337, 1338, 1348, 1357, 1359, 1360, 1361, 1363, 1366, 1368, 1372, 1376], "nonexist": [469, 1083], "nor": [150, 156, 282, 346], "normal": [40, 141, 236, 346, 488, 534, 676, 748, 837, 877, 953, 1103, 1151, 1259, 1337, 1348, 1369], "normalised_scor": 147, "norowsreturnederror": [279, 346], "north": 74, "not_": [320, 346, 837, 923, 953, 959, 1348], "not_c": [320, 346, 923, 953], "notabl": 147, "notat": [12, 41, 346], "note": [4, 11, 21, 40, 41, 47, 55, 56, 63, 64, 70, 71, 73, 88, 96, 97, 130, 131, 132, 134, 136, 137, 141, 145, 147, 148, 149, 150, 154, 155, 156, 159, 160, 161, 163, 165, 168, 170, 173, 175, 179, 181, 199, 203, 210, 212, 214, 215, 218, 222, 225, 227, 236, 237, 246, 247, 248, 250, 251, 255, 262, 266, 269, 270, 274, 275, 278, 279, 280, 281, 286, 289, 293, 300, 303, 305, 308, 310, 311, 313, 315, 316, 320, 322, 323, 346, 390, 403, 418, 420, 421, 422, 425, 433, 434, 438, 441, 442, 448, 462, 463, 465, 470, 475, 483, 492, 499, 505, 507, 514, 522, 529, 530, 548, 551, 569, 576, 585, 599, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 640, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 670, 672, 676, 682, 683, 684, 690, 691, 692, 693, 694, 695, 696, 697, 701, 702, 706, 707, 708, 710, 715, 716, 717, 720, 721, 728, 730, 731, 737, 744, 753, 755, 762, 771, 776, 777, 779, 780, 781, 785, 795, 797, 809, 811, 812, 816, 824, 825, 827, 828, 833, 837, 848, 859, 863, 864, 866, 871, 873, 877, 882, 892, 899, 900, 902, 906, 908, 909, 911, 912, 917, 919, 920, 923, 926, 927, 953, 957, 959, 997, 1009, 1026, 1027, 1035, 1044, 1045, 1048, 1051, 1052, 1058, 1076, 1077, 1079, 1084, 1089, 1097, 1107, 1109, 1116, 1129, 1136, 1165, 1168, 1186, 1201, 1228, 1229, 1233, 1240, 1247, 1249, 1252, 1254, 1259, 1264, 1265, 1266, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1283, 1284, 1288, 1289, 1290, 1292, 1297, 1298, 1299, 1302, 1303, 1310, 1312, 1319, 1330, 1332, 1348, 1357, 1358, 1362, 1363, 1374, 1376], "noth": [21, 691, 700, 1273, 1282], "notic": [147, 227, 346, 873, 953, 1348], "notimplementederror": [10, 203], "now": [56, 150, 278, 304, 346, 593, 902, 953, 1329, 1348], "np": [95, 134, 201, 227, 274, 304, 346, 508, 584, 668, 837, 873, 899, 953, 961, 1122, 1139, 1142, 1144, 1145, 1247, 1248, 1348], "npt": [201, 961], "nr": [329, 340, 933, 944], "nth": [230, 346, 509, 713, 833, 837, 875, 953, 1123, 1295, 1348], "nthe": [691, 1273], "nthose": [691, 1273], "nu": 688, "null": [17, 38, 40, 47, 48, 51, 56, 64, 71, 132, 133, 136, 141, 145, 146, 155, 157, 159, 163, 164, 165, 172, 175, 179, 203, 206, 207, 208, 213, 214, 218, 219, 221, 226, 227, 229, 242, 250, 258, 259, 260, 267, 270, 272, 274, 289, 292, 294, 295, 296, 299, 304, 305, 309, 312, 315, 317, 320, 327, 346, 358, 360, 361, 371, 374, 375, 382, 383, 390, 391, 398, 400, 403, 415, 416, 417, 418, 420, 421, 422, 425, 429, 430, 431, 434, 439, 441, 442, 465, 468, 469, 476, 477, 478, 479, 480, 481, 482, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 506, 513, 518, 520, 521, 526, 529, 530, 531, 532, 537, 539, 540, 546, 547, 550, 551, 553, 555, 556, 557, 565, 566, 567, 568, 569, 571, 576, 584, 585, 608, 621, 622, 623, 624, 626, 627, 636, 637, 641, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 670, 671, 673, 678, 679, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 704, 705, 710, 712, 713, 714, 720, 721, 723, 725, 730, 731, 732, 733, 734, 741, 742, 743, 752, 753, 754, 755, 760, 763, 764, 765, 766, 768, 770, 774, 778, 783, 794, 797, 801, 803, 806, 813, 814, 819, 821, 827, 837, 853, 856, 862, 863, 866, 867, 872, 873, 880, 881, 894, 899, 908, 911, 916, 918, 920, 923, 925, 931, 953, 959, 966, 967, 978, 981, 982, 989, 990, 997, 998, 1006, 1009, 1021, 1022, 1023, 1026, 1027, 1028, 1034, 1035, 1040, 1041, 1049, 1051, 1052, 1082, 1083, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1105, 1106, 1108, 1109, 1110, 1111, 1115, 1117, 1118, 1127, 1128, 1133, 1134, 1135, 1141, 1146, 1147, 1148, 1154, 1156, 1157, 1160, 1163, 1164, 1167, 1168, 1170, 1172, 1173, 1174, 1183, 1185, 1186, 1188, 1193, 1201, 1213, 1216, 1217, 1229, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1252, 1256, 1261, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1292, 1294, 1295, 1296, 1302, 1303, 1305, 1307, 1312, 1315, 1326, 1329, 1330, 1331, 1333, 1348, 1360, 1364, 1366, 1368, 1372, 1374, 1376, 1377, 1379], "null_behavior": [439, 546, 837, 1049, 1163, 1348], "null_count": [47, 51, 214, 219, 346, 435, 837, 863, 953, 1046, 1048, 1348], "null_equ": [221, 346, 1106, 1348], "null_on_oob": [382, 551, 553, 989, 1168, 1170], "null_prob": [172, 175, 179], "null_valu": [38, 48, 145, 146, 159, 346, 953], "nullabl": [40, 346], "nullbehavior": [439, 546, 837, 1049, 1163, 1348], "nullif": 1369, "nulls_equ": [250, 346, 526, 837, 881, 953, 1141, 1348], "nulls_last": [292, 346, 371, 391, 571, 626, 678, 679, 760, 837, 911, 953, 978, 998, 1148, 1188, 1261, 1348], "num": [14, 41, 307, 346, 522, 837, 1136, 1348], "num_row": 203, "num_sampl": [795, 796], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 48, 49, 50, 51, 55, 56, 70, 71, 72, 88, 97, 118, 130, 132, 133, 134, 136, 139, 141, 145, 146, 147, 148, 150, 154, 155, 156, 157, 159, 162, 163, 164, 166, 173, 175, 178, 180, 181, 182, 189, 206, 208, 213, 222, 223, 225, 226, 234, 238, 239, 248, 249, 254, 265, 266, 278, 282, 289, 294, 297, 309, 314, 317, 319, 327, 329, 331, 340, 346, 372, 388, 390, 395, 398, 407, 408, 409, 410, 412, 413, 415, 416, 421, 429, 435, 436, 439, 443, 446, 454, 456, 458, 460, 461, 471, 484, 485, 487, 491, 492, 493, 494, 498, 499, 500, 506, 515, 529, 530, 537, 538, 546, 554, 557, 562, 564, 569, 572, 574, 576, 578, 626, 630, 633, 636, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 681, 697, 699, 701, 702, 706, 710, 712, 713, 721, 724, 738, 742, 743, 749, 762, 767, 768, 769, 781, 789, 794, 795, 796, 813, 814, 818, 822, 826, 837, 853, 856, 862, 870, 871, 872, 878, 886, 896, 908, 913, 915, 916, 921, 922, 931, 933, 935, 944, 953, 958, 995, 997, 1002, 1013, 1014, 1015, 1016, 1018, 1019, 1021, 1027, 1034, 1040, 1046, 1047, 1049, 1053, 1056, 1064, 1066, 1071, 1074, 1075, 1085, 1098, 1099, 1101, 1107, 1108, 1109, 1110, 1111, 1115, 1116, 1117, 1130, 1154, 1155, 1163, 1171, 1174, 1179, 1181, 1186, 1191, 1193, 1207, 1208, 1222, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1252, 1255, 1263, 1279, 1281, 1283, 1284, 1288, 1292, 1294, 1295, 1303, 1306, 1320, 1333, 1338, 1348, 1364, 1367, 1370, 1379], "number_of_two": [379, 545], "numbers_decim": 724, "numer": [11, 17, 38, 41, 48, 149, 160, 207, 216, 251, 304, 305, 313, 314, 346, 355, 403, 417, 425, 505, 522, 581, 605, 607, 631, 639, 671, 673, 693, 730, 736, 744, 795, 837, 849, 855, 865, 882, 919, 953, 959, 1009, 1022, 1035, 1048, 1136, 1253, 1256, 1275, 1312, 1329, 1348, 1370, 1379], "numeric_dtyp": 1379, "numericliter": [425, 795, 796, 837, 1035, 1348], "numpi": [95, 103, 134, 167, 201, 212, 248, 280, 281, 300, 304, 305, 346, 584, 618, 619, 647, 837, 953, 961, 1139, 1142, 1144, 1145, 1210, 1211, 1234, 1329, 1330, 1348], "nworld": 715, "o": [151, 162, 404, 415, 416, 435, 690, 742, 743, 837, 1010, 1021, 1046, 1272, 1297, 1333, 1348, 1361], "oauth": 161, "obj": 959, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 64, 87, 106, 130, 131, 132, 137, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 173, 175, 176, 202, 203, 210, 215, 222, 235, 236, 251, 253, 268, 278, 281, 286, 293, 303, 304, 305, 346, 438, 599, 776, 777, 779, 780, 797, 816, 824, 825, 837, 849, 858, 864, 869, 877, 882, 885, 896, 902, 909, 912, 950, 953, 959, 962, 1107, 1323, 1348, 1358, 1360, 1363, 1376, 1378], "observ": [250, 346, 436, 491, 492, 493, 494, 633, 837, 881, 953, 1047, 1108, 1109, 1110, 1111, 1222, 1348], "obtain": 576, "obvious": 733, "occur": [41, 62, 63, 104, 113, 119, 129, 252, 346, 379, 545, 606, 636, 837, 858, 859, 869, 883, 896, 909, 953, 986, 1162, 1206, 1224, 1329, 1348], "occurr": [516, 518, 525, 528, 748, 837, 1131, 1133, 1140, 1143, 1337, 1348], "oct": 1371, "octet_length": 1369, "octob": [475, 1089, 1371], "od": [156, 849], "odbc": [39, 147, 346], "odd": 691, "odi": [694, 696, 1278], "off": [48, 49, 50, 51, 62, 63, 129, 145, 146, 159, 250, 251, 346, 443, 762, 858, 859, 869, 881, 882, 887, 896, 909, 953, 1053], "offer": [269, 346, 630, 837, 895, 953, 1372, 1376], "offic": [41, 346], "offset": [73, 145, 146, 151, 153, 155, 157, 159, 162, 163, 164, 230, 236, 278, 291, 322, 323, 346, 443, 444, 452, 462, 463, 465, 470, 483, 509, 552, 570, 646, 677, 695, 696, 710, 723, 837, 875, 877, 902, 910, 926, 927, 953, 1053, 1054, 1062, 1076, 1077, 1079, 1084, 1097, 1123, 1169, 1187, 1260, 1277, 1278, 1292, 1305, 1348, 1375], "offset_bi": 781, "often": [148, 199, 236, 278, 346, 379, 545, 639, 646, 837, 877, 902, 953, 986, 1162, 1363, 1376], "ok": 576, "old": [40, 275, 346, 640, 641, 837, 900, 953, 1228, 1229, 1348], "old_tabl": 1378, "older": [47, 51, 346, 953], "oldw": 716, "omit": [28, 133, 137, 150, 156, 173, 199, 266, 281, 303, 308, 346, 776, 779, 791, 792, 824, 825, 959, 1377, 1378], "onc": [62, 129, 145, 146, 181, 255, 280, 282, 325, 346, 564, 584, 585, 667, 718, 719, 837, 854, 929, 953, 1181, 1201, 1246, 1300, 1301, 1348, 1361], "one": [21, 38, 39, 41, 48, 56, 64, 110, 130, 132, 133, 134, 135, 136, 145, 146, 150, 154, 155, 156, 159, 163, 178, 180, 199, 207, 215, 218, 226, 234, 235, 236, 248, 252, 253, 261, 270, 278, 279, 280, 286, 289, 304, 307, 313, 326, 346, 356, 390, 436, 438, 500, 501, 505, 508, 511, 513, 569, 576, 581, 599, 609, 610, 612, 614, 616, 617, 626, 645, 646, 670, 678, 691, 692, 693, 708, 731, 776, 779, 799, 817, 827, 833, 837, 855, 864, 866, 867, 872, 873, 876, 877, 883, 891, 898, 902, 906, 908, 919, 925, 930, 953, 968, 997, 1002, 1047, 1117, 1127, 1128, 1186, 1193, 1198, 1222, 1233, 1252, 1273, 1274, 1275, 1290, 1313, 1329, 1348, 1363, 1364, 1366, 1370, 1371, 1378], "one_to_mani": [250, 346, 881, 953], "one_to_on": [250, 346, 881, 953], "oneormoredatatyp": [41, 173, 346], "ones": [649, 651, 653, 655, 657, 660, 662, 664, 837, 959], "onf": [710, 1292], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 48, 55, 56, 61, 62, 64, 97, 129, 131, 140, 142, 145, 146, 147, 150, 151, 153, 155, 157, 159, 162, 163, 164, 165, 168, 169, 170, 171, 175, 179, 189, 199, 218, 219, 222, 224, 227, 236, 237, 248, 251, 252, 255, 270, 278, 280, 281, 300, 302, 303, 304, 315, 316, 332, 346, 356, 358, 360, 372, 424, 425, 438, 443, 465, 473, 475, 495, 504, 514, 584, 585, 592, 593, 609, 610, 611, 612, 613, 614, 615, 616, 617, 626, 638, 684, 694, 696, 708, 746, 762, 799, 837, 861, 864, 866, 867, 868, 877, 882, 883, 902, 903, 920, 922, 936, 953, 959, 966, 967, 968, 1032, 1035, 1053, 1079, 1089, 1107, 1114, 1121, 1129, 1201, 1226, 1266, 1276, 1278, 1290, 1323, 1326, 1329, 1348, 1357, 1360, 1376, 1377, 1379], "onlin": [224, 346, 1114, 1348], "ont": [694, 696, 1276, 1278], "onto": 175, "oof": [709, 1291, 1366, 1371], "op": [21, 145, 146, 179, 275, 346, 592, 639, 837, 885, 900, 953, 1348], "opac": [346, 349, 1348, 1353], "opaqu": 936, "open": [41, 53, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 215, 346, 438, 837, 864, 953], "openoffic": 156, "openpyxl": [150, 167], "oper": [4, 41, 55, 64, 97, 106, 109, 116, 123, 130, 132, 133, 134, 135, 136, 142, 147, 209, 224, 227, 229, 235, 241, 253, 255, 262, 266, 268, 269, 270, 273, 274, 276, 278, 281, 282, 287, 289, 298, 304, 305, 310, 313, 314, 324, 325, 346, 355, 356, 359, 390, 430, 431, 432, 433, 434, 435, 489, 490, 505, 507, 510, 512, 536, 564, 565, 566, 567, 568, 569, 576, 583, 602, 605, 607, 608, 609, 610, 612, 614, 616, 617, 620, 621, 622, 625, 626, 631, 638, 667, 670, 736, 744, 751, 752, 754, 765, 766, 770, 782, 816, 827, 837, 849, 857, 861, 863, 868, 873, 876, 881, 891, 892, 899, 903, 907, 908, 912, 919, 922, 929, 953, 997, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1104, 1105, 1114, 1124, 1126, 1153, 1181, 1182, 1183, 1184, 1185, 1186, 1200, 1212, 1213, 1226, 1246, 1252, 1288, 1323, 1328, 1329, 1330, 1348, 1367, 1375, 1376], "operand": [744, 837], "opp": 959, "oppos": 762, "opposit": [289, 346, 390, 569, 670, 837, 908, 953, 997, 1186, 1252, 1348], "opt": [308, 346], "optim": [48, 49, 50, 51, 62, 63, 129, 145, 151, 155, 157, 159, 162, 163, 164, 248, 253, 269, 273, 280, 311, 346, 854, 858, 859, 869, 887, 896, 909, 917, 926, 927, 936, 953, 1031, 1247, 1348], "optimis": [147, 255, 281, 332, 346, 953, 957, 1201, 1249, 1348, 1379], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 72, 74, 145, 147, 148, 149, 150, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 167, 172, 173, 174, 175, 178, 179, 180, 189, 190, 215, 231, 236, 246, 251, 261, 286, 293, 299, 310, 313, 315, 346, 403, 438, 443, 534, 592, 593, 599, 626, 647, 648, 650, 652, 654, 656, 659, 661, 663, 676, 684, 694, 696, 708, 710, 748, 819, 827, 837, 849, 858, 859, 864, 869, 877, 881, 882, 891, 896, 906, 909, 912, 919, 920, 928, 953, 959, 1009, 1053, 1151, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1259, 1266, 1276, 1278, 1290, 1292, 1325, 1337, 1348, 1366, 1371, 1378], "optional_memb": [526, 837, 1141, 1348], "or_": 837, "oracl": 148, "orang": [211, 327, 328, 330, 331, 333, 334, 336, 338, 339, 346, 416, 743, 837, 931, 932, 934, 935, 937, 938, 940, 942, 943, 1371], "orc": 192, "order": [11, 41, 48, 49, 50, 51, 54, 56, 62, 68, 133, 145, 147, 166, 168, 169, 170, 171, 206, 210, 211, 218, 219, 220, 227, 235, 236, 250, 252, 262, 268, 269, 270, 274, 278, 280, 282, 283, 287, 292, 303, 304, 309, 311, 315, 316, 346, 371, 391, 396, 415, 416, 441, 442, 501, 547, 564, 571, 577, 626, 631, 636, 646, 667, 668, 669, 678, 679, 709, 716, 717, 718, 719, 733, 742, 743, 745, 746, 748, 760, 816, 827, 837, 848, 853, 861, 866, 867, 868, 873, 876, 877, 881, 883, 891, 892, 899, 902, 903, 907, 911, 912, 916, 917, 920, 953, 957, 958, 959, 978, 998, 1003, 1021, 1030, 1051, 1052, 1118, 1148, 1164, 1181, 1188, 1194, 1220, 1224, 1231, 1246, 1248, 1250, 1261, 1291, 1316, 1333, 1334, 1335, 1337, 1348, 1357, 1360, 1366, 1375, 1376, 1379], "order_bi": [626, 837], "ordin": [466, 636, 837, 1080, 1224, 1348, 1377], "ordinal_dai": [451, 485], "org": [21, 43, 44, 131, 147, 148, 151, 153, 201, 202, 203, 212, 346, 600, 703, 909, 953, 961, 962, 1285], "orient": [57, 59, 104, 134, 136, 266, 346, 953, 1357], "origin": [56, 145, 146, 159, 218, 219, 227, 274, 311, 346, 441, 442, 469, 470, 483, 501, 547, 585, 609, 626, 638, 639, 640, 641, 642, 644, 685, 691, 700, 758, 759, 837, 866, 867, 873, 899, 917, 953, 1051, 1052, 1083, 1084, 1097, 1118, 1164, 1228, 1229, 1230, 1232, 1267, 1273, 1282, 1348], "orjson": 141, "orld": 1298, "orson": 141, "other": [1, 21, 37, 41, 47, 63, 64, 130, 144, 145, 146, 147, 150, 159, 164, 168, 169, 170, 171, 219, 221, 224, 227, 250, 251, 252, 261, 262, 270, 274, 279, 281, 284, 285, 308, 313, 315, 318, 320, 321, 344, 346, 349, 355, 359, 361, 371, 372, 425, 440, 475, 489, 490, 501, 505, 510, 512, 522, 526, 536, 543, 565, 566, 567, 568, 583, 589, 595, 605, 607, 620, 621, 625, 640, 641, 672, 679, 708, 735, 736, 741, 744, 751, 753, 755, 760, 763, 764, 765, 766, 774, 781, 801, 803, 806, 815, 819, 821, 837, 849, 859, 873, 881, 882, 883, 891, 892, 898, 899, 904, 905, 919, 920, 923, 924, 925, 953, 959, 968, 1035, 1050, 1089, 1104, 1105, 1106, 1114, 1124, 1126, 1141, 1153, 1160, 1182, 1183, 1184, 1185, 1200, 1212, 1213, 1228, 1229, 1331, 1339, 1347, 1348, 1353, 1363, 1376], "other_df": [250, 346], "other_lf": [881, 953], "otherwis": [39, 147, 150, 157, 162, 174, 177, 181, 231, 255, 262, 281, 284, 303, 308, 332, 346, 395, 400, 421, 425, 436, 491, 492, 493, 494, 576, 585, 596, 626, 630, 631, 633, 638, 673, 683, 686, 690, 695, 697, 702, 706, 707, 710, 721, 748, 752, 781, 784, 793, 799, 827, 837, 892, 904, 936, 953, 958, 1002, 1006, 1027, 1035, 1047, 1108, 1109, 1110, 1111, 1193, 1201, 1220, 1222, 1226, 1247, 1249, 1256, 1265, 1268, 1272, 1277, 1279, 1284, 1288, 1289, 1292, 1303, 1337, 1348, 1368], "our": 204, "out": [8, 15, 39, 48, 49, 50, 51, 52, 54, 111, 137, 164, 167, 175, 179, 227, 278, 281, 346, 382, 400, 551, 553, 683, 686, 695, 827, 873, 902, 953, 989, 1006, 1168, 1170, 1265, 1268, 1277, 1374], "outcom": [626, 837], "outer": [56, 315, 346, 920, 953], "outermost": 55, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 206, 214, 248, 255, 259, 262, 268, 270, 280, 284, 286, 296, 309, 316, 320, 346, 358, 360, 383, 415, 416, 421, 436, 475, 555, 576, 584, 585, 596, 599, 610, 633, 640, 682, 698, 702, 742, 743, 748, 752, 753, 754, 755, 765, 766, 767, 795, 796, 798, 799, 803, 821, 837, 849, 853, 863, 869, 887, 891, 892, 904, 906, 916, 923, 936, 953, 966, 967, 990, 1021, 1027, 1047, 1089, 1172, 1201, 1222, 1264, 1280, 1284, 1333, 1337, 1348], "output_path": [600, 909, 953], "outsid": [425, 837, 1035, 1348], "over": [64, 139, 145, 146, 147, 150, 156, 159, 164, 175, 176, 206, 224, 247, 248, 249, 255, 262, 279, 280, 281, 293, 309, 310, 324, 332, 346, 350, 415, 416, 435, 438, 492, 500, 584, 585, 596, 598, 599, 600, 601, 602, 610, 611, 636, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 742, 743, 771, 772, 785, 798, 799, 811, 816, 837, 853, 858, 869, 892, 896, 909, 912, 916, 928, 936, 950, 953, 959, 1021, 1046, 1109, 1114, 1201, 1235, 1236, 1238, 1242, 1333, 1348, 1376], "overflow": [417, 433, 434, 725, 737, 837, 855, 953, 1022, 1044, 1045, 1307, 1319, 1348], "overhead": [54, 55, 97, 159, 162, 163, 164], "overlap": [685, 692, 694, 696, 1267, 1274, 1276, 1278], "overrid": [1, 41, 130, 132, 133, 134, 135, 136, 145, 147, 148, 150, 154, 155, 156, 163, 172, 173, 179, 181, 346, 953], "overridden": [41, 130, 132, 134, 136, 154, 155, 163, 181, 346, 953], "overview": [346, 837, 849, 953, 1348, 1375, 1379], "overwrit": [15, 39, 40, 42, 54, 130, 132, 133, 134, 136, 141, 145, 146, 154, 155, 159, 163, 203, 315, 346, 357, 735, 837, 920, 953], "overwrite_schema": [40, 346], "ow": 715, "own": [827, 1329, 1348, 1379], "p": [58, 269, 346, 630, 819, 837, 895, 953, 959, 1277, 1279, 1361], "p13dt14h0": 475, "p1dt42": 475, "pa": [40, 130, 165, 346, 816], "pa_tabl": 816, "pacif": [444, 1054], "pack": [266, 346], "packag": [33, 34, 35, 142, 147, 346, 350, 443, 762, 1053], "pad": [704, 705, 730, 1286, 1287, 1312], "pad_end": [705, 1287], "pad_start": [704, 730, 1286, 1312], "page": [47, 51, 151, 157, 162, 164, 346, 837, 849, 953, 1348, 1375], "pair": [130, 132, 133, 134, 136, 154, 155, 163, 275, 346, 900, 953, 1379], "pairwis": [212, 346], "panda": [39, 131, 135, 141, 167, 227, 236, 274, 305, 311, 313, 346, 462, 463, 741, 816, 837, 873, 877, 899, 917, 919, 953, 1076, 1077, 1330, 1331, 1348, 1358, 1360, 1376], "pandas_df": 1376, "pane": [41, 346], "panic": 112, "pap": 1279, "papa": 697, "papai": [697, 1279], "papaya": [697, 710, 721, 1279, 1292, 1303], "parallel": [62, 64, 139, 148, 157, 164, 236, 251, 253, 269, 285, 321, 346, 435, 548, 748, 827, 837, 877, 881, 882, 905, 924, 936, 953, 1046, 1165, 1337, 1348], "parallelis": [255, 332, 346, 1201, 1348], "parallelstrategi": [157, 164], "param": [41, 130, 132, 133, 134, 136, 145, 146, 154, 155, 159, 163, 174, 175, 179, 279, 346, 953], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 71, 72, 73, 74, 75, 83, 87, 95, 98, 104, 113, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 189, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 246, 248, 249, 250, 251, 252, 254, 255, 259, 261, 262, 265, 266, 268, 269, 270, 272, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 291, 292, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 329, 331, 332, 338, 340, 346, 355, 357, 358, 359, 360, 361, 371, 378, 379, 382, 383, 390, 391, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 415, 416, 417, 418, 422, 425, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 443, 445, 447, 448, 453, 465, 468, 469, 470, 471, 472, 474, 475, 483, 486, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 520, 521, 522, 526, 534, 536, 538, 543, 544, 545, 546, 548, 551, 552, 553, 554, 555, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 583, 584, 585, 592, 593, 599, 600, 601, 605, 607, 610, 611, 612, 613, 614, 615, 620, 621, 625, 626, 627, 630, 631, 633, 634, 636, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 730, 731, 733, 735, 736, 738, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 837, 853, 855, 856, 858, 859, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 881, 882, 883, 886, 887, 891, 892, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 933, 935, 936, 942, 944, 953, 958, 959, 963, 965, 966, 967, 968, 978, 985, 986, 989, 990, 997, 998, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1021, 1022, 1023, 1028, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1055, 1057, 1058, 1063, 1079, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1097, 1100, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1115, 1116, 1117, 1118, 1122, 1123, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1141, 1148, 1151, 1155, 1160, 1161, 1162, 1163, 1165, 1168, 1169, 1170, 1171, 1172, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1191, 1192, 1193, 1194, 1201, 1213, 1217, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1255, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1312, 1313, 1316, 1320, 1323, 1324, 1325, 1326, 1327, 1329, 1330, 1333, 1334, 1337, 1338, 1339, 1348, 1357, 1358, 1359, 1360, 1361, 1363, 1368, 1371, 1376], "parameteris": 147, "parametr": 849, "paramount": [887, 953], "parent": [41, 75, 229, 346], "parenthes": 19, "parquet": [47, 51, 52, 54, 157, 158, 164, 192, 346, 849, 953], "parquetcompress": [47, 346], "pars": [38, 48, 144, 145, 146, 148, 150, 155, 156, 157, 159, 162, 163, 164, 206, 235, 284, 285, 289, 292, 309, 320, 321, 325, 346, 416, 425, 522, 626, 640, 641, 679, 699, 708, 724, 725, 735, 743, 753, 755, 760, 763, 764, 765, 766, 774, 787, 801, 803, 806, 815, 817, 819, 821, 827, 837, 853, 876, 904, 905, 908, 911, 916, 923, 924, 929, 953, 1035, 1136, 1228, 1229, 1252, 1281, 1306, 1307, 1348, 1357], "parseerror": [725, 1307], "parser": [145, 150], "part": [52, 53, 54, 130, 150, 199, 204, 303, 308, 346, 626, 692, 712, 713, 837, 925, 953, 963, 1274, 1294, 1295, 1372], "parti": [584, 837], "partial": [133, 145, 159, 346, 953], "particip": [41, 346], "particular": [40, 145, 150, 151, 153, 206, 222, 309, 346, 415, 416, 742, 743, 837, 853, 916, 953, 1021, 1107, 1333, 1348], "partit": [47, 52, 53, 54, 148, 157, 160, 162, 164, 165, 249, 268, 346, 626, 837, 849], "partition_bi": [47, 146, 249, 346, 626, 837], "partition_chunk_size_byt": [47, 346], "partition_col": [47, 148, 346], "partition_df": 146, "partition_index": 191, "partition_num": 148, "partition_on": 148, "partition_rang": 148, "partitionbykei": 54, "partitioned_object": [47, 346], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 56, 104, 129, 132, 141, 142, 144, 147, 148, 150, 157, 159, 162, 165, 168, 170, 173, 175, 177, 179, 206, 212, 216, 235, 236, 238, 251, 254, 268, 269, 270, 275, 278, 284, 289, 292, 297, 305, 308, 309, 316, 320, 325, 346, 390, 416, 443, 453, 465, 469, 475, 498, 519, 569, 584, 585, 600, 626, 630, 640, 641, 646, 670, 679, 708, 715, 716, 717, 743, 752, 760, 762, 787, 819, 827, 833, 837, 853, 865, 876, 877, 879, 882, 887, 895, 900, 902, 904, 908, 909, 911, 916, 923, 928, 929, 936, 953, 958, 997, 1053, 1063, 1083, 1089, 1115, 1130, 1155, 1186, 1201, 1228, 1229, 1252, 1290, 1297, 1298, 1299, 1320, 1330, 1348, 1361, 1376], "pass_nam": [585, 837], "pass_name_to_appli": [142, 837], "password": [145, 148, 151, 153], "past": [37, 346, 887, 953], "pat": [695, 1277], "patch": 74, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 215, 286, 346, 438, 599, 600, 603, 669, 837, 864, 906, 909, 953, 957, 1250, 1282, 1348, 1379], "pathlib": [36, 38, 43, 44, 47, 159, 346], "pattern": [100, 145, 146, 150, 151, 155, 157, 159, 162, 163, 164, 248, 346, 418, 422, 594, 683, 684, 685, 688, 691, 692, 693, 694, 695, 696, 706, 707, 708, 714, 936, 959, 1023, 1028, 1247, 1249, 1265, 1266, 1267, 1270, 1273, 1274, 1275, 1276, 1277, 1278, 1288, 1289, 1290, 1296, 1348, 1371], "paya": 721, "pc": [898, 953], "pct": [175, 636, 837], "pct_chang": [837, 1348], "pct_valid": [636, 837], "pd": [131, 135, 741, 816, 837, 1330, 1331, 1348, 1358, 1376], "pd_df": 135, "pd_frame": 816, "pd_seri": 135, "pdsh": [139, 146], "pea": 697, "peak": [280, 346, 628, 629, 837, 1218, 1219, 1348], "peak_max": [837, 1348], "peak_min": [837, 1348], "pear": [697, 710, 721, 1279, 1292, 1303], "pearson": [212, 346, 534, 676, 767, 837, 1151, 1259, 1348], "penalti": [720, 722, 723, 1302, 1304, 1305], "per": [15, 38, 41, 48, 142, 150, 173, 175, 206, 234, 266, 267, 270, 285, 292, 309, 321, 335, 337, 338, 346, 382, 416, 548, 551, 553, 584, 585, 609, 610, 612, 614, 616, 617, 679, 743, 748, 760, 837, 853, 905, 911, 916, 924, 939, 941, 942, 953, 989, 1165, 1168, 1170, 1337, 1348], "percent": [627, 837, 1217, 1348], "percentag": [172, 175, 179, 627, 837, 1217, 1348], "percentil": [214, 346, 636, 837, 863, 953, 1048, 1348], "perform": [39, 47, 49, 51, 56, 102, 107, 109, 114, 116, 123, 131, 145, 146, 147, 151, 155, 157, 159, 162, 163, 164, 203, 227, 235, 236, 250, 251, 252, 255, 273, 274, 278, 280, 281, 304, 332, 346, 406, 411, 414, 420, 421, 505, 576, 584, 585, 626, 646, 684, 694, 696, 701, 702, 708, 720, 722, 723, 837, 873, 877, 881, 882, 883, 899, 902, 911, 926, 927, 953, 1012, 1017, 1020, 1026, 1027, 1201, 1266, 1276, 1278, 1283, 1284, 1290, 1302, 1304, 1305, 1329, 1348], "perhap": [310, 346], "period": [145, 146, 159, 236, 278, 346, 470, 483, 491, 493, 494, 627, 646, 776, 777, 779, 780, 824, 825, 837, 877, 902, 953, 1084, 1097, 1108, 1110, 1111, 1217, 1348], "persist": 1363, "phase": [39, 314, 346], "philadelphia": [706, 707], "phone": [728, 1310], "physic": [55, 68, 97, 145, 146, 251, 270, 346, 741, 837, 854, 881, 882, 953, 1029, 1331, 1348], "pi": [11, 437, 837, 1037, 1039, 1257, 1321, 1348, 1369, 1373], "pick": [176, 827], "pickl": [438, 837, 864, 953], "pip": [443, 762, 1053], "pipe": [346, 837, 953], "pipelin": [150, 308, 346], "pitfal": 114, "pivot": [314, 346, 959], "pivot_long": [313, 346, 919, 953], "pivot_wid": [270, 346], "pivotagg": [270, 346], "pixel": [41, 346], "pk": [488, 837, 1103, 1348], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 181, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 837, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 958, 959, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1348, 1353, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1377, 1379], "pl_frame": 816, "place": [11, 12, 38, 48, 199, 217, 224, 240, 241, 270, 276, 281, 292, 318, 346, 350, 371, 383, 391, 555, 571, 678, 679, 760, 837, 911, 953, 968, 978, 990, 998, 1114, 1172, 1188, 1225, 1261, 1348], "placehold": 786, "plai": [13, 766], "plain": [869, 898, 953], "plan": [62, 129, 251, 253, 346, 438, 837, 854, 858, 864, 869, 881, 882, 898, 906, 909, 953, 1378], "plan_typ": [898, 953], "plane": [758, 759], "plantypeprefer": [898, 953], "platform": 167, "ple": 1371, "pleas": [135, 147, 148, 227, 236, 261, 274, 346, 350, 492, 768, 781, 837, 873, 877, 891, 899, 953, 1109, 1348], "plenti": 959, "plot": [346, 896, 909, 953, 1348], "plu": [436, 581, 837, 1047, 1198, 1222, 1348, 1370], "plugin": [0, 837, 849], "plugin_path": 142, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 76, 77, 78, 140, 141, 149, 155, 157, 159, 160, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 218, 225, 236, 252, 253, 293, 303, 308, 315, 346, 349, 350, 424, 435, 436, 441, 470, 471, 499, 504, 505, 516, 529, 530, 564, 585, 633, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 665, 667, 764, 795, 796, 837, 858, 859, 866, 871, 877, 883, 887, 900, 912, 920, 953, 1030, 1032, 1046, 1047, 1051, 1084, 1085, 1116, 1121, 1131, 1181, 1222, 1234, 1237, 1239, 1240, 1244, 1246, 1327, 1332, 1348, 1353, 1376], "pointer": [222, 346, 1107, 1348], "poison": [618, 619, 837, 1210, 1211, 1348], "pola": 346, "polar": [1, 197, 346, 349, 350, 836, 837, 843, 849, 953, 957, 958, 959, 1348, 1352, 1353, 1375, 1376, 1378], "polars_df": 1376, "polars_engine_affin": [48, 49, 50, 51, 62, 63, 858, 859, 869, 896, 909, 953], "polars_file_cache_ttl": [155, 159, 162, 163], "polars_hypothesis_profil": [178, 180], "polars_max_thread": 181, "polars_seri": 1376, "polars_verbos": [858, 869, 896, 909, 953], "polarsdatafram": 203, "polarsdataset": [308, 346], "polarsdatatyp": [65, 75, 83, 145, 146, 159, 172, 173, 174, 175, 176, 179, 207, 255, 303, 308, 346, 403, 417, 495, 584, 585, 640, 641, 699, 783, 797, 798, 799, 809, 812, 828, 833, 837, 855, 953, 959, 1009, 1022, 1201, 1228, 1229, 1281, 1348], "polarsintegertyp": [757, 791, 792], "polarstemporaltyp": [720, 1302], "polarstyp": 64, "pool": [15, 63, 181, 182, 859, 953], "poor": 147, "pop2": [251, 346, 882, 953], "popul": [251, 346, 882, 953], "port": [39, 145, 147, 148, 151, 153, 346], "portion": 1371, "pos_a": 1371, "posit": [41, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 191, 204, 216, 223, 235, 268, 284, 285, 289, 292, 312, 320, 321, 325, 346, 390, 491, 493, 494, 495, 569, 626, 631, 633, 670, 679, 693, 706, 707, 725, 735, 758, 759, 760, 763, 764, 765, 766, 783, 815, 819, 833, 837, 865, 870, 876, 904, 905, 908, 911, 918, 923, 924, 929, 953, 959, 997, 1108, 1110, 1111, 1186, 1220, 1222, 1252, 1275, 1307, 1348, 1377], "position": 1348, "possibl": [41, 47, 51, 104, 106, 132, 133, 136, 145, 150, 172, 175, 179, 235, 248, 255, 280, 311, 332, 346, 582, 585, 596, 647, 713, 747, 837, 858, 869, 876, 896, 909, 911, 917, 953, 1201, 1234, 1295, 1348], "post": [56, 74, 898, 953], "postgresql": [39, 147, 148, 346, 626, 837, 1374], "potenti": [114, 116, 142, 159, 162, 163, 248, 279, 281, 346, 609, 706, 707, 861, 863, 868, 903, 922, 953, 1288, 1289], "pow": [837, 1348, 1369], "pow_n": 58, "power": [817, 1220, 1348, 1370], "powersofn": 58, "pre": [54, 576, 585, 633, 809, 812, 828, 837, 1222, 1348], "preced": [175, 959], "precis": [11, 12, 38, 41, 48, 72, 147, 248, 280, 281, 300, 303, 308, 346, 445, 724, 795, 953, 959, 1055, 1306], "predefin": [270, 346], "predic": [40, 48, 49, 50, 51, 62, 63, 129, 140, 159, 162, 163, 164, 165, 207, 227, 246, 251, 252, 274, 279, 346, 417, 501, 750, 785, 827, 837, 858, 859, 869, 873, 882, 883, 887, 896, 899, 900, 909, 926, 927, 953, 1118, 1247, 1249, 1348], "predicate_pushdown": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 887, 896, 909, 953], "predict": [273, 316, 346], "prefer": [145, 146, 150, 151, 155, 157, 159, 180, 206, 224, 248, 255, 279, 280, 309, 332, 346, 415, 416, 495, 585, 742, 743, 837, 853, 916, 953, 957, 1021, 1114, 1201, 1333, 1348, 1358, 1379], "prefilt": 164, "prefix": [40, 145, 146, 159, 199, 346, 357, 405, 422, 475, 594, 610, 613, 614, 616, 617, 714, 717, 718, 730, 837, 959, 1011, 1028, 1296, 1300, 1312], "prefix_": 613, "prefix_a": 613, "prefix_b": 613, "prefix_field": [611, 615], "presenc": [784, 793, 959], "present": [133, 175, 231, 346, 526, 600, 716, 717, 837, 909, 953], "preserv": [218, 219, 227, 235, 250, 252, 255, 274, 304, 305, 315, 346, 441, 442, 443, 462, 463, 501, 547, 626, 640, 673, 690, 837, 866, 867, 873, 881, 883, 899, 920, 953, 1051, 1052, 1053, 1118, 1164, 1228, 1256, 1272, 1330, 1348], "pressur": [51, 145, 146, 155, 157, 159, 163, 164, 671, 837, 953, 1253, 1348], "presum": [584, 837], "prev_pow2": 58, "prevent": [304, 346, 357, 433, 434, 609, 737, 837, 953, 1044, 1045, 1319, 1348], "preview": [234, 346], "previou": [54, 58, 199, 346, 349, 443, 609, 610, 612, 614, 616, 617, 627, 733, 837, 1053, 1217, 1348, 1353], "previous": [2, 3], "price": [346, 349, 1379], "primari": [150, 957, 1376, 1379], "primarili": 1, "primit": [40, 346, 526, 837], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 146, 167, 168, 170, 220, 234, 235, 249, 253, 302, 324, 346, 519, 601, 776, 779, 837, 858, 879, 953, 959, 1141, 1326, 1348, 1379], "prior": [135, 346, 349, 1348, 1353], "prioriti": 176, "probabl": [488, 633, 837, 1103, 1222, 1348], "process": [15, 38, 48, 49, 50, 51, 62, 63, 145, 146, 147, 159, 181, 280, 346, 858, 859, 869, 896, 909, 953], "process_index": [303, 346], "produc": [2, 3, 95, 140, 175, 179, 207, 250, 346, 379, 417, 545, 596, 795, 798, 837, 881, 887, 953, 986, 1162], "product": [56, 212, 250, 346, 433, 440, 837, 881, 953, 1044, 1050, 1348], "profil": [33, 178, 180, 858, 953], "profile_nam": 33, "programmat": [214, 346, 863, 953], "progress": [72, 78], "project": [48, 49, 50, 51, 62, 63, 129, 140, 159, 161, 162, 163, 164, 678, 679, 837, 858, 859, 869, 887, 896, 900, 909, 953], "projection_pushdown": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 887, 896, 909, 953], "prompt": 137, "propag": [383, 490, 526, 555, 618, 619, 621, 682, 698, 765, 766, 837, 990, 1105, 1141, 1172, 1210, 1211, 1213, 1264, 1280, 1348], "propagate_nan": 767, "proper": [252, 346, 883, 953], "properti": [40, 41, 190, 193, 194, 203, 210, 211, 220, 228, 239, 283, 288, 319, 323, 346, 349, 350, 860, 861, 868, 903, 922, 927, 953, 958, 959, 1102, 1120, 1209, 1251, 1348, 1353, 1379], "proport": [748, 837, 1337, 1348], "protocol": [40, 131, 147, 148, 203, 346], "prototyp": 833, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 145, 146, 148, 149, 150, 155, 157, 159, 160, 161, 162, 163, 164, 175, 179, 189, 227, 231, 246, 251, 274, 293, 303, 346, 349, 400, 401, 475, 495, 516, 576, 584, 585, 686, 687, 691, 699, 700, 716, 717, 718, 719, 787, 819, 837, 849, 858, 869, 873, 882, 896, 899, 909, 912, 928, 950, 953, 1006, 1007, 1089, 1131, 1150, 1201, 1268, 1269, 1273, 1281, 1282, 1327, 1348, 1361, 1368, 1371, 1376, 1379], "provis": 850, "prune": [157, 162, 164, 887, 953], "pt0": 475, "public": [148, 346, 837, 849, 953, 1348, 1375], "pulp": 1357, "pure": [41, 346], "purpos": [608, 837, 953], "push": [145, 151, 155, 157, 159, 162, 163, 164, 165, 207, 346, 417, 837], "pushdown": [48, 49, 50, 51, 62, 63, 129, 140, 858, 859, 869, 887, 896, 900, 909, 926, 927, 953, 1247, 1249, 1348], "put": [38, 48, 74, 346, 350, 953], "pwd": 147, "py": 161, "pyarrow": [40, 47, 130, 135, 145, 148, 149, 151, 153, 157, 160, 165, 167, 298, 304, 305, 346, 816, 849, 1323, 1329, 1330, 1348, 1358, 1360, 1376], "pyarrow_opt": [47, 149, 157, 160, 346], "pyarrow_t": 1376, "pycapsul": [130, 131, 202, 962], "pycapsuleinterfac": [131, 202, 962], "pydant": 167, "pyiceberg": [42, 161, 167, 346], "pyodbc": [39, 346], "pyodbc_uri": [39, 346], "pyspark": 181, "pytest": [168, 170], "python": [0, 33, 34, 35, 43, 44, 74, 85, 100, 131, 145, 146, 151, 153, 167, 168, 170, 203, 248, 255, 280, 281, 300, 332, 346, 438, 443, 447, 505, 584, 585, 693, 762, 776, 777, 779, 780, 824, 825, 827, 837, 843, 864, 936, 953, 957, 958, 1053, 1057, 1067, 1068, 1069, 1073, 1201, 1275, 1328, 1348, 1352, 1375], "pythondatatyp": [65, 83, 207, 346, 833, 855, 953, 959], "pythonliter": [969, 1012, 1017, 1020, 1119, 1152, 1202, 1203, 1204, 1205, 1247, 1348], "pytorch": [308, 346, 1332, 1348], "q": [281, 346, 819, 1348, 1353, 1361], "q1": [41, 346], "q2": [41, 346], "q3": [41, 346], "q4": [41, 346], "qcut": [436, 837, 1047, 1348], "qhoo": 1379, "qmark": 147, "qqr": 959, "quad": [492, 837, 1109, 1348], "qualifi": [39, 346], "quantifi": [692, 1274], "quantil": [346, 633, 656, 657, 837, 953, 1222, 1239, 1348, 1365], "quantile_cont": 1369, "quantile_disc": 1369, "quarter": [236, 251, 278, 316, 346, 465, 470, 483, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097, 1372], "queri": [10, 48, 49, 50, 51, 62, 63, 95, 129, 147, 148, 151, 159, 162, 163, 164, 224, 253, 269, 293, 346, 576, 584, 585, 700, 816, 837, 849, 858, 859, 869, 896, 898, 909, 912, 926, 927, 928, 936, 945, 953, 1114, 1201, 1282, 1348, 1357, 1358, 1360, 1364, 1375, 1377, 1378], "quick": [833, 1048, 1348, 1379], "quit": [251, 346, 882, 953], "quot": [38, 39, 48, 145, 146, 148, 159, 346, 728, 953, 1310], "quota_project_id": 35, "quote_char": [38, 48, 145, 146, 159, 346, 953], "quote_plu": 148, "quote_styl": [38, 48, 346, 953], "quotes_titl": 728, "quotient": 1370, "r": [145, 146, 159, 346, 591, 630, 685, 690, 691, 692, 693, 706, 707, 837, 959, 1267, 1272, 1273, 1274, 1275, 1288, 1289, 1303, 1361, 1371], "r1": 64, "r2": 64, "r3": 64, "rab": [683, 709, 1265, 1291, 1366], "rad": 1373, "radian": [437, 758, 837, 1369], "radix": [725, 1307], "rai": [758, 759], "raini": [706, 707, 1288, 1289], "rais": [1, 10, 16, 17, 21, 40, 64, 101, 102, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 145, 146, 150, 156, 157, 159, 164, 168, 170, 203, 207, 231, 270, 279, 304, 346, 382, 400, 417, 443, 468, 469, 551, 553, 596, 631, 633, 641, 683, 686, 695, 720, 722, 723, 725, 727, 778, 797, 837, 928, 989, 1006, 1053, 1082, 1083, 1168, 1170, 1220, 1222, 1229, 1265, 1268, 1277, 1302, 1304, 1305, 1307, 1309, 1329, 1348], "raise_if_empti": [145, 146, 150, 156, 159], "raise_if_undetermin": 596, "raise_on_fail": 928, "raker": 141, "ram": [48, 49, 50, 51, 953], "ran": [142, 837], "randn": 95, "random": [41, 43, 95, 151, 166, 173, 237, 282, 346, 514, 564, 636, 667, 672, 748, 837, 849, 1129, 1181, 1224, 1246, 1255, 1337, 1348], "randomli": 174, "rang": [18, 41, 147, 148, 214, 222, 236, 249, 346, 362, 437, 443, 451, 461, 466, 467, 468, 470, 483, 484, 520, 757, 762, 765, 775, 776, 777, 778, 779, 780, 791, 792, 795, 796, 823, 824, 825, 837, 863, 877, 953, 959, 1048, 1053, 1061, 1075, 1080, 1081, 1082, 1084, 1097, 1098, 1107, 1217, 1348, 1371], "rank": [371, 548, 760, 767, 782, 837, 978, 1165, 1348], "rankmethod": [636, 837, 1224, 1348], "rare": [444, 1054], "rather": [251, 346, 507, 584, 601, 633, 645, 730, 837, 882, 953, 1222, 1233, 1312, 1348], "raw": 148, "raw_output": [600, 909, 953], "re": [231, 236, 247, 311, 313, 346, 462, 463, 472, 475, 877, 917, 919, 953, 1076, 1077, 1086, 1089, 1376], "reach": [53, 704, 705, 730, 1286, 1287, 1312], "read": [37, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 189, 215, 224, 346, 349, 438, 507, 827, 837, 864, 898, 953, 1114, 1348, 1353], "read_arrow_batches_from_odbc": 147, "read_clipboard": [37, 346], "read_csv": [144, 150, 159], "read_csv_batch": 139, "read_databas": [95, 148], "read_database_uri": 147, "read_excel": 156, "read_ndjson": 154, "read_od": 150, "read_opt": 150, "read_parquet": 164, "read_tabl": 157, "readabl": 833, "reader": [47, 51, 139, 140, 145, 146, 151, 153, 155, 157, 346, 953], "readi": 946, "readthedoc": [41, 346], "real": [692, 1274], "realli": [435, 684, 708, 837, 1046, 1266, 1290, 1348], "realloc": [155, 159, 162, 163, 224, 346, 1114, 1348], "rearrang": [255, 346], "reason": [181, 214, 346, 576, 584, 837, 863, 953], "receiv": [56, 147, 159, 255, 269, 332, 346, 585, 630, 837, 895, 953, 1379], "recent": [168, 169, 170, 171, 304, 346, 627, 641, 837, 1217, 1229, 1329, 1348, 1360, 1376], "rechunk": [64, 130, 131, 135, 145, 146, 149, 151, 153, 155, 157, 159, 160, 162, 163, 164, 224, 346, 837, 1033, 1114, 1125, 1207, 1348], "recognis": [10, 16, 17, 21, 959], "recommend": [41, 181, 214, 248, 253, 269, 346, 576, 854, 863, 953, 959], "record": [38, 44, 48, 141, 153, 165, 346, 953], "record_batch": [249, 346], "recordbatch": [130, 249, 346, 816, 1358, 1360, 1376], "recurs": [48, 49, 50, 51, 491, 493, 494, 837, 953, 1108, 1110, 1111, 1348], "red": [55, 96, 97, 332, 748, 837, 936, 1337, 1348], "redempt": 1357, "redshift": 148, "redshift_format": 192, "reduc": [51, 145, 146, 155, 157, 159, 162, 163, 164, 280, 333, 334, 336, 339, 346, 671, 772, 785, 837, 937, 938, 940, 943, 953, 1203, 1221, 1253, 1319, 1348], "reduct": [229, 346, 585, 837], "ref": [691, 693, 1273, 1275], "refer": [0, 33, 41, 100, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 212, 215, 346, 350, 438, 472, 475, 636, 691, 706, 707, 720, 722, 723, 727, 837, 864, 953, 1086, 1089, 1224, 1288, 1289, 1302, 1304, 1305, 1309, 1348], "referenc": [41, 346, 584, 706, 707, 733, 837, 1288, 1289, 1358, 1376], "reg": 141, "regard": [145, 767], "regardless": [135, 206, 235, 251, 309, 346, 416, 448, 700, 743, 827, 837, 853, 882, 916, 953, 1058, 1282], "regex": [98, 495, 591, 592, 594, 683, 685, 691, 692, 693, 695, 706, 707, 731, 783, 837, 959, 1265, 1267, 1273, 1274, 1275, 1277, 1288, 1289], "regexp_lik": 1369, "region": [41, 161, 346], "region_nam": 33, "regist": [1, 57, 58, 59, 60, 140, 142, 178, 180, 293, 346, 837, 912, 953, 957, 1357, 1358, 1360, 1361, 1362, 1363, 1376, 1378], "register_dataframe_namespac": [1, 58, 59, 60], "register_expr_namespac": [1, 57, 59, 60], "register_glob": [1359, 1361, 1363, 1376], "register_io_sourc": 957, "register_lazyframe_namespac": [1, 57, 58, 60], "register_mani": [1359, 1360, 1363], "register_plugin": 837, "register_plugin_funct": 837, "register_series_namespac": [1, 57, 58, 59], "registr": [293, 346, 816, 849, 912, 953, 1363, 1376], "regrid": [520, 837], "regular": [138, 248, 279, 280, 316, 323, 346, 495, 683, 684, 685, 689, 691, 692, 693, 694, 695, 696, 706, 707, 708, 762, 783, 833, 837, 927, 953, 959, 1265, 1266, 1267, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1288, 1289, 1290, 1374], "reinterpret": [837, 1348], "rel": [41, 142, 148, 149, 160, 161, 168, 169, 170, 171, 346, 465, 491, 493, 494, 748, 837, 1079, 1108, 1110, 1111, 1337, 1348], "relat": [147, 199, 706, 707, 959, 1288, 1289, 1364], "releas": [63, 250, 346, 585, 837, 859, 881, 953, 1379], "release_year": 1357, "relev": 64, "reli": [250, 346, 881, 953], "reliabl": [96, 97], "remain": [52, 145, 146, 159, 218, 219, 222, 227, 270, 274, 346, 441, 442, 501, 547, 640, 712, 713, 837, 866, 867, 873, 887, 899, 953, 1051, 1052, 1107, 1118, 1164, 1228, 1294, 1295, 1348, 1363], "remaind": [403, 713, 1009, 1295, 1370], "remap": 99, "remot": [95, 145, 146, 151, 153, 953], "remov": [4, 145, 146, 159, 203, 216, 227, 301, 346, 495, 610, 715, 716, 717, 718, 719, 783, 837, 865, 873, 953, 1297, 1298, 1299, 1300, 1301, 1324, 1348, 1378], "removes_pronoun": 708, "removesuffix": 610, "renam": [1, 133, 145, 146, 182, 235, 284, 285, 320, 321, 325, 327, 346, 357, 507, 602, 603, 609, 610, 611, 612, 614, 616, 617, 733, 735, 815, 819, 837, 876, 904, 905, 923, 924, 929, 931, 953, 965, 1277, 1316, 1325, 1348, 1376], "rename_field": [712, 713, 1294, 1295], "render": [600, 909, 953], "render_as_str": 147, "reoconstruct": [281, 346], "repeat": [54, 151, 162, 637, 639, 809, 828, 837], "repeat_bi": 837, "replac": [39, 40, 42, 52, 53, 54, 145, 146, 159, 225, 226, 276, 310, 313, 320, 321, 346, 349, 447, 469, 499, 584, 585, 641, 707, 708, 723, 837, 871, 919, 923, 924, 953, 1057, 1083, 1116, 1229, 1247, 1249, 1289, 1290, 1305, 1348, 1353, 1369], "replace_al": [641, 706, 837, 1228, 1229, 1288, 1348], "replace_column": 346, "replace_strict": [640, 837, 1228, 1348], "replace_time_zon": [444, 450, 452, 1059, 1060, 1087], "replace_with": [708, 1290], "replic": [741, 837, 1331, 1348], "report": [147, 222, 346, 703, 1107, 1285, 1348], "repr": [137, 418, 422, 475, 1023, 1028, 1089], "repres": [38, 41, 42, 48, 70, 71, 73, 84, 88, 93, 130, 132, 134, 135, 136, 147, 270, 293, 294, 303, 304, 317, 324, 346, 421, 505, 529, 530, 572, 578, 584, 681, 697, 702, 706, 707, 710, 721, 749, 752, 769, 781, 783, 797, 798, 799, 808, 813, 814, 818, 826, 833, 837, 912, 913, 921, 953, 959, 1027, 1247, 1263, 1279, 1284, 1288, 1289, 1292, 1303, 1329, 1338, 1348, 1376], "represent": [11, 45, 46, 70, 71, 73, 88, 137, 286, 302, 346, 418, 420, 421, 422, 446, 451, 454, 456, 457, 458, 459, 460, 461, 464, 466, 467, 471, 484, 485, 487, 599, 741, 837, 869, 885, 906, 953, 1023, 1026, 1027, 1028, 1029, 1056, 1061, 1064, 1065, 1066, 1070, 1071, 1072, 1074, 1075, 1078, 1080, 1081, 1085, 1098, 1099, 1101, 1326, 1331, 1348, 1367], "request": 35, "requested_schema": [202, 962], "requir": [1, 33, 34, 35, 40, 41, 56, 64, 135, 147, 148, 168, 169, 170, 171, 184, 212, 218, 279, 303, 304, 305, 308, 346, 396, 418, 422, 491, 493, 494, 577, 585, 626, 649, 651, 653, 655, 657, 660, 662, 664, 671, 720, 722, 723, 745, 812, 837, 861, 866, 867, 868, 911, 922, 953, 1003, 1106, 1108, 1110, 1111, 1194, 1253, 1288, 1302, 1304, 1305, 1329, 1330, 1334, 1348], "require_al": 959, "require_http": 184, "rerais": [63, 859, 953], "rerun": [224, 346, 1114, 1348], "resampl": [236, 346, 877, 953], "reset": [4, 199], "reset_index": [135, 236, 346, 877, 953], "reshap": [270, 304, 346, 549, 764, 837, 1166, 1348], "resolv": [142, 227, 346, 447, 576, 860, 861, 868, 903, 922, 953], "resourc": [928, 957], "respect": [41, 145, 159, 346, 684, 694, 696, 708, 959, 1266, 1276, 1278, 1290, 1332, 1348], "respons": [148, 262, 346, 892, 953], "rest": [728, 1310], "restor": [199, 346, 349, 1348, 1353], "restore_default": 199, "restrict": [31, 713, 1295], "result": [14, 38, 45, 46, 47, 48, 49, 50, 51, 56, 64, 134, 135, 136, 147, 148, 150, 159, 162, 164, 165, 179, 224, 227, 236, 237, 250, 251, 252, 266, 270, 274, 278, 281, 286, 287, 289, 303, 304, 305, 316, 323, 325, 331, 346, 443, 470, 472, 475, 483, 491, 492, 493, 494, 498, 505, 514, 522, 534, 575, 576, 584, 585, 599, 626, 631, 633, 640, 641, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 669, 670, 690, 707, 711, 712, 723, 744, 748, 771, 772, 776, 778, 779, 780, 781, 796, 797, 798, 809, 812, 813, 814, 816, 828, 837, 854, 858, 863, 873, 877, 881, 882, 883, 887, 896, 899, 902, 906, 907, 908, 927, 929, 935, 946, 947, 953, 959, 968, 1084, 1086, 1089, 1097, 1108, 1110, 1111, 1114, 1115, 1129, 1136, 1151, 1192, 1201, 1220, 1222, 1228, 1229, 1230, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1250, 1252, 1272, 1293, 1294, 1305, 1329, 1330, 1337, 1348, 1358, 1364, 1376, 1377, 1379], "resultset": 147, "retain": [227, 274, 346, 873, 899, 953], "retri": [38, 43, 47, 48, 49, 50, 51, 155, 157, 159, 162, 163, 164, 189, 346, 953], "retriev": [184, 185, 189, 231, 303, 346, 376, 377, 541, 542, 731, 808, 983, 984, 1158, 1159, 1313, 1327, 1348, 1364], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 95, 107, 110, 118, 126, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 181, 182, 189, 201, 204, 206, 208, 211, 212, 213, 217, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 244, 246, 247, 248, 249, 250, 253, 254, 255, 257, 259, 264, 265, 266, 268, 269, 270, 275, 278, 279, 280, 281, 282, 286, 293, 296, 297, 303, 304, 305, 308, 309, 310, 311, 316, 319, 320, 321, 327, 329, 331, 332, 335, 340, 346, 358, 360, 363, 364, 365, 366, 367, 368, 371, 372, 376, 377, 378, 380, 382, 383, 394, 399, 400, 401, 402, 403, 404, 405, 415, 416, 420, 421, 426, 427, 428, 429, 430, 436, 437, 443, 444, 446, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 492, 497, 505, 508, 509, 511, 515, 516, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 537, 538, 541, 542, 544, 549, 551, 553, 554, 555, 557, 564, 574, 575, 582, 584, 585, 597, 599, 600, 601, 606, 630, 633, 635, 639, 640, 641, 642, 644, 645, 667, 668, 673, 674, 675, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 713, 721, 725, 730, 738, 739, 740, 742, 743, 744, 746, 747, 748, 751, 752, 757, 758, 759, 760, 761, 762, 768, 770, 775, 776, 777, 778, 779, 780, 781, 784, 787, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 809, 812, 815, 816, 819, 822, 823, 824, 825, 827, 828, 837, 853, 856, 858, 859, 861, 862, 863, 868, 869, 875, 877, 878, 881, 885, 886, 887, 895, 896, 900, 902, 906, 909, 915, 916, 917, 922, 923, 924, 931, 933, 935, 939, 944, 946, 953, 958, 959, 961, 963, 966, 967, 968, 976, 977, 979, 980, 981, 982, 983, 984, 985, 987, 989, 990, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1021, 1025, 1026, 1027, 1034, 1040, 1041, 1047, 1048, 1053, 1054, 1056, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1107, 1109, 1113, 1114, 1119, 1123, 1130, 1131, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1166, 1168, 1170, 1171, 1172, 1174, 1181, 1191, 1192, 1199, 1201, 1206, 1215, 1222, 1228, 1229, 1230, 1231, 1232, 1233, 1246, 1248, 1256, 1264, 1265, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1291, 1292, 1293, 1294, 1295, 1303, 1307, 1312, 1320, 1323, 1330, 1333, 1335, 1336, 1337, 1339, 1348, 1357, 1358, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1374, 1376, 1377, 1378, 1379], "return_as_str": [234, 346, 601], "return_dtyp": [41, 255, 346, 584, 585, 640, 641, 751, 798, 799, 837, 1201, 1228, 1229, 1348], "return_typ": [303, 308, 346], "returns_scalar": [142, 584, 585, 799, 837], "reus": [62, 63, 129, 199, 858, 859, 869, 896, 909, 953], "reusabl": 199, "rev": [252, 346, 883, 953], "revers": [206, 222, 309, 346, 416, 430, 431, 432, 433, 434, 610, 612, 614, 743, 764, 770, 837, 853, 916, 953, 1041, 1042, 1043, 1044, 1045, 1348, 1366, 1369], "reverse_": 612, "reverse_a": 612, "reverse_b": 612, "revert": [7, 9, 11], "rhap": [694, 696, 1278], "rhapsodi": [694, 696, 1278], "right": [9, 11, 16, 17, 19, 28, 41, 72, 145, 146, 168, 169, 170, 171, 236, 250, 251, 278, 315, 346, 436, 491, 492, 493, 494, 522, 565, 566, 567, 568, 633, 646, 649, 651, 653, 655, 657, 660, 662, 664, 668, 676, 763, 776, 777, 779, 780, 795, 796, 824, 825, 837, 877, 881, 882, 902, 920, 953, 1047, 1108, 1109, 1110, 1111, 1136, 1182, 1183, 1184, 1185, 1222, 1248, 1259, 1348, 1364, 1369], "right_left": [250, 315, 346, 881, 920, 953], "right_on": [250, 251, 315, 346, 881, 882, 920, 953], "rightmost": [668, 837, 1248, 1348, 1371], "rld": [715, 717, 1299], "rle": [645, 837, 1233, 1348], "rle_id": [644, 837, 1348], "rle_id_a": [645, 837], "rle_id_ab": [645, 837], "rmm": 928, "rn": [145, 146, 159], "role": [33, 148], "roll": [236, 346, 443, 462, 463, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 765, 813, 814, 837, 877, 953, 1053, 1076, 1077, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1348], "rollback": [463, 1077], "rolled_forward": 443, "rollforward": [462, 1076], "rolling_map": [837, 1348], "rolling_max": [837, 1348], "rolling_max_bi": 837, "rolling_mean": [837, 1348], "rolling_mean_bi": 837, "rolling_median": [837, 1348], "rolling_median_bi": 837, "rolling_min": [837, 1348], "rolling_min_bi": 837, "rolling_quantil": [837, 1348], "rolling_quantile_bi": 837, "rolling_row_max": [649, 837], "rolling_row_mean": [651, 837], "rolling_row_median": [653, 837], "rolling_row_min": [655, 837], "rolling_row_quantil": [657, 837], "rolling_row_std": [660, 837], "rolling_row_sum": [662, 837], "rolling_row_var": [664, 837], "rolling_skew": [837, 1348], "rolling_std": [837, 1348], "rolling_std_bi": 837, "rolling_sum": [647, 837, 1234, 1348], "rolling_sum_bi": 837, "rolling_var": [837, 1348], "rolling_var_bi": 837, "rollinggroupbi": [278, 346], "rollinginterpolationmethod": [214, 272, 338, 346, 634, 656, 657, 810, 837, 863, 897, 942, 953, 1048, 1223, 1239, 1348], "ronaldo": [691, 1273], "root": [149, 160, 423, 598, 609, 610, 612, 614, 616, 617, 680, 836, 837, 1031, 1262, 1348, 1370], "rotat": [346, 349, 1348, 1353], "round": [21, 41, 58, 137, 147, 346, 424, 428, 504, 666, 739, 837, 1032, 1121, 1245, 1348, 1369], "round_sig_fig": [837, 1348], "round_str": 1084, "round_td": 1084, "rounded_corn": 21, "row": [15, 21, 26, 38, 39, 41, 47, 48, 51, 53, 56, 57, 59, 64, 104, 110, 118, 126, 133, 134, 135, 136, 137, 140, 141, 145, 146, 147, 150, 151, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 168, 169, 175, 204, 206, 207, 208, 218, 219, 224, 227, 229, 230, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 261, 262, 266, 270, 274, 278, 281, 282, 291, 297, 300, 302, 303, 308, 309, 311, 313, 314, 315, 322, 323, 327, 329, 331, 332, 340, 346, 350, 371, 372, 380, 395, 416, 417, 497, 505, 509, 515, 538, 549, 576, 626, 627, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 677, 679, 690, 699, 738, 743, 757, 760, 766, 768, 785, 789, 791, 792, 794, 796, 811, 813, 814, 822, 827, 837, 853, 856, 866, 867, 873, 874, 875, 877, 878, 881, 882, 883, 884, 886, 887, 891, 892, 899, 910, 915, 916, 917, 919, 920, 926, 927, 931, 933, 935, 936, 944, 953, 963, 978, 987, 1113, 1114, 1123, 1130, 1155, 1166, 1217, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1260, 1272, 1281, 1320, 1348, 1357, 1364, 1366, 1377, 1378, 1379], "row_group": [157, 164], "row_group_s": [47, 51, 346, 953], "row_height": [41, 346], "row_index": [41, 346], "row_index_nam": [145, 146, 151, 153, 155, 157, 159, 162, 163, 164], "row_index_offset": [145, 146, 151, 153, 155, 157, 159, 162, 163, 164], "row_nr": [322, 346, 926, 953], "row_tot": [41, 346], "rowname_col": [346, 350], "rows_by_kei": [248, 280, 299, 346], "rowserror": [279, 346], "rowtotalsdefinit": [41, 346], "rtol": [168, 169, 170, 171], "rtrim": 1369, "ru": 1371, "rule": [145, 157, 159, 164, 229, 346, 684, 708, 723, 1266, 1290, 1305], "run": [48, 49, 50, 51, 62, 63, 71, 95, 129, 147, 175, 178, 179, 180, 235, 250, 253, 255, 285, 311, 321, 332, 346, 421, 435, 548, 584, 585, 644, 645, 702, 815, 837, 858, 859, 869, 876, 881, 887, 891, 896, 898, 905, 909, 917, 924, 928, 953, 957, 959, 1027, 1046, 1165, 1201, 1232, 1233, 1284, 1348, 1376, 1379], "runtim": 957, "runtimeerror": [304, 346, 1329, 1348], "rust": [38, 47, 48, 100, 112, 142, 150, 151, 153, 157, 255, 332, 346, 693, 953, 957, 1201, 1275, 1348], "s1": [55, 96, 97, 170, 171, 229, 346, 1002, 1105, 1106, 1125, 1150, 1160, 1193, 1213, 1225, 1339, 1348], "s2": [1, 55, 96, 97, 170, 171, 229, 346, 1002, 1033, 1050, 1105, 1106, 1125, 1141, 1150, 1160, 1193, 1207, 1213, 1225, 1339, 1348], "s3": [1, 40, 149, 160, 161, 164, 165, 346, 898, 953, 1002, 1193, 1348], "s_": 475, "s_bar": 1366, "s_dt": [475, 1371, 1372], "s_dt1": 1371, "s_dt2": 1371, "s_dtm": 475, "s_foo": 1366, "s_from_str_repr": [1326, 1348], "s_head_5": 697, "s_head_n": 697, "s_tail_5": 721, "s_tail_n": 721, "s_td": 475, "s_tm": [475, 1371, 1372], "safe": [638, 837, 1226, 1348], "sale": [626, 837], "salesforce_format": 192, "sam": 13, "same": [21, 40, 41, 54, 55, 56, 62, 63, 64, 96, 97, 113, 151, 159, 168, 169, 170, 171, 173, 199, 227, 235, 251, 255, 270, 274, 280, 281, 292, 311, 320, 321, 325, 332, 346, 354, 361, 394, 420, 441, 442, 475, 501, 505, 507, 508, 511, 575, 589, 595, 626, 640, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 672, 679, 690, 701, 733, 833, 837, 858, 859, 873, 876, 882, 885, 887, 899, 911, 917, 923, 924, 929, 953, 959, 964, 1001, 1026, 1051, 1052, 1057, 1089, 1192, 1201, 1228, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1272, 1283, 1339, 1348, 1362, 1364, 1372], "samoa": [444, 1054], "sampl": [145, 146, 332, 346, 672, 676, 795, 796, 837, 936, 1259, 1348, 1365], "sample_s": [145, 146], "sampled_from": 1379, "sandwich": [232, 346], "sat": [346, 349], "satisfi": [522, 837, 1136, 1348], "saturdai": [236, 346, 877, 953], "save": [2, 3, 6, 236, 251, 278, 316, 346, 444, 452, 465, 470, 483, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 781, 824, 825, 833, 837, 849, 877, 882, 902, 953, 1062, 1079, 1084, 1097], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [142, 204, 246, 255, 279, 289, 346, 421, 584, 668, 670, 697, 702, 710, 721, 797, 799, 837, 908, 953, 963, 1027, 1150, 1248, 1252, 1279, 1284, 1292, 1303, 1348], "scale": [29, 72, 222, 346, 404, 585, 630, 724, 837, 959, 1107, 1306, 1348], "scale_negative_even": [630, 837], "scan": [133, 136, 145, 146, 147, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 189, 346, 699, 953, 1281], "scan_csv": [48, 49, 50, 51, 145, 146, 953], "scan_ipc": 151, "scan_ndjson": 155, "scan_parquet": [52, 54, 157, 165, 898, 953], "scan_pyarrow_dataset": [157, 164], "scan_tabl": 197, "scatter": [346, 349, 1348, 1353], "scenario": 1348, "schedul": [63, 859, 953], "schema": [0, 1, 15, 29, 36, 39, 40, 57, 58, 59, 64, 95, 104, 121, 122, 130, 132, 133, 134, 136, 140, 141, 145, 146, 147, 148, 150, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 185, 187, 188, 189, 193, 195, 208, 209, 210, 216, 220, 222, 249, 253, 255, 262, 266, 275, 304, 308, 346, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 450, 575, 576, 585, 596, 611, 613, 615, 699, 751, 819, 837, 849, 856, 857, 860, 861, 865, 868, 887, 892, 900, 922, 936, 953, 959, 1036, 1281, 1348, 1357], "schema_mod": [40, 346], "schema_overrid": [130, 132, 133, 134, 135, 136, 145, 146, 147, 148, 150, 154, 155, 156, 159, 163, 249, 304, 346, 953, 959], "schemadefinit": [130, 132, 133, 134, 136, 154, 155, 163, 346, 953], "schemadict": [87, 95, 130, 132, 133, 134, 135, 136, 140, 145, 147, 148, 150, 156, 157, 159, 162, 164, 346, 819, 887, 936, 953], "schemainitdatatyp": 958, "scheme": [52, 53, 54], "schindler": 1357, "scientif": [12, 38, 48, 346, 953], "scikit": [308, 346], "scipi": [534, 676, 837, 1151, 1259, 1348], "scope": [34, 35, 199, 848, 959, 1360, 1363, 1376], "score": [41, 270, 346], "script": [346, 349, 1348, 1353], "scroll": [41, 346], "sdiff": 567, "sdk": 184, "search": [251, 346, 576, 684, 694, 696, 708, 882, 911, 953, 1133, 1266, 1276, 1278, 1290, 1348], "search_sort": [837, 1348], "searchsortedsid": [668, 837, 1248, 1348], "searchstrategi": [172, 174, 175, 176, 177, 179], "season": [706, 707], "sec": [1372, 1379], "second": [38, 48, 155, 159, 162, 163, 168, 169, 170, 171, 236, 251, 278, 316, 346, 454, 457, 459, 460, 464, 465, 468, 470, 475, 482, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 706, 707, 720, 723, 778, 779, 780, 781, 823, 824, 825, 827, 837, 877, 882, 902, 953, 959, 1079, 1082, 1084, 1096, 1097, 1109, 1288, 1289, 1302, 1305, 1348, 1371, 1372, 1377, 1379], "second_part": [712, 713, 1294, 1295], "seconds_diff": 482, "secret": [161, 164], "section": [270, 346, 683, 691, 692, 695, 706, 707, 776, 777, 779, 780, 824, 825, 957, 1265, 1273, 1274, 1277, 1288, 1289], "secur": [438, 837, 864, 953], "see": [38, 40, 41, 43, 44, 47, 48, 49, 50, 51, 71, 140, 142, 147, 148, 149, 150, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 175, 179, 189, 201, 212, 227, 236, 250, 269, 270, 274, 315, 346, 350, 409, 410, 412, 413, 425, 475, 500, 534, 584, 676, 683, 691, 692, 695, 697, 706, 707, 721, 776, 777, 779, 780, 811, 824, 825, 833, 837, 873, 877, 899, 920, 928, 953, 957, 959, 961, 1015, 1016, 1018, 1019, 1029, 1035, 1089, 1151, 1259, 1265, 1273, 1274, 1277, 1279, 1288, 1289, 1303, 1348, 1379], "seed": [95, 166, 237, 282, 346, 514, 564, 636, 667, 672, 837, 1129, 1181, 1224, 1246, 1255, 1348], "seed_1": [237, 346, 514, 837, 1129, 1348], "seed_2": [237, 346, 514, 837, 1129, 1348], "seed_3": [237, 346, 514, 837, 1129, 1348], "seen": [475, 1089], "seen_group": 146, "select": [1, 8, 39, 48, 49, 50, 51, 56, 57, 58, 59, 62, 63, 95, 101, 143, 145, 146, 147, 148, 149, 151, 153, 157, 159, 165, 174, 204, 205, 246, 247, 251, 255, 266, 269, 279, 285, 291, 293, 306, 312, 316, 323, 346, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 380, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 402, 405, 406, 411, 414, 415, 416, 419, 423, 424, 426, 427, 428, 429, 435, 437, 439, 440, 441, 442, 445, 447, 448, 456, 462, 463, 465, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 488, 491, 493, 494, 495, 496, 497, 498, 502, 504, 506, 509, 513, 514, 515, 516, 517, 518, 519, 520, 523, 524, 527, 533, 534, 535, 537, 538, 548, 549, 576, 579, 580, 581, 582, 584, 585, 586, 587, 588, 592, 604, 606, 608, 609, 611, 613, 615, 618, 619, 623, 624, 625, 626, 628, 629, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 647, 658, 665, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 696, 698, 703, 720, 731, 733, 734, 737, 738, 739, 740, 742, 743, 745, 746, 747, 748, 749, 752, 754, 756, 759, 760, 761, 764, 765, 767, 768, 769, 770, 773, 780, 781, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 800, 802, 804, 805, 807, 808, 811, 812, 816, 817, 818, 819, 820, 822, 826, 833, 837, 852, 858, 859, 861, 869, 882, 895, 896, 905, 909, 910, 912, 918, 925, 927, 928, 953, 959, 963, 1083, 1122, 1165, 1247, 1249, 1260, 1278, 1282, 1302, 1348, 1357, 1358, 1359, 1360, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378], "select_from": [174, 177, 179], "select_seq": [346, 953], "selector": [0, 41, 207, 216, 218, 219, 223, 261, 268, 270, 292, 301, 303, 308, 311, 313, 314, 346, 350, 475, 495, 592, 837, 849, 855, 865, 866, 867, 870, 891, 911, 917, 919, 953], "selectortyp": [41, 346, 959], "self": [1, 57, 58, 59, 60, 62, 63, 129, 293, 324, 346, 816, 837, 858, 859, 869, 896, 909, 912, 925, 953, 968, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1036, 1041, 1114, 1118, 1132, 1199, 1201, 1214, 1218, 1219, 1225, 1228, 1229, 1247, 1249, 1250, 1261, 1336, 1339, 1348, 1359, 1360, 1361, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376], "semi": [141, 250, 346, 881, 953, 1364], "semigraph": 21, "sens": [145, 151, 153, 262, 316, 346, 626, 837, 892, 953], "sensit": [683, 692, 695, 706, 707, 1265, 1274, 1277, 1288, 1289], "sep": 141, "separ": [9, 11, 25, 28, 37, 38, 48, 139, 141, 144, 145, 146, 150, 159, 268, 270, 301, 310, 312, 346, 380, 383, 475, 549, 555, 585, 690, 766, 771, 772, 837, 918, 953, 987, 990, 1089, 1166, 1172, 1272, 1318, 1324, 1348, 1371], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 52, 54, 56, 87, 130, 132, 133, 134, 136, 141, 145, 146, 147, 150, 154, 155, 156, 159, 163, 173, 174, 175, 176, 177, 206, 214, 223, 224, 250, 251, 261, 266, 268, 269, 270, 281, 292, 301, 303, 308, 309, 313, 314, 315, 316, 346, 395, 416, 436, 508, 526, 576, 584, 630, 633, 640, 641, 679, 708, 718, 719, 733, 743, 760, 771, 772, 785, 787, 795, 796, 798, 799, 808, 811, 817, 837, 853, 863, 870, 881, 882, 891, 895, 911, 916, 919, 920, 953, 959, 1002, 1047, 1048, 1114, 1193, 1222, 1228, 1229, 1290, 1316, 1348], "sequenti": [62, 63, 129, 285, 321, 346, 858, 859, 869, 896, 905, 909, 924, 953], "ser": [1059, 1060, 1087], "seri": [0, 1, 12, 26, 41, 55, 57, 58, 59, 60, 64, 65, 74, 87, 96, 97, 106, 130, 132, 135, 137, 142, 170, 171, 175, 204, 217, 227, 229, 231, 233, 236, 237, 240, 241, 243, 245, 247, 257, 259, 264, 274, 276, 278, 282, 296, 299, 302, 304, 306, 307, 326, 346, 361, 372, 395, 399, 418, 419, 420, 421, 422, 424, 469, 498, 501, 504, 508, 509, 519, 524, 526, 527, 529, 530, 531, 532, 543, 549, 551, 576, 582, 584, 585, 636, 637, 638, 639, 640, 641, 646, 647, 658, 669, 671, 697, 708, 720, 721, 722, 723, 727, 731, 742, 747, 757, 761, 764, 771, 772, 776, 777, 779, 780, 785, 787, 791, 792, 795, 796, 797, 798, 799, 809, 811, 812, 815, 816, 819, 824, 825, 828, 837, 849, 873, 877, 899, 902, 930, 953, 1340, 1342, 1344, 1347, 1349, 1352, 1353, 1354, 1355, 1356, 1358, 1360, 1371, 1376, 1379], "serial": [45, 46, 215, 346, 438, 603, 837, 864, 953], "serializ": [142, 837], "serializationformat": [215, 286, 346, 438, 599, 837, 864, 906, 953], "seriesplot": [1348, 1353], "server": [39, 147, 148, 346], "servic": 33, "service_account": [149, 160], "service_account_json_absolute_path": [149, 160], "session": 147, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 62, 63, 68, 71, 72, 74, 131, 132, 133, 136, 142, 145, 146, 147, 150, 151, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 189, 199, 203, 211, 218, 219, 228, 231, 235, 237, 248, 250, 251, 259, 261, 280, 282, 284, 286, 291, 296, 301, 303, 304, 308, 310, 311, 313, 314, 315, 320, 346, 349, 358, 360, 382, 383, 395, 407, 409, 410, 412, 413, 425, 436, 468, 469, 486, 514, 526, 551, 553, 555, 564, 565, 566, 567, 568, 570, 576, 584, 585, 592, 593, 599, 630, 633, 640, 641, 647, 648, 650, 652, 654, 656, 659, 661, 663, 667, 672, 676, 677, 682, 698, 699, 706, 707, 710, 715, 716, 717, 718, 719, 720, 722, 723, 727, 748, 752, 754, 757, 761, 766, 776, 777, 778, 779, 780, 781, 791, 792, 795, 796, 797, 803, 809, 812, 813, 814, 815, 819, 821, 824, 825, 827, 828, 837, 849, 858, 859, 866, 867, 869, 876, 881, 882, 887, 891, 896, 904, 906, 909, 910, 917, 919, 920, 923, 936, 953, 966, 967, 989, 990, 1002, 1006, 1013, 1015, 1016, 1018, 1019, 1035, 1047, 1082, 1083, 1100, 1120, 1129, 1141, 1148, 1168, 1170, 1172, 1181, 1182, 1183, 1184, 1185, 1187, 1193, 1201, 1222, 1228, 1229, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1246, 1247, 1248, 1255, 1259, 1260, 1264, 1280, 1281, 1288, 1289, 1292, 1297, 1298, 1299, 1302, 1304, 1305, 1309, 1329, 1337, 1348, 1367, 1375, 1379], "set_": 199, "set_auto_structifi": [284, 320, 346, 904, 923, 953], "set_decimal_separ": 28, "set_environ": 178, "set_except": [63, 859, 953], "set_fmt_float": 31, "set_fmt_str_length": [684, 694, 696, 708, 1266, 1278, 1290], "set_index": [236, 346, 877, 953], "set_legend": [41, 346], "set_sort": [278, 316, 346, 646, 837, 902, 953, 1348], "set_stat": 31, "set_streaming_chunk_s": [858, 953], "set_styl": [41, 346], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 56], "set_tbl_row": 199, "set_tbl_width_char": 708, "set_thousands_separ": 9, "set_titl": [41, 346], "set_verbos": 199, "setosa": [346, 349], "setup": 1379, "seventeen": [518, 837], "sever": [130, 132, 133, 134, 136, 154, 155, 163, 346, 898, 953, 1379], "sfu": 148, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 96, 97, 104, 123, 130, 131, 132, 133, 134, 135, 136, 137, 141, 145, 154, 155, 159, 165, 172, 175, 179, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 231, 233, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 282, 284, 286, 289, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 604, 605, 606, 607, 608, 609, 610, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 837, 852, 853, 855, 856, 858, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 958, 959, 963, 964, 965, 968, 970, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1105, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1122, 1123, 1125, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1206, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1252, 1253, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1318, 1320, 1321, 1322, 1324, 1325, 1326, 1331, 1333, 1334, 1335, 1336, 1337, 1339, 1348, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1376, 1377], "share": [168, 169, 170, 171, 222, 346, 1107, 1348], "shawshank": 1357, "sheet": [41, 150, 156, 346], "sheet1": [41, 346], "sheet_id": [150, 156], "sheet_nam": [150, 156], "sheet_zoom": [41, 346], "sheetnam": [150, 156], "shift": [236, 346, 398, 439, 506, 546, 627, 765, 837, 877, 953, 1049, 1163, 1217, 1348], "short": [168, 170, 403, 1009], "shorten": [168, 170], "shorter": [145, 146, 159, 576, 791, 792], "shorthand": [346, 349, 1348, 1353], "should": [11, 39, 41, 47, 48, 49, 50, 51, 64, 95, 130, 132, 134, 136, 140, 141, 150, 154, 155, 159, 163, 165, 172, 173, 175, 179, 216, 248, 250, 251, 255, 279, 280, 281, 292, 300, 301, 312, 332, 346, 356, 435, 438, 486, 492, 495, 529, 530, 548, 585, 599, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 668, 676, 679, 706, 707, 748, 760, 781, 783, 797, 799, 813, 814, 827, 833, 837, 858, 864, 865, 869, 881, 882, 887, 896, 906, 909, 911, 918, 953, 959, 1046, 1100, 1109, 1165, 1201, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1248, 1259, 1288, 1289, 1337, 1348, 1358], "show": [31, 41, 214, 219, 234, 253, 267, 346, 516, 600, 837, 863, 896, 909, 953, 1131, 1348, 1362, 1375], "show_graph": [253, 346, 953], "show_plot": [896, 953], "shrink": [290, 346, 671, 837, 1253, 1254, 1348], "shrink_dtyp": [837, 1348], "shrink_to_fit": [346, 1348], "shuffl": [166, 282, 308, 332, 346, 564, 667, 837, 936, 1181, 1246, 1348], "side": [41, 142, 236, 278, 346, 522, 565, 566, 567, 568, 646, 649, 651, 653, 655, 657, 660, 662, 664, 668, 776, 777, 779, 780, 795, 796, 824, 825, 837, 877, 902, 953, 1136, 1182, 1183, 1184, 1185, 1248, 1348], "sign": [70, 71, 73, 78, 79, 80, 81, 82, 88, 465, 638, 706, 707, 730, 837, 959, 1079, 1226, 1288, 1289, 1312, 1348, 1369], "sign_x": 1370, "signed_integ": 959, "signific": [164, 248, 255, 346, 409, 410, 412, 413, 585, 666, 837, 1015, 1016, 1018, 1019, 1201, 1245, 1348], "significantli": [150, 255, 332, 346, 1201, 1348, 1379], "silenc": 104, "silent": [725, 1307], "similar": [37, 47, 144, 181, 229, 251, 289, 311, 313, 346, 390, 472, 475, 569, 626, 670, 735, 794, 827, 837, 873, 882, 908, 917, 919, 953, 997, 1086, 1089, 1186, 1252, 1348], "similarli": [41, 133, 236, 251, 278, 316, 346, 465, 470, 483, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 1079, 1084, 1097], "simpl": [41, 266, 346], "simpler": [959, 1288], "simpli": [159, 771, 785], "simplifi": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 896, 909, 953], "simplify_express": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 896, 909, 953], "sin": [837, 1348, 1369], "sinc": [40, 65, 70, 71, 88, 145, 146, 147, 149, 155, 159, 160, 162, 163, 172, 173, 174, 175, 179, 182, 205, 261, 304, 322, 327, 346, 450, 453, 486, 507, 584, 603, 640, 682, 690, 750, 759, 767, 787, 837, 852, 869, 891, 911, 925, 926, 931, 953, 1060, 1063, 1068, 1069, 1100, 1128, 1228, 1264, 1272, 1329, 1348], "sind": 1369, "sine": [365, 366, 584, 674, 675, 837, 972, 973, 1257, 1258, 1348, 1373], "singl": [41, 47, 56, 63, 64, 75, 144, 145, 146, 147, 148, 149, 150, 157, 159, 160, 162, 173, 207, 216, 217, 218, 219, 224, 231, 237, 246, 255, 268, 279, 281, 292, 303, 304, 346, 379, 421, 425, 443, 465, 508, 511, 514, 545, 551, 584, 585, 637, 640, 642, 644, 679, 682, 697, 698, 702, 710, 721, 750, 760, 764, 765, 766, 792, 796, 798, 799, 817, 825, 833, 837, 855, 865, 866, 867, 911, 953, 959, 986, 1027, 1035, 1053, 1079, 1114, 1129, 1162, 1168, 1225, 1228, 1230, 1232, 1264, 1279, 1280, 1284, 1292, 1303, 1323, 1329, 1348, 1359], "singlecolselector": 204, "singleindexselector": [204, 963], "sinh": [837, 1348], "sink": 850, "sink_": [52, 54], "sink_csv": [52, 54, 953], "sink_ipc": 953, "sink_ndjson": 953, "sink_parquet": [52, 953], "site_id": [346, 350], "six": [668, 837], "size": [15, 47, 51, 53, 140, 145, 146, 147, 172, 173, 174, 175, 179, 181, 222, 314, 346, 576, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 757, 791, 792, 813, 814, 837, 858, 953, 1107, 1230, 1240, 1348, 1379], "sizeunit": [222, 346, 404, 1010, 1107, 1348], "skew": [658, 837, 1240, 1348], "skewtest": [676, 837, 1259, 1348], "skip": [145, 146, 150, 157, 159, 164, 251, 314, 346, 882, 953, 1201, 1348, 1364], "skip_empty_lin": 150, "skip_lin": [145, 159], "skip_nul": [585, 837, 1201, 1348], "skip_row": [145, 146, 159], "skip_rows_after_head": [145, 146, 159], "sklearn": [308, 346], "slice": [48, 49, 50, 51, 57, 62, 63, 129, 142, 222, 238, 249, 297, 346, 554, 574, 585, 596, 598, 647, 648, 650, 652, 654, 656, 659, 661, 663, 697, 721, 837, 858, 859, 869, 887, 896, 909, 953, 1107, 1130, 1171, 1191, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1279, 1303, 1320, 1348, 1371], "slice_pushdown": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 887, 896, 909, 953], "slide": [435, 837, 1046, 1348], "slightli": [48, 49, 50, 51, 100, 505, 837, 953, 1372], "slot": [435, 439, 546, 837, 1046, 1049, 1163, 1348], "slow": [116, 133, 136, 145, 146, 147, 150, 154, 155, 156, 159, 163, 164, 346, 435, 585, 647, 699, 837, 936, 953, 1046, 1234, 1281, 1348], "slower": [134, 136, 150, 235, 255, 268, 316, 332, 346, 585, 799, 837, 876, 936, 953, 1201, 1348], "small": [12, 148, 470, 953, 1379], "smaller": [47, 51, 222, 346, 953, 1107, 1348], "smallest": [206, 309, 346, 415, 416, 743, 837, 853, 916, 953, 1021, 1348, 1365, 1368], "smooth": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "snappi": [36, 47, 51, 346, 953], "snapshot": 161, "snapshot_id": 161, "snowflak": [147, 148], "snowflake_format": 192, "snowi": [706, 707], "so": [1, 41, 148, 150, 159, 181, 199, 234, 236, 252, 270, 278, 346, 372, 382, 438, 505, 522, 553, 576, 585, 646, 706, 707, 708, 715, 716, 717, 731, 837, 864, 877, 883, 902, 953, 959, 989, 1170, 1288, 1289, 1290, 1297, 1298, 1299], "softwar": [37, 144, 346], "solut": [39, 346], "solv": [95, 140], "some": [15, 31, 41, 47, 51, 55, 64, 97, 133, 145, 146, 147, 159, 203, 219, 270, 281, 304, 346, 350, 706, 707, 833, 898, 953, 1141, 1288, 1289, 1348, 1379], "some_account": [692, 1274], "some_t": 1378, "someth": [584, 837], "sometim": [781, 836], "somewher": [692, 1274], "sort": [54, 56, 57, 206, 236, 251, 262, 269, 270, 278, 287, 309, 316, 329, 340, 346, 371, 415, 416, 492, 501, 585, 626, 646, 669, 679, 742, 743, 748, 750, 760, 776, 779, 799, 837, 853, 869, 877, 882, 892, 895, 896, 902, 907, 909, 916, 933, 944, 953, 959, 978, 1021, 1109, 1148, 1250, 1333, 1334, 1337, 1348, 1364, 1377, 1379], "sort_bi": 837, "sort_column": [270, 346], "sorted": [251, 346, 882, 953], "sorted_asc": [1120, 1348], "sorted_desc": [1120, 1348], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 837, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 953, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1348, 1353, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1376], "source_ac": 137, "source_actor_id": 137, "source_alia": [40, 346], "source_cha": 137, "source_channel_id": 137, "south": 74, "space": [21, 236, 346, 475, 795, 796, 877, 953, 959, 1089], "spam": [258, 346, 692, 1274], "span": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "spanner": [346, 350], "spark": [47, 346], "sparklin": [41, 346], "speak": [676, 837, 1259, 1348], "spearman": 767, "speci": [346, 349], "special": [39, 54, 145, 146, 148, 159, 308, 323, 346, 647, 692, 706, 707, 837, 927, 953, 1201, 1234, 1274, 1288, 1289, 1348], "specif": [1, 31, 40, 41, 43, 44, 49, 100, 130, 132, 134, 136, 141, 145, 148, 149, 150, 154, 155, 156, 160, 161, 163, 207, 248, 250, 298, 303, 346, 472, 475, 720, 722, 723, 727, 748, 837, 855, 881, 953, 958, 959, 1086, 1089, 1302, 1304, 1305, 1309, 1323, 1327, 1337, 1348, 1364, 1376, 1378, 1379], "specifi": [10, 38, 39, 40, 41, 47, 48, 56, 101, 104, 107, 122, 125, 145, 150, 156, 157, 159, 164, 176, 185, 187, 188, 189, 206, 207, 222, 223, 226, 231, 235, 236, 250, 251, 268, 270, 278, 279, 281, 284, 285, 289, 292, 303, 309, 312, 320, 321, 325, 346, 416, 425, 468, 475, 491, 493, 494, 495, 500, 626, 639, 641, 648, 650, 652, 654, 656, 659, 661, 663, 670, 679, 735, 743, 760, 763, 764, 765, 766, 776, 777, 779, 780, 781, 783, 815, 819, 824, 825, 833, 837, 853, 855, 870, 872, 876, 877, 881, 882, 902, 904, 905, 908, 911, 916, 918, 923, 924, 929, 953, 959, 1035, 1082, 1089, 1107, 1108, 1110, 1111, 1117, 1229, 1252, 1327, 1348, 1364, 1371, 1378], "speed": [51, 287, 346, 585, 837, 907, 953, 957, 1379], "speedup": [56, 164, 248, 255, 346, 585, 837, 1201, 1348], "split": [1, 41, 47, 52, 54, 57, 249, 346, 690, 712, 713, 1272, 1294, 1295], "split_by_column_dtyp": 59, "split_inclus": 711, "splitfram": [1, 57], "spreadsheet": [37, 144, 150, 156, 270, 346], "spring": [706, 707], "sql": [0, 39, 119, 120, 128, 147, 148, 250, 289, 346, 390, 569, 670, 794, 817, 837, 849, 908, 953, 997, 1186, 1252, 1348, 1357, 1358, 1360, 1362, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1377, 1378], "sql_expr": 1376, "sqlalchemi": [39, 147, 167, 346], "sqlcontext": [293, 346, 816, 912, 953, 1375], "sqldw_format": 192, "sqlite": [39, 147, 346], "sqrt": [585, 676, 735, 837, 1201, 1259, 1348, 1369], "sqrt_x": 1370, "squar": [1, 60, 332, 534, 642, 680, 837, 936, 1151, 1230, 1262, 1348, 1370], "st": [33, 1379], "stabil": [237, 346, 514, 837, 1129, 1348], "stabl": [157, 201, 212, 214, 215, 237, 282, 286, 293, 346, 438, 514, 581, 599, 741, 837, 863, 864, 891, 906, 911, 912, 953, 961, 1129, 1331, 1348], "stack": [64, 240, 318, 346, 349, 1358], "stai": [584, 672, 837], "standalon": [173, 959], "standard": [7, 11, 41, 147, 294, 303, 308, 346, 456, 493, 659, 660, 676, 681, 700, 703, 818, 833, 837, 913, 953, 1066, 1105, 1110, 1213, 1259, 1263, 1282, 1285, 1348, 1365, 1379], "standardis": [41, 346], "start": [41, 48, 49, 50, 51, 54, 143, 145, 146, 148, 150, 151, 153, 155, 156, 157, 159, 162, 163, 164, 181, 230, 235, 236, 253, 291, 316, 322, 323, 346, 399, 402, 405, 418, 422, 443, 451, 461, 466, 470, 483, 484, 495, 509, 552, 570, 645, 649, 651, 653, 655, 657, 660, 662, 664, 677, 683, 688, 692, 696, 705, 710, 714, 715, 717, 718, 721, 730, 757, 762, 771, 775, 776, 777, 778, 779, 780, 783, 785, 791, 792, 795, 796, 824, 825, 827, 833, 837, 875, 876, 877, 896, 910, 926, 927, 953, 959, 1011, 1023, 1028, 1053, 1055, 1058, 1061, 1063, 1064, 1070, 1072, 1074, 1075, 1078, 1080, 1084, 1088, 1097, 1098, 1123, 1169, 1187, 1233, 1260, 1270, 1274, 1278, 1287, 1292, 1296, 1297, 1299, 1303, 1312, 1348, 1364, 1371, 1379], "start_bi": [236, 346, 877, 953], "startbi": [236, 346, 877, 953], "starts_a": 1371, "starts_with": [57, 270, 346, 350, 399, 402, 418, 592, 683, 688, 816, 912, 953, 959, 1023, 1270, 1369], "starts_with_expr": 405, "starts_with_lit": 405, "startup": [303, 346], "stat": [534, 676, 837, 1151, 1259, 1348], "state": [4, 5, 112, 771, 849, 1376], "statement": [626, 827, 837, 1362, 1377], "static": [93, 936], "statist": [47, 51, 145, 146, 157, 162, 164, 214, 346, 493, 494, 534, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 676, 837, 863, 953, 1048, 1110, 1111, 1151, 1240, 1259, 1348], "std": [214, 346, 659, 660, 837, 863, 953, 1048, 1241, 1348], "std_dev": [41, 346], "stddev": 1369, "stddev_samp": 1365, "stdev": [41, 346, 1365], "stdev_samp": 1365, "stdout": [199, 234, 346, 601], "step": [314, 346, 505, 757, 791, 792, 837], "steve": [262, 346, 892, 953], "still": [147, 148], "stock": [346, 349], "stop": [140, 143, 145, 146, 151, 153, 155, 157, 159, 162, 163, 164, 649, 651, 653, 655, 657, 660, 662, 664, 837, 1055, 1058, 1063, 1064, 1070, 1072, 1074, 1078, 1084, 1088], "storag": [38, 40, 43, 47, 48, 49, 50, 51, 145, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 189, 346, 953], "storage_loc": [190, 193, 194], "storage_opt": [38, 40, 43, 47, 48, 49, 50, 51, 145, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 189, 346, 953], "store": [40, 161, 224, 248, 280, 346, 419, 644, 837, 1024, 1114, 1232, 1348], "store_id": [626, 837], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 71, 74, 75, 98, 129, 130, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 175, 178, 179, 180, 184, 185, 187, 188, 189, 190, 191, 193, 194, 199, 206, 207, 211, 214, 215, 216, 217, 218, 219, 220, 222, 223, 227, 228, 229, 231, 232, 234, 235, 236, 238, 240, 243, 245, 246, 248, 250, 251, 252, 254, 256, 258, 260, 261, 262, 263, 266, 268, 270, 272, 274, 275, 276, 277, 278, 279, 280, 282, 286, 287, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346, 355, 356, 357, 378, 383, 395, 399, 400, 401, 402, 405, 406, 411, 414, 416, 418, 419, 422, 430, 436, 438, 440, 448, 465, 469, 470, 472, 475, 483, 492, 495, 501, 503, 507, 508, 511, 519, 522, 543, 544, 553, 554, 555, 570, 574, 576, 585, 596, 598, 599, 600, 601, 603, 610, 611, 612, 613, 614, 615, 616, 617, 623, 626, 630, 633, 639, 640, 641, 643, 645, 646, 649, 651, 653, 655, 657, 660, 662, 664, 671, 678, 679, 731, 732, 733, 734, 743, 748, 750, 751, 752, 753, 754, 755, 756, 758, 759, 765, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 833, 837, 844, 853, 855, 858, 859, 861, 863, 864, 865, 866, 867, 869, 870, 873, 876, 877, 879, 881, 882, 883, 891, 892, 895, 896, 899, 900, 901, 902, 906, 907, 909, 910, 911, 912, 916, 917, 918, 919, 920, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 953, 958, 959, 965, 985, 990, 1002, 1007, 1022, 1023, 1024, 1028, 1047, 1048, 1058, 1079, 1083, 1084, 1086, 1089, 1097, 1109, 1117, 1120, 1160, 1161, 1172, 1193, 1209, 1210, 1211, 1222, 1227, 1228, 1229, 1249, 1313, 1315, 1316, 1324, 1325, 1326, 1327, 1337, 1348, 1354, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1368, 1371, 1372, 1376, 1377, 1379], "str_date": 1371, "str_timestamp": 1371, "strategi": [38, 48, 56, 64, 145, 164, 172, 173, 174, 175, 176, 177, 179, 226, 236, 250, 251, 265, 315, 346, 500, 576, 585, 837, 850, 872, 877, 881, 882, 898, 920, 953, 1117, 1193, 1348], "stream": [10, 15, 43, 44, 48, 49, 50, 51, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 235, 250, 311, 346, 584, 837, 858, 869, 876, 881, 887, 891, 896, 909, 911, 917, 953], "streamabl": [887, 891, 919, 953], "streaming_t": 196, "strftime": [100, 475, 1089, 1369, 1371], "strict": [132, 133, 136, 141, 207, 216, 275, 346, 400, 417, 475, 683, 686, 695, 720, 722, 723, 725, 727, 837, 855, 865, 900, 953, 959, 1006, 1022, 1089, 1265, 1268, 1277, 1302, 1304, 1305, 1307, 1309, 1348], "strictli": [38, 48, 55, 97, 251, 346, 882, 953], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 48, 53, 55, 68, 71, 74, 87, 94, 96, 97, 98, 100, 106, 124, 133, 137, 141, 145, 146, 147, 148, 159, 168, 169, 170, 171, 172, 179, 183, 206, 207, 210, 215, 220, 222, 229, 231, 234, 235, 236, 251, 268, 270, 278, 281, 283, 284, 285, 286, 292, 302, 303, 309, 310, 314, 316, 320, 321, 325, 346, 355, 378, 383, 400, 401, 402, 416, 418, 420, 421, 422, 425, 438, 465, 470, 472, 475, 483, 492, 495, 503, 507, 522, 555, 599, 601, 626, 630, 640, 641, 646, 649, 651, 653, 655, 657, 660, 662, 664, 679, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 735, 743, 751, 753, 755, 760, 763, 764, 765, 766, 774, 776, 777, 779, 780, 786, 801, 803, 806, 815, 819, 821, 824, 825, 827, 833, 837, 849, 853, 855, 860, 864, 868, 869, 876, 877, 882, 902, 903, 904, 905, 906, 911, 916, 923, 924, 929, 953, 958, 959, 990, 1006, 1007, 1008, 1023, 1025, 1026, 1027, 1028, 1079, 1084, 1086, 1089, 1097, 1109, 1136, 1172, 1228, 1229, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1315, 1326, 1327, 1348, 1357, 1358, 1366, 1369, 1372, 1375, 1379], "stringcach": [96, 97, 250, 346, 849, 1025, 1029], "stringio": [154, 155, 507, 837], "strings_hex": 687, "strip": [29, 715, 716, 717, 718, 719, 1297, 1298, 1299, 1371], "strip_chars_end": [717, 719], "strip_chars_start": [716, 718], "strip_prefix": [717, 719], "strip_suffix": [716, 718], "strongli": [41, 181, 255, 279, 332, 346, 585, 837, 1201, 1348], "strpo": 1369, "strpost": 1371, "strptime": [278, 346, 469, 646, 837, 902, 953, 1083, 1369], "struct": [8, 75, 125, 137, 266, 284, 307, 312, 320, 346, 395, 436, 516, 576, 584, 585, 611, 613, 615, 633, 644, 645, 693, 699, 712, 713, 741, 748, 771, 772, 774, 798, 837, 904, 918, 923, 936, 953, 1002, 1047, 1193, 1201, 1222, 1232, 1275, 1281, 1294, 1295, 1329, 1331, 1348], "struct_col": [731, 733, 734], "struct_seri": 936, "structarrai": [222, 346, 1107, 1348], "structfieldnotfounderror": 733, "structur": [41, 43, 44, 49, 106, 109, 123, 141, 224, 269, 281, 298, 304, 346, 630, 837, 895, 953, 1114, 1323, 1348, 1376], "student": [270, 346], "style": [7, 21, 41, 52, 147, 270, 346], "sub": [332, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 555, 562, 837, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1000, 1004, 1172, 1179], "subarrai": [374, 375, 981, 982], "subclass": [1, 346], "subexpress": [62, 63, 129, 858, 859, 869, 896, 909, 953], "subinterv": 1365, "subject": [47, 270, 346], "sublist": [382, 541, 542, 544, 546, 550, 551, 552, 553, 554, 555, 556, 565, 570, 574, 576, 989, 1141, 1158, 1159, 1161, 1163, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1182, 1187, 1191, 1193, 1348], "subplan": [62, 63, 129, 858, 859, 869, 896, 909, 953], "subsequ": [41, 157, 164, 273, 305, 346, 576, 816, 827, 869, 953, 1330, 1348, 1363], "subset": [218, 219, 266, 311, 346, 866, 867, 917, 953], "substr": [399, 402, 405, 418, 422, 683, 688, 695, 706, 707, 710, 711, 712, 713, 714, 959, 1005, 1008, 1011, 1023, 1028, 1265, 1270, 1277, 1288, 1289, 1292, 1293, 1294, 1295, 1296, 1369], "subtl": [41, 346], "subtli": [505, 837], "subtract": [534, 736, 837, 1151, 1348], "succe": [145, 146, 159], "success": [685, 692, 1267, 1274], "successfulli": [858, 869, 896, 909, 953], "suffer": 54, "suffix": [250, 251, 252, 284, 320, 325, 346, 357, 402, 416, 418, 529, 530, 531, 532, 590, 610, 612, 615, 616, 617, 643, 688, 716, 719, 743, 837, 881, 882, 883, 904, 923, 925, 929, 953, 959, 1008, 1023, 1270, 1301], "suffix_field": [611, 613], "sugar": [315, 346, 640, 641, 708, 752, 754, 756, 768, 770, 773, 783, 788, 789, 790, 800, 802, 804, 805, 807, 809, 810, 815, 818, 820, 822, 826, 828, 837, 920, 953, 1228, 1229, 1262, 1290, 1348], "suggest": [346, 349, 1348, 1353], "suitabl": [56, 64, 147, 173, 255, 346, 585, 668, 837, 1201, 1248, 1348], "sum": [41, 95, 142, 222, 229, 235, 236, 246, 270, 278, 296, 325, 346, 433, 434, 438, 488, 501, 576, 585, 596, 598, 599, 600, 601, 602, 640, 641, 646, 661, 662, 750, 752, 764, 771, 773, 774, 785, 799, 811, 821, 837, 858, 859, 864, 869, 876, 877, 894, 896, 898, 902, 906, 909, 929, 953, 959, 1044, 1045, 1103, 1107, 1242, 1348, 1357, 1364, 1366, 1369, 1376], "sum_": [676, 837, 1259, 1348], "sum_a": [278, 346, 646, 837, 902, 953], "sum_horizont": [56, 346, 820], "summari": [214, 346, 863, 953, 1048, 1348, 1364], "summer": [706, 707], "sun": [346, 349, 720, 1302], "sundai": [236, 346, 443, 472, 475, 485, 762, 877, 953, 1053, 1086, 1089, 1099], "sunni": [706, 707, 1288, 1289], "supercast": [229, 346], "supertyp": [64, 142, 226, 304, 308, 346, 361, 765, 837, 872, 953, 1348], "suppli": [39, 41, 130, 132, 133, 134, 136, 147, 154, 155, 163, 227, 274, 279, 303, 346, 501, 630, 837, 873, 899, 953, 1327, 1348], "support": [1, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 131, 132, 133, 134, 135, 136, 137, 147, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 172, 176, 179, 189, 199, 248, 249, 250, 251, 280, 281, 291, 292, 300, 305, 308, 346, 475, 492, 570, 626, 640, 641, 677, 679, 684, 694, 696, 697, 706, 707, 708, 710, 721, 833, 837, 843, 858, 859, 869, 881, 882, 896, 909, 910, 911, 953, 959, 1089, 1109, 1187, 1228, 1229, 1260, 1266, 1276, 1278, 1279, 1288, 1289, 1290, 1292, 1303, 1330, 1332, 1348, 1352, 1366, 1371, 1372, 1374, 1375, 1376], "supportsinterchang": 131, "suppos": [204, 270, 346, 585, 837, 1201, 1348], "sure": [64, 130, 131, 135, 142, 145, 146, 149, 151, 153, 157, 160, 273, 346, 837], "surreal_query_to_fram": 147, "surrealdb": 147, "surrealql": 147, "suscept": 953, "swap": [900, 953], "swim": 766, "switch": [62, 63, 444, 858, 859, 869, 896, 909, 953, 1054], "sy": 199, "sydnei": 778, "symbol": [37, 38, 48, 346, 837, 953], "symmetr": [567, 959, 1184], "symmetri": [861, 868, 903, 922, 953], "sync": [48, 49, 50, 51, 953], "sync_on_clos": [48, 49, 50, 51, 953], "synchron": [147, 947], "synconclosemethod": [48, 49, 50, 51, 953], "syntact": [315, 346, 640, 641, 708, 752, 754, 756, 768, 770, 773, 783, 788, 789, 790, 800, 802, 804, 805, 807, 809, 810, 815, 818, 820, 822, 826, 828, 837, 920, 953, 1228, 1229, 1262, 1290, 1348], "syntax": [41, 120, 227, 255, 266, 274, 346, 600, 683, 691, 692, 695, 706, 707, 791, 792, 833, 873, 899, 909, 953, 1265, 1273, 1274, 1277, 1288, 1289, 1348, 1372, 1374], "system": [37, 145, 146, 346, 448, 858, 869, 896, 909, 953, 1058], "t": [37, 38, 40, 48, 64, 95, 140, 144, 145, 150, 156, 159, 236, 251, 255, 269, 311, 314, 346, 435, 444, 452, 469, 475, 488, 491, 493, 494, 548, 585, 626, 630, 691, 695, 706, 707, 717, 720, 723, 728, 827, 837, 877, 882, 895, 917, 953, 959, 1046, 1083, 1089, 1103, 1108, 1110, 1111, 1165, 1201, 1273, 1277, 1288, 1289, 1298, 1299, 1302, 1305, 1310, 1348, 1360, 1361, 1371], "t_": [312, 346, 492, 837, 918, 953, 1109, 1348], "t_0": [278, 346, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 837, 902, 953, 1109, 1348], "t_1": [278, 346, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 837, 902, 953, 1109, 1348], "t_a": [312, 346, 918, 953], "t_b": [312, 346, 918, 953], "t_c": [312, 346, 918, 953], "t_d": [312, 346, 918, 953], "t_i": [492, 837, 1109, 1348], "t_id": [252, 346, 883, 953], "t_n": [278, 346, 646, 649, 651, 653, 655, 657, 660, 662, 664, 837, 902, 953], "t_struct": [312, 346, 918, 953], "tab_spann": [346, 350], "tab_stub": [346, 350], "tab_styl": [346, 350], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 130, 137, 141, 149, 150, 156, 160, 161, 185, 188, 189, 191, 194, 195, 250, 252, 270, 293, 298, 305, 314, 315, 346, 350, 816, 849, 881, 883, 912, 920, 953, 1358, 1359, 1360, 1361, 1363, 1364, 1375, 1376], "table_id": 194, "table_nam": [39, 41, 150, 185, 189, 293, 346, 912, 953], "table_path": [40, 149, 160, 161, 346], "table_styl": [41, 346], "table_typ": 194, "tableinfo": [185, 188, 197], "tablemerg": [40, 346], "tablenotfounderror": [40, 346], "tables_scale_100": [139, 146], "tabletyp": [194, 197], "tail": [234, 238, 346, 361, 676, 837, 953, 1130, 1259, 1348], "take": [41, 95, 141, 150, 156, 175, 176, 199, 229, 230, 236, 259, 262, 269, 270, 275, 346, 371, 443, 465, 501, 508, 509, 551, 552, 584, 611, 613, 615, 679, 760, 762, 782, 784, 793, 837, 875, 877, 892, 898, 900, 953, 978, 1053, 1079, 1122, 1123, 1168, 1169, 1339, 1348, 1366], "taken": [570, 710, 1187, 1292], "talkin": [728, 1310], "tan": [837, 1348, 1369], "tand": 1369, "tangent": [367, 368, 739, 740, 837, 974, 975, 1321, 1322, 1348, 1373], "tanh": [270, 346, 837, 1348], "target": [1, 39, 40, 41, 42, 61, 150, 308, 346, 691, 706, 707, 720, 722, 723, 959, 1273, 1288, 1289, 1302, 1304, 1305, 1371], "target_alia": [40, 346], "target_t": [39, 346], "task": [63, 859, 953], "tau": [491, 492, 837, 1108, 1109, 1348], "tb": [168, 170, 222, 346, 404, 1107, 1348], "tbl": [95, 139, 146, 1378], "tbl0": 1363, "tbl1": [1361, 1363], "tbl2": [1361, 1363], "tbl3": 1361, "tbl4": 1361, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 199], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 214, 346, 863, 953], "tbl_width_char": 781, "td": 475, "td1": 959, "td2": 959, "td3": 959, "tdf": [269, 346], "technic": 833, "tell": [684, 708, 1266, 1290], "tempor": [100, 207, 236, 248, 278, 280, 281, 300, 346, 425, 475, 522, 646, 649, 651, 653, 655, 657, 660, 662, 664, 795, 837, 849, 855, 877, 902, 953, 959, 1035, 1089, 1136, 1348, 1369, 1375], "temporalliter": [425, 795, 796, 837, 1035, 1068, 1069, 1348], "temporari": [39, 346], "temporarili": [181, 199, 236, 278, 346, 646, 837, 877, 902, 953], "tenant": 34, "tenant_id": 34, "tend": [168, 170], "tensor": [308, 346, 1332, 1348], "tensordataset": [308, 346], "term": [491, 493, 494, 697, 710, 721, 837, 1108, 1110, 1111, 1279, 1292, 1303, 1348], "termin": [38, 48, 346, 953], "terminologi": 193, "test": [0, 39, 147, 148, 150, 156, 221, 270, 346, 849, 1106, 1348, 1371], "test1": 1363, "test2": 1363, "test3": 1363, "test_1": [270, 346], "test_1_math": [270, 346], "test_1_phys": [270, 346], "test_2": [270, 346], "test_2_math": [270, 346], "test_2_phys": [270, 346], "test_data": 147, "test_df_height": 175, "test_func": 798, "test_lf": [925, 953], "test_miscellan": 1379, "test_numer": 1379, "test_price_calcul": 1379, "test_series_len": 179, "test_tabl": 148, "test_unique_xyz": 173, "testdb": 148, "testing1234": 1363, "text": [144, 147, 192, 420, 421, 689, 697, 701, 702, 703, 706, 707, 709, 710, 721, 817, 898, 953, 1026, 1027, 1279, 1283, 1284, 1291, 1292, 1303, 1363, 1379], "text1": 707, "text2": 707, "textclaus": 147, "texttt": [676, 837, 1259, 1348], "th": [230, 346, 509, 552, 565, 676, 697, 721, 837, 875, 953, 1123, 1169, 1182, 1259, 1279, 1303, 1348], "than": [41, 48, 49, 50, 51, 54, 103, 126, 134, 136, 145, 146, 147, 150, 156, 159, 165, 208, 235, 248, 250, 251, 255, 268, 279, 280, 282, 314, 332, 346, 420, 505, 507, 510, 512, 522, 536, 564, 583, 584, 585, 601, 633, 645, 667, 676, 697, 701, 704, 705, 713, 721, 730, 767, 799, 837, 876, 881, 882, 936, 953, 1026, 1136, 1181, 1201, 1222, 1233, 1246, 1259, 1279, 1283, 1286, 1287, 1295, 1303, 1312, 1329, 1348, 1379], "the_aws_access_key_id": [40, 149, 160, 161, 346], "the_aws_region": [40, 346], "the_aws_secret_access_kei": [40, 149, 160, 161, 346], "thei": [38, 41, 48, 55, 63, 64, 96, 97, 133, 142, 159, 199, 251, 253, 281, 346, 626, 708, 716, 717, 837, 858, 869, 882, 896, 909, 953, 957, 959, 1290], "them": [63, 130, 132, 133, 134, 136, 147, 148, 150, 154, 155, 156, 157, 159, 162, 163, 164, 199, 223, 224, 236, 251, 262, 270, 278, 308, 316, 346, 383, 492, 522, 555, 618, 619, 626, 646, 765, 776, 777, 779, 780, 824, 825, 837, 859, 870, 877, 882, 892, 902, 953, 959, 990, 1109, 1114, 1172, 1210, 1211, 1348, 1366, 1376], "therebi": [159, 162, 163], "therefor": [54, 145, 151, 155, 157, 222, 346, 585, 827, 837, 1107, 1348], "theta": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 64, 70, 71, 72, 73, 78, 88, 95, 97, 104, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 193, 195, 199, 201, 203, 204, 205, 206, 209, 210, 212, 214, 215, 218, 219, 222, 224, 228, 229, 234, 235, 236, 237, 241, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 263, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 291, 293, 294, 295, 298, 300, 303, 304, 305, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 327, 332, 345, 346, 349, 350, 358, 361, 362, 371, 383, 389, 390, 391, 396, 415, 416, 419, 425, 435, 436, 438, 444, 445, 456, 462, 463, 465, 469, 472, 475, 486, 490, 497, 507, 514, 516, 519, 520, 522, 526, 548, 549, 555, 564, 565, 566, 567, 568, 569, 571, 576, 577, 581, 582, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 603, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 626, 633, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 669, 670, 671, 672, 677, 678, 679, 682, 684, 691, 694, 696, 698, 699, 703, 704, 705, 708, 715, 716, 717, 718, 719, 724, 728, 730, 732, 735, 742, 743, 745, 746, 747, 748, 752, 756, 764, 765, 768, 770, 771, 784, 785, 787, 789, 790, 793, 794, 795, 796, 799, 802, 804, 807, 809, 815, 818, 822, 826, 827, 828, 833, 837, 849, 852, 853, 854, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 873, 876, 877, 879, 881, 882, 883, 885, 887, 891, 892, 896, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 916, 917, 919, 920, 922, 923, 924, 925, 926, 927, 928, 931, 936, 950, 951, 952, 953, 957, 958, 959, 961, 968, 969, 978, 990, 996, 997, 998, 1003, 1021, 1024, 1029, 1030, 1035, 1036, 1046, 1047, 1054, 1055, 1057, 1066, 1076, 1077, 1079, 1083, 1086, 1089, 1100, 1102, 1105, 1107, 1113, 1114, 1123, 1125, 1129, 1131, 1141, 1150, 1165, 1166, 1172, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1194, 1199, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1213, 1216, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1260, 1261, 1263, 1264, 1266, 1273, 1276, 1278, 1280, 1281, 1285, 1286, 1287, 1290, 1297, 1298, 1299, 1306, 1310, 1312, 1313, 1315, 1318, 1319, 1323, 1325, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1336, 1337, 1338, 1348, 1353, 1357, 1358, 1359, 1363, 1371, 1374, 1375, 1376, 1377, 1379], "thing": [159, 166], "think": [462, 463, 1076, 1077], "third": [584, 837], "thoma": [262, 346, 892, 953], "those": [5, 31, 41, 145, 150, 227, 274, 281, 305, 315, 346, 505, 636, 691, 799, 837, 899, 920, 953, 959, 1224, 1273, 1330, 1348], "though": [39, 147, 236, 346, 833, 877, 953], "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 48, 63, 139, 145, 146, 148, 181, 182, 292, 346, 548, 585, 679, 760, 837, 859, 911, 953, 998, 1165, 1188, 1261, 1348], "thread_loc": [585, 837], "thread_pool_s": 182, "three": [41, 204, 278, 307, 346, 436, 633, 646, 668, 697, 706, 721, 837, 902, 953, 1002, 1047, 1193, 1222, 1279, 1289, 1303, 1348], "threshold": [284, 346, 904, 953], "through": [147, 833, 959, 1348, 1363], "throughout": 199, "throw": [40, 132, 133, 136, 216, 275, 346, 699, 700, 855, 865, 900, 953, 1281, 1282, 1348], "thu": [41, 224, 346, 349, 767, 957, 1114, 1348], "thursdai": [236, 346, 443, 762, 877, 953, 1053], "ti": [636, 837, 1224, 1348], "time": [13, 38, 40, 43, 47, 48, 49, 50, 51, 54, 61, 62, 63, 71, 73, 113, 149, 155, 157, 159, 160, 162, 163, 164, 175, 176, 179, 189, 214, 224, 236, 251, 252, 278, 316, 346, 378, 415, 416, 444, 445, 447, 448, 449, 452, 453, 462, 463, 465, 468, 469, 470, 472, 474, 475, 483, 486, 492, 543, 544, 576, 645, 646, 649, 651, 653, 655, 657, 660, 662, 664, 672, 720, 723, 727, 741, 742, 743, 765, 766, 776, 777, 778, 779, 780, 781, 787, 795, 824, 825, 837, 858, 859, 863, 877, 882, 883, 896, 902, 953, 959, 985, 1021, 1054, 1055, 1057, 1058, 1062, 1063, 1079, 1082, 1083, 1084, 1086, 1088, 1089, 1097, 1100, 1109, 1114, 1160, 1161, 1233, 1255, 1302, 1305, 1309, 1331, 1333, 1348, 1357, 1363, 1372, 1379], "time_column": [316, 346], "time_format": [38, 48, 346, 953], "time_unit": [71, 73, 445, 447, 453, 474, 486, 723, 778, 779, 780, 781, 787, 958, 959, 1055, 1057, 1063, 1088, 1100, 1305], "time_unit_m": [445, 1055], "time_unit_n": [445, 1055], "time_unit_u": 486, "time_zon": [71, 448, 450, 469, 723, 778, 779, 780, 958, 959, 1054, 1058, 1062, 1083, 1305], "timedelta": [236, 251, 278, 316, 346, 465, 470, 475, 483, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 776, 777, 779, 780, 824, 825, 837, 877, 882, 902, 953, 958, 959, 1067, 1073, 1079, 1084, 1097, 1109, 1210, 1211, 1263, 1338, 1348], "timeout": [63, 859, 953], "timestamp": [137, 149, 160, 236, 346, 469, 470, 483, 787, 877, 953, 1083, 1084, 1097, 1369], "timestamp_m": 474, "timestamp_n": 1088, "timestamp_u": [474, 1088], "timestep": 787, "timeunit": [38, 48, 71, 73, 346, 445, 447, 474, 486, 723, 778, 779, 780, 781, 953, 959, 1055, 1057, 1088, 1100, 1305], "timezon": [71, 149, 160, 450, 959, 1372], "tip": [585, 837], "titl": [41, 346, 349, 1348, 1353, 1357], "titlecas": [728, 1310], "tm": [447, 475, 959, 1372], "to_arrow": [249, 346, 1329, 1348, 1376], "to_batch": [249, 346], "to_dict": [207, 281, 346, 855, 953, 959], "to_dummi": [303, 308, 346, 1348], "to_fram": [419, 453, 470, 474, 483, 720, 958, 1047, 1222, 1247, 1249, 1294, 1295, 1302, 1348, 1353], "to_init_repr": [137, 346, 1348], "to_jax": [308, 346, 1348], "to_list": [137, 278, 346, 1265, 1277, 1348], "to_lowercas": 617, "to_numpi": [303, 308, 346, 584, 837, 1348], "to_panda": [346, 1348], "to_phys": [837, 1029, 1348], "to_python": 958, "to_seri": [57, 231, 346, 720, 761, 812, 1302, 1371], "to_sql": [39, 346], "to_str": [472, 1086], "to_struct": [346, 692], "to_torch": [303, 346, 1348], "to_uppercas": [357, 616, 693, 837], "togeth": 1371, "token": [38, 43, 47, 48, 49, 50, 51, 155, 157, 159, 161, 162, 163, 164, 184, 189, 346, 953], "tokyo": [137, 959], "tokyo_tz": 959, "toler": [168, 169, 170, 171, 251, 346, 882, 953], "tone": [41, 346], "tonight": [684, 708, 1266, 1290], "too": [15, 270, 346, 403, 626, 837, 953, 1009], "tooltip": [346, 349, 1348, 1353], "toomanyrowsreturnederror": [279, 346], "top": [41, 293, 309, 346, 349, 743, 837, 912, 916, 953, 1348, 1353, 1376], "top_col": [41, 346], "top_k": [206, 346, 415, 416, 743, 837, 853, 953, 1021, 1348], "top_k_bi": [415, 416, 742, 837], "top_row": [41, 346], "tor_id": 137, "torch": [167, 308, 346, 1332, 1348], "torchexporttyp": [308, 346], "total": [41, 222, 327, 346, 476, 477, 478, 479, 480, 481, 482, 537, 557, 837, 931, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1107, 1154, 1174, 1348], "total_gross": 1357, "toward": [327, 537, 557, 837, 931, 1154, 1174, 1348], "tp": [1, 59], "tpu": [303, 346, 1327, 1348], "tr15": [703, 1285], "trace": 74, "traceback": [168, 169, 170, 171, 304, 346, 641, 837, 1229, 1329, 1348], "tracebacktyp": 1376, "track": [149, 160, 161, 255, 346, 576, 1376], "trail": [29, 234, 346, 715, 716, 1297, 1298], "train": [308, 346], "train_lf": [925, 953], "transfer": 148, "transferencod": [400, 401, 686, 687, 1006, 1007, 1268, 1269], "transform": [255, 293, 346, 584, 728, 816, 837, 912, 953, 1310], "transform_dens": [1348, 1353], "transit": [227, 274, 346, 873, 899, 953], "translat": 147, "transpar": [858, 869, 896, 909, 953], "transpos": [270, 346], "travel": [149, 160], "travers": [648, 650, 652, 654, 656, 659, 661, 663, 837, 1235, 1236, 1238, 1241, 1242, 1243, 1348], "treat": [145, 146, 159, 201, 492, 526, 683, 685, 695, 706, 707, 827, 837, 961, 1109, 1141, 1265, 1267, 1277, 1288, 1289, 1348], "tree": [601, 869, 953], "tree_format": [869, 953], "trend": [41, 346], "tri": [255, 346], "triangl": [332, 936], "trigger": [40, 142, 253, 305, 346, 837, 1330, 1348], "trigonometri": [1369, 1375], "trim": [137, 1371], "trim_decimal_zero": 29, "trip": 147, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 54, 62, 63, 64, 95, 129, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 145, 146, 147, 149, 150, 151, 153, 156, 157, 159, 160, 162, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 184, 199, 203, 207, 208, 209, 214, 216, 221, 226, 227, 229, 231, 233, 234, 235, 236, 241, 243, 244, 245, 248, 250, 251, 252, 253, 258, 259, 265, 266, 268, 270, 271, 274, 275, 279, 280, 281, 282, 284, 292, 293, 296, 299, 301, 303, 304, 305, 308, 310, 311, 312, 314, 315, 316, 320, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 346, 349, 356, 357, 358, 359, 360, 361, 372, 374, 375, 378, 382, 383, 391, 395, 399, 400, 402, 405, 406, 411, 414, 416, 417, 418, 422, 430, 431, 432, 433, 434, 436, 443, 445, 448, 451, 453, 455, 462, 463, 465, 466, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 493, 494, 501, 508, 510, 511, 512, 513, 516, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 539, 540, 544, 551, 553, 555, 571, 576, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 620, 621, 623, 625, 628, 629, 633, 638, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 671, 672, 676, 678, 679, 682, 683, 684, 685, 686, 688, 694, 695, 696, 698, 699, 700, 706, 707, 711, 712, 714, 720, 722, 723, 725, 727, 731, 733, 734, 743, 745, 748, 751, 752, 753, 754, 755, 757, 760, 761, 762, 767, 776, 779, 785, 791, 795, 796, 799, 803, 809, 812, 815, 816, 819, 821, 824, 827, 828, 837, 855, 856, 857, 858, 859, 863, 865, 869, 872, 873, 876, 877, 881, 882, 883, 885, 887, 891, 896, 899, 900, 904, 909, 911, 912, 917, 918, 919, 920, 923, 928, 930, 932, 934, 937, 938, 939, 940, 941, 942, 943, 952, 953, 958, 959, 966, 967, 979, 981, 982, 985, 989, 990, 998, 1005, 1006, 1008, 1011, 1022, 1023, 1025, 1028, 1030, 1033, 1034, 1047, 1053, 1054, 1055, 1058, 1061, 1062, 1063, 1064, 1065, 1069, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1103, 1105, 1106, 1108, 1110, 1111, 1118, 1127, 1131, 1133, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1156, 1157, 1161, 1168, 1170, 1172, 1188, 1201, 1207, 1213, 1215, 1218, 1219, 1222, 1225, 1226, 1240, 1259, 1261, 1264, 1265, 1266, 1267, 1268, 1270, 1276, 1277, 1278, 1280, 1281, 1282, 1288, 1289, 1293, 1294, 1296, 1302, 1304, 1305, 1307, 1309, 1324, 1329, 1330, 1337, 1339, 1348, 1353, 1357, 1358, 1360, 1362, 1366, 1368, 1371, 1376, 1379], "truediv": [505, 837], "truncat": [21, 137, 145, 146, 159, 234, 236, 248, 280, 281, 300, 346, 877, 896, 953, 1375], "truncate_nod": [896, 953], "truncate_ragged_lin": [145, 146, 159], "truncate_str": 483, "truncate_td": 483, "trust": [438, 837, 864, 953], "try": [38, 43, 47, 48, 49, 50, 51, 62, 63, 123, 129, 145, 146, 151, 155, 157, 159, 162, 163, 164, 189, 346, 858, 859, 869, 896, 909, 953], "try_cast": 1369, "try_parse_d": [139, 145, 146, 159], "try_parse_hive_d": [157, 162, 164], "ts_local": [469, 1083], "tseri": [462, 463, 1076, 1077], "tstamp": 959, "tstamp_tokyo": 959, "tstamp_utc": 959, "tue": [346, 349], "tuesdai": [236, 346, 877, 953], "tupl": [41, 65, 148, 150, 156, 204, 248, 255, 268, 279, 280, 281, 288, 308, 324, 346, 600, 642, 837, 896, 909, 953, 958, 959, 1230, 1251, 1348], "turn": [8, 48, 49, 50, 51, 62, 63, 129, 145, 146, 159, 250, 251, 346, 858, 859, 869, 881, 882, 887, 896, 953], "twice": [41, 346], "two": [41, 55, 96, 97, 132, 134, 136, 148, 204, 227, 229, 251, 252, 261, 262, 274, 280, 307, 313, 326, 332, 346, 350, 356, 440, 447, 505, 508, 511, 576, 633, 678, 758, 759, 765, 767, 769, 776, 779, 813, 814, 816, 837, 873, 882, 883, 891, 892, 899, 919, 930, 936, 953, 959, 1002, 1050, 1057, 1193, 1222, 1348, 1363, 1364, 1365, 1368, 1377], "two_a": 1376, "tworld": [717, 1297, 1299], "txt": [1, 13, 159, 683, 695, 1277, 1371], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 48, 49, 50, 51, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 129, 130, 132, 133, 134, 135, 136, 138, 145, 146, 147, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 201, 204, 210, 220, 223, 229, 234, 236, 237, 249, 250, 255, 278, 283, 286, 298, 303, 304, 307, 308, 311, 323, 346, 358, 360, 363, 364, 365, 366, 367, 368, 371, 376, 377, 378, 380, 383, 394, 395, 399, 400, 401, 402, 403, 404, 405, 417, 419, 420, 421, 425, 426, 427, 428, 429, 436, 437, 443, 444, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 495, 497, 508, 511, 514, 522, 523, 524, 525, 526, 527, 528, 537, 541, 542, 544, 549, 555, 557, 575, 576, 584, 585, 599, 633, 635, 639, 640, 641, 642, 644, 645, 646, 649, 651, 653, 655, 657, 660, 662, 664, 673, 674, 675, 682, 685, 686, 687, 690, 691, 692, 693, 696, 697, 698, 700, 701, 702, 710, 711, 712, 713, 720, 721, 725, 739, 740, 741, 748, 757, 765, 768, 775, 776, 777, 778, 779, 780, 781, 783, 791, 792, 794, 795, 796, 797, 798, 799, 809, 812, 823, 824, 825, 828, 833, 837, 849, 858, 859, 868, 869, 870, 877, 881, 896, 902, 903, 909, 917, 927, 953, 958, 961, 966, 967, 979, 981, 982, 983, 984, 985, 987, 989, 990, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1022, 1024, 1026, 1027, 1035, 1047, 1048, 1053, 1054, 1056, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1109, 1113, 1129, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1156, 1157, 1158, 1159, 1161, 1166, 1172, 1174, 1192, 1193, 1215, 1222, 1228, 1229, 1230, 1232, 1233, 1254, 1256, 1264, 1265, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1278, 1279, 1280, 1282, 1283, 1284, 1292, 1293, 1294, 1295, 1302, 1303, 1307, 1328, 1329, 1331, 1339, 1348, 1357, 1364, 1369, 1371, 1375, 1376], "type_coercion": [48, 49, 50, 51, 62, 63, 129, 858, 859, 869, 896, 909, 953], "type_json": 191, "type_nam": 191, "type_text": 191, "typeerror": [40, 346], "typenam": [41, 346], "typic": [133, 147, 164, 255, 346, 452, 673, 837, 959, 1062, 1201, 1256, 1348], "tz": [723, 1305], "tzinfo": [71, 149, 160, 959], "u": [41, 71, 73, 164, 177, 251, 346, 445, 447, 453, 474, 486, 720, 723, 753, 755, 778, 779, 780, 781, 787, 882, 953, 958, 959, 1055, 1057, 1063, 1088, 1100, 1302, 1305, 1361, 1372], "u1": [304, 346], "u16": [159, 1374, 1379], "u32": [13, 147, 205, 207, 213, 267, 322, 323, 327, 331, 337, 339, 346, 356, 362, 369, 370, 371, 372, 373, 376, 377, 379, 388, 404, 420, 421, 429, 430, 516, 518, 537, 541, 542, 545, 557, 562, 608, 624, 636, 644, 645, 649, 651, 653, 655, 657, 660, 662, 664, 668, 685, 695, 696, 701, 702, 703, 741, 746, 748, 752, 756, 760, 761, 768, 770, 791, 794, 807, 837, 852, 855, 862, 894, 926, 927, 931, 935, 941, 943, 953, 959, 978, 979, 980, 983, 984, 986, 995, 1022, 1026, 1027, 1029, 1041, 1131, 1158, 1159, 1162, 1174, 1179, 1224, 1232, 1233, 1248, 1267, 1277, 1278, 1283, 1284, 1331, 1335, 1337, 1348, 1357, 1365, 1366, 1367, 1371, 1376], "u64": [237, 323, 346, 514, 638, 837, 896, 927, 953, 959, 1129, 1226, 1348], "u8": [207, 301, 302, 314, 346, 641, 751, 837, 855, 953, 959, 1229, 1324, 1348, 1379], "udf": [181, 255, 269, 332, 346, 438, 585, 630, 799, 837, 864, 895, 936, 953, 1201, 1348], "ufunc": 103, "uid": 147, "uint": 1379, "uint16": [159, 433, 434, 737, 837, 959, 1044, 1045, 1319, 1329, 1332, 1348], "uint2": 1374, "uint32": [138, 167, 207, 222, 278, 323, 346, 371, 376, 377, 404, 420, 421, 429, 492, 508, 511, 537, 541, 542, 557, 639, 644, 645, 646, 649, 651, 653, 655, 657, 660, 662, 664, 685, 696, 701, 702, 741, 768, 791, 794, 837, 855, 902, 927, 953, 959, 979, 983, 984, 1010, 1022, 1026, 1027, 1107, 1109, 1158, 1159, 1174, 1232, 1233, 1267, 1278, 1283, 1284, 1331, 1332, 1348], "uint4": 1376, "uint64": [138, 237, 278, 323, 346, 376, 377, 492, 514, 541, 542, 638, 646, 649, 651, 653, 655, 657, 660, 662, 664, 837, 902, 927, 953, 959, 983, 984, 1109, 1129, 1158, 1159, 1226, 1332, 1348], "uint8": [147, 207, 302, 303, 304, 314, 346, 433, 434, 641, 737, 751, 837, 855, 953, 958, 959, 1044, 1045, 1229, 1319, 1332, 1348, 1379], "uint8_pair": 1379, "uit": [710, 1292], "uk": [692, 1274], "unabl": [105, 150], "unalias": 591, "unari": [622, 837], "unbias": [493, 494, 837, 1110, 1111, 1348], "unchang": [222, 346, 640, 741, 837, 887, 936, 953, 1107, 1228, 1331, 1348], "uncompress": [36, 43, 44, 47, 49, 51, 151, 162, 346, 953], "undefin": [744, 837], "under": [38, 43, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 96, 97, 155, 157, 159, 162, 163, 164, 187, 188, 189, 270, 293, 346, 829, 830, 832, 833, 838, 839, 842, 844, 845, 846, 912, 953, 1340, 1342, 1344, 1349, 1354, 1355, 1356], "underestim": [222, 346, 1107, 1348], "underli": [1, 55, 70, 71, 73, 88, 97, 102, 112, 130, 132, 133, 134, 136, 147, 148, 150, 154, 155, 156, 157, 163, 172, 175, 179, 223, 224, 248, 249, 280, 298, 304, 346, 400, 445, 446, 447, 451, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 469, 471, 475, 484, 485, 486, 487, 638, 665, 683, 686, 695, 837, 870, 953, 959, 1006, 1029, 1055, 1056, 1057, 1061, 1064, 1065, 1066, 1070, 1071, 1072, 1074, 1075, 1078, 1080, 1081, 1083, 1085, 1089, 1098, 1099, 1100, 1101, 1114, 1226, 1244, 1254, 1265, 1268, 1277, 1323, 1329, 1348, 1376], "understood": 799, "undo": [602, 609, 610, 612, 614, 616, 617], "unexpect": [112, 121, 147, 227, 274, 346, 584, 585, 837, 873, 899, 953, 1201, 1348], "unhelpfulli": [168, 170], "unicod": [21, 421, 697, 702, 703, 710, 721, 959, 1027, 1279, 1284, 1285, 1292, 1303, 1371], "unicodeform": [703, 1285], "unifi": [41, 303, 308, 346, 959], "uniform": [41, 346, 633, 837, 1222, 1348], "unimod": [676, 837, 1259, 1348], "union": [62, 63, 64, 129, 568, 858, 859, 869, 896, 909, 953, 959, 1185, 1375, 1376], "uniqu": [47, 51, 56, 74, 142, 150, 172, 173, 174, 177, 179, 205, 245, 250, 266, 270, 281, 337, 346, 362, 373, 388, 436, 533, 562, 608, 633, 720, 722, 723, 727, 746, 748, 756, 807, 837, 852, 881, 941, 953, 969, 980, 995, 1047, 1149, 1179, 1208, 1222, 1302, 1304, 1305, 1309, 1335, 1337, 1348, 1364, 1366], "unique_column_valu": [270, 346], "unique_count": [837, 1348], "uniquekeepstrategi": [311, 346, 917, 953], "unit": [41, 71, 73, 142, 168, 169, 170, 171, 175, 179, 222, 346, 404, 445, 447, 453, 468, 474, 486, 492, 498, 582, 597, 720, 723, 747, 764, 778, 779, 780, 781, 787, 837, 896, 953, 959, 1010, 1055, 1057, 1063, 1082, 1088, 1100, 1107, 1109, 1115, 1199, 1302, 1305, 1336, 1348, 1379], "uniti": [184, 185, 187, 188, 189, 197, 849], "unity_catalog": 192, "univers": [201, 961], "unix": [70, 71, 453, 787, 1063], "unknown": [576, 691, 797, 1273], "unless": [41, 56, 132, 303, 308, 346, 715, 716, 812, 953, 1297, 1371], "unlik": [141, 236, 315, 346, 877, 920, 953], "unnam": [693, 1275], "unnest": [141, 346, 436, 633, 644, 692, 693, 712, 713, 733, 735, 748, 837, 953, 1002, 1047, 1193, 1222, 1232, 1294, 1295, 1348, 1369, 1375], "unpivot": [261, 346, 891, 953], "unregist": [1359, 1360, 1361, 1376, 1378], "unsaf": [142, 837], "unset": [39, 157, 162, 174, 331, 346, 408, 409, 410, 412, 413, 469, 576, 837, 935, 1014, 1015, 1016, 1018, 1019, 1083, 1348, 1357], "unsign": [89, 90, 91, 92, 638, 837, 959, 1226, 1348], "unsigned_integ": 959, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 127, 140, 141, 147, 149, 155, 157, 159, 160, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 293, 303, 308, 315, 346, 349, 350, 435, 436, 516, 585, 633, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 764, 837, 858, 859, 869, 896, 909, 912, 920, 953, 1030, 1046, 1047, 1131, 1222, 1234, 1237, 1239, 1240, 1327, 1332, 1348, 1353], "unstack": 346, "unstackdirect": [314, 346], "unsuit": 128, "unsupport": [40, 346], "until": [48, 49, 50, 51, 95, 96, 236, 253, 346, 704, 705, 730, 877, 953, 1286, 1287, 1312], "up": [11, 41, 87, 148, 248, 251, 270, 280, 281, 287, 300, 346, 424, 425, 585, 697, 706, 707, 721, 837, 881, 882, 887, 907, 953, 959, 1032, 1279, 1288, 1289, 1303, 1348], "upcast": [361, 837], "upcast_integer_typ": [1, 59], "updat": [40, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 199, 214, 346, 863, 953], "updated_at": [190, 193, 194], "updated_bi": [190, 193, 194], "upgrad": 108, "upheld": [887, 953], "upon": 146, "upper": [145, 146, 147, 222, 236, 346, 425, 516, 522, 576, 611, 747, 757, 776, 777, 779, 780, 795, 796, 824, 825, 837, 877, 953, 1035, 1107, 1131, 1136, 1199, 1336, 1348, 1366, 1369], "upper_bound": [236, 346, 425, 522, 576, 837, 877, 953, 1035, 1136, 1199, 1348], "uppercas": [617, 729, 1311, 1371], "upsampl": [236, 346, 877, 953], "urandom": [404, 1010], "uri": [39, 40, 147, 148, 149, 160, 161, 346], "url": [147, 148, 157, 162, 164, 184, 691, 693, 1273, 1275], "urllib": 148, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 65, 71, 87, 96, 97, 100, 104, 127, 131, 133, 134, 136, 138, 141, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 184, 205, 206, 207, 210, 214, 216, 218, 219, 225, 226, 227, 229, 235, 236, 243, 245, 247, 248, 249, 251, 255, 261, 265, 266, 268, 269, 270, 274, 278, 279, 280, 281, 282, 284, 285, 287, 292, 293, 294, 298, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 321, 322, 323, 325, 332, 346, 349, 356, 358, 360, 362, 371, 372, 395, 400, 401, 403, 416, 418, 420, 421, 422, 425, 435, 438, 441, 442, 450, 468, 469, 470, 472, 475, 483, 486, 488, 491, 492, 493, 494, 495, 499, 500, 501, 505, 516, 520, 521, 522, 534, 548, 564, 572, 576, 578, 584, 585, 588, 609, 612, 614, 616, 617, 626, 633, 636, 638, 640, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 667, 669, 671, 672, 676, 678, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 699, 700, 701, 702, 703, 706, 707, 708, 710, 712, 714, 716, 717, 718, 719, 720, 722, 723, 727, 730, 731, 735, 743, 749, 750, 752, 753, 754, 755, 756, 759, 760, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 787, 791, 792, 794, 795, 797, 799, 800, 801, 803, 805, 806, 809, 812, 813, 814, 815, 816, 818, 819, 820, 821, 824, 825, 826, 827, 828, 833, 836, 837, 848, 849, 852, 853, 854, 855, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 876, 877, 882, 885, 891, 896, 899, 902, 903, 904, 905, 907, 909, 911, 912, 913, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 936, 953, 957, 958, 959, 966, 967, 969, 998, 1002, 1006, 1007, 1009, 1026, 1027, 1030, 1046, 1048, 1051, 1052, 1060, 1068, 1069, 1082, 1083, 1084, 1086, 1089, 1097, 1100, 1103, 1108, 1109, 1110, 1111, 1116, 1117, 1122, 1128, 1131, 1134, 1135, 1136, 1151, 1165, 1181, 1188, 1193, 1201, 1222, 1224, 1226, 1228, 1230, 1232, 1233, 1234, 1246, 1247, 1249, 1250, 1253, 1259, 1261, 1263, 1264, 1265, 1266, 1268, 1269, 1272, 1273, 1274, 1276, 1277, 1278, 1283, 1284, 1285, 1288, 1289, 1290, 1292, 1294, 1302, 1304, 1305, 1309, 1312, 1323, 1324, 1326, 1329, 1330, 1338, 1348, 1357, 1358, 1359, 1360, 1361, 1363, 1364, 1371, 1372, 1376, 1378, 1379], "usag": [175, 179, 290, 346, 959, 1254, 1348], "usd": [234, 346, 1379], "use_abs_path": 142, "use_pyarrow": [47, 51, 145, 149, 151, 153, 157, 160, 304, 346, 953, 1329, 1348], "use_pyarrow_extension_arrai": [305, 346, 1330, 1348], "use_pyarrow_write_to_dataset": [47, 346], "use_statist": [157, 164], "user": [39, 140, 142, 147, 148, 201, 255, 269, 332, 346, 584, 585, 630, 669, 799, 837, 895, 936, 953, 957, 961, 1201, 1250, 1348], "user_conn": 147, "usernam": [145, 148, 151, 153], "userwarn": 1, "usr": 147, "usual": [104, 148, 199, 308, 346, 444, 1054], "utc": [149, 160, 444, 448, 450, 452, 469, 720, 723, 958, 959, 1054, 1058, 1062, 1083, 1302, 1305], "utc_tz": 959, "utf": [38, 48, 86, 346, 953], "utf8": [21, 145, 146, 159, 697, 710, 721, 1279, 1292, 1303], "utf8_borders_onli": 21, "utf8_ful": [21, 56, 137], "utf8_full_condens": [7, 21, 137], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [308, 346, 787, 953], "uvloop": 147, "uvw": [692, 1274], "v": [8, 9, 10, 47, 222, 346, 668, 753, 755, 837, 1248, 1348, 1360, 1361], "v1": 33, "v2": [8, 10, 151, 162], "val": [41, 277, 346, 585, 630, 741, 827, 837, 901, 953], "valid": [38, 41, 48, 71, 95, 140, 145, 147, 151, 153, 157, 159, 179, 199, 216, 222, 250, 251, 275, 346, 435, 683, 685, 691, 692, 693, 695, 700, 706, 707, 827, 837, 865, 881, 882, 900, 928, 953, 959, 1046, 1107, 1265, 1267, 1273, 1274, 1275, 1277, 1282, 1288, 1289, 1348, 1357, 1358], "validate_output_schema": [887, 953], "validate_schema": [95, 140], "vals_phys": [741, 837], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 48, 51, 52, 54, 55, 56, 64, 65, 68, 74, 75, 83, 84, 93, 97, 106, 132, 133, 135, 136, 145, 146, 147, 148, 157, 159, 162, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 199, 203, 205, 206, 207, 214, 218, 219, 221, 224, 225, 226, 227, 231, 234, 236, 237, 238, 242, 246, 248, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 268, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 289, 292, 294, 295, 296, 297, 299, 300, 304, 305, 309, 310, 313, 314, 315, 316, 317, 324, 327, 328, 330, 333, 334, 336, 337, 346, 349, 350, 354, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 401, 402, 403, 404, 405, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 434, 435, 436, 439, 441, 442, 447, 451, 461, 466, 475, 484, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 540, 541, 542, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 569, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 593, 604, 605, 606, 607, 608, 618, 619, 620, 621, 624, 626, 627, 630, 631, 633, 634, 636, 639, 640, 641, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 673, 674, 675, 676, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 691, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 721, 730, 732, 736, 737, 739, 740, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 760, 763, 765, 766, 768, 770, 771, 772, 773, 774, 784, 785, 790, 791, 792, 793, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 820, 821, 827, 837, 852, 853, 863, 866, 867, 871, 872, 873, 877, 879, 880, 881, 882, 888, 889, 890, 891, 893, 894, 897, 898, 899, 900, 902, 908, 911, 913, 914, 916, 919, 920, 921, 931, 932, 934, 937, 938, 940, 941, 953, 959, 964, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1022, 1023, 1026, 1027, 1028, 1032, 1035, 1037, 1038, 1039, 1041, 1046, 1047, 1048, 1049, 1051, 1052, 1057, 1061, 1075, 1080, 1089, 1098, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1115, 1116, 1117, 1121, 1122, 1123, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1164, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1201, 1202, 1203, 1205, 1206, 1208, 1210, 1211, 1213, 1214, 1216, 1217, 1221, 1222, 1223, 1224, 1228, 1229, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1249, 1252, 1256, 1257, 1258, 1259, 1261, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1303, 1312, 1315, 1319, 1320, 1321, 1322, 1329, 1330, 1331, 1335, 1337, 1339, 1348, 1357, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1374, 1376, 1378, 1379], "value1": [679, 837], "value2": [679, 837], "value_a": 1376, "value_b": 1376, "value_count": [746, 837, 1348], "value_cum_sum": [434, 837], "value_cum_sum_all_fil": [434, 837], "value_nam": [261, 313, 346, 891, 919, 953], "value_var": [261, 313, 346, 891, 919, 953], "valueerror": [10, 16, 21], "valueexcept": 797, "var": [41, 180, 346, 663, 664, 837, 953, 1348, 1365], "var_samp": 1365, "vari": [150, 156, 444, 1054, 1379], "variabl": [31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 83, 155, 157, 159, 162, 163, 164, 178, 181, 189, 261, 301, 313, 346, 858, 859, 869, 891, 896, 909, 919, 953, 1324, 1348, 1358, 1360, 1376], "variable_nam": [261, 313, 346, 891, 919, 953], "variad": 147, "varianc": [317, 346, 494, 534, 663, 664, 749, 826, 837, 921, 953, 1111, 1151, 1243, 1338, 1348, 1369], "variou": [147, 204, 210, 346, 837, 860, 953, 958, 959, 1348], "vector": [648, 650, 652, 654, 656, 659, 661, 663, 837, 1235, 1236, 1238, 1241, 1242, 1243, 1348], "vector_index_format": 192, "vectoris": [462, 463, 1076, 1077], "vein": 199, "verbos": [30, 168, 170, 199, 692, 1274], "veri": [147, 248, 310, 346, 585, 837, 936, 1370], "verifi": [251, 346, 882, 953], "versicolor": [346, 349], "version": [39, 40, 54, 61, 65, 131, 145, 146, 149, 150, 160, 167, 172, 173, 174, 175, 179, 182, 189, 203, 205, 215, 237, 250, 261, 286, 293, 303, 304, 308, 322, 327, 346, 349, 438, 450, 462, 463, 475, 486, 507, 514, 592, 593, 599, 603, 640, 682, 690, 735, 750, 759, 767, 811, 816, 837, 852, 864, 869, 881, 891, 898, 906, 912, 925, 926, 931, 953, 959, 1060, 1068, 1069, 1076, 1077, 1089, 1100, 1128, 1129, 1228, 1264, 1272, 1327, 1329, 1332, 1348, 1353], "versu": [214, 346, 863, 953], "vertic": [64, 224, 314, 318, 346, 682, 698, 1264, 1280], "vertical_relax": 64, "via": [31, 145, 146, 147, 151, 155, 157, 159, 162, 163, 164, 202, 204, 215, 248, 280, 346, 438, 585, 693, 837, 864, 898, 953, 962, 1275], "view": [196, 585, 837], "virtual": 142, "visibl": [18, 222, 346, 1107, 1348], "visit": [435, 837, 1046, 1348], "visual": [243, 245, 346, 600, 909, 953], "volk": 141, "vote": [691, 693, 1273, 1275], "vowel": [706, 707, 1288, 1289], "vstack": [64, 224, 346], "w": [41, 147, 236, 281, 346, 685, 689, 691, 693, 753, 755, 877, 953, 959, 1267, 1271, 1273, 1275, 1298, 1360, 1361, 1364], "w_i": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "wa": [39, 61, 104, 150, 215, 303, 304, 346, 349, 438, 641, 708, 781, 837, 864, 953, 959, 1229, 1290, 1329, 1348, 1353], "wai": [96, 97, 130, 132, 133, 134, 136, 154, 155, 163, 235, 249, 269, 292, 325, 346, 470, 630, 679, 691, 768, 833, 837, 861, 868, 876, 895, 903, 911, 922, 929, 936, 953, 957, 1084, 1273], "wait": [48, 49, 50, 51, 953], "walk": 766, "want": [63, 133, 135, 145, 150, 151, 155, 157, 159, 199, 224, 255, 266, 278, 293, 346, 420, 443, 501, 584, 585, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 672, 684, 701, 706, 707, 708, 762, 771, 776, 779, 785, 809, 812, 828, 837, 859, 912, 928, 953, 959, 1026, 1053, 1114, 1201, 1266, 1283, 1288, 1289, 1290, 1348, 1363], "warehous": 148, "warn": [99, 100, 103, 104, 107, 114, 116, 117, 127, 626, 795, 796, 837, 1348], "watermark": [47, 346], "wb": [41, 346], "we": [47, 143, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 204, 214, 215, 236, 251, 270, 278, 316, 346, 349, 438, 465, 470, 483, 516, 548, 576, 584, 585, 646, 649, 651, 653, 655, 657, 660, 662, 664, 693, 706, 707, 725, 775, 776, 777, 778, 779, 780, 797, 824, 825, 827, 837, 863, 864, 873, 877, 882, 887, 899, 902, 953, 1079, 1084, 1097, 1131, 1165, 1201, 1275, 1289, 1307, 1348, 1353, 1360], "weather": [706, 707, 1288, 1289], "wed": [346, 349], "wednesdai": [236, 346, 472, 475, 877, 953, 1086, 1089], "week": [236, 251, 278, 316, 346, 443, 465, 470, 483, 485, 492, 646, 649, 651, 653, 655, 657, 660, 662, 664, 762, 776, 777, 779, 780, 781, 824, 825, 837, 877, 882, 902, 953, 959, 1053, 1079, 1084, 1097, 1099, 1109, 1348, 1372], "week_mask": [443, 762, 1053], "weekdai": [451, 466], "weekend": [443, 762, 1053], "weekli": [236, 346, 483, 877, 953, 1097], "weghorst": [693, 1275], "weight": [141, 491, 492, 493, 494, 647, 648, 650, 652, 654, 656, 659, 661, 663, 676, 837, 1108, 1109, 1110, 1111, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1259, 1348], "wei\u00df": 1371, "well": [41, 145, 146, 147, 159, 346, 522, 816, 837, 1136, 1348, 1376], "were": [199, 640, 641, 833, 837, 1228, 1229, 1348], "west": [74, 252, 346, 883, 953], "what": [52, 204, 266, 346, 443, 584, 684, 708, 837, 1053, 1266, 1290], "whatev": 199, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 55, 71, 87, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 145, 146, 147, 148, 150, 151, 153, 155, 156, 157, 159, 160, 162, 163, 164, 165, 168, 169, 170, 171, 175, 179, 199, 206, 214, 220, 222, 224, 226, 227, 229, 236, 250, 252, 255, 262, 269, 275, 279, 281, 284, 285, 289, 292, 298, 301, 303, 304, 308, 309, 311, 315, 321, 346, 390, 403, 420, 421, 425, 443, 491, 493, 494, 500, 569, 576, 597, 630, 640, 641, 670, 678, 679, 684, 690, 694, 696, 697, 701, 702, 708, 710, 715, 716, 717, 720, 721, 760, 762, 771, 785, 795, 837, 853, 863, 872, 877, 881, 883, 887, 892, 900, 904, 905, 908, 911, 916, 917, 920, 924, 950, 953, 997, 1009, 1026, 1027, 1035, 1048, 1053, 1107, 1108, 1110, 1111, 1114, 1117, 1141, 1186, 1228, 1229, 1247, 1249, 1252, 1266, 1272, 1276, 1278, 1279, 1283, 1284, 1290, 1292, 1297, 1298, 1299, 1302, 1303, 1323, 1324, 1329, 1348, 1363, 1376], "when_matched_update_al": [40, 346], "when_not_matched_insert_al": [40, 346], "where": [41, 54, 56, 104, 147, 148, 150, 218, 219, 224, 227, 236, 248, 252, 261, 270, 274, 280, 293, 294, 303, 308, 313, 315, 317, 346, 372, 475, 485, 488, 490, 492, 501, 572, 578, 584, 621, 639, 668, 676, 679, 681, 708, 728, 749, 761, 767, 769, 813, 814, 816, 818, 826, 827, 837, 866, 867, 873, 877, 883, 891, 899, 912, 913, 919, 920, 921, 953, 979, 1089, 1099, 1103, 1105, 1109, 1114, 1118, 1213, 1248, 1259, 1263, 1290, 1310, 1338, 1339, 1348, 1357, 1365, 1375, 1376, 1378], "wherea": [145, 159, 278, 346, 418, 422, 470, 483, 618, 619, 646, 837, 902, 953, 1084, 1097, 1210, 1211, 1348], "wherev": [41, 255, 332, 346, 585, 837, 1201, 1348], "whether": [38, 48, 52, 54, 95, 134, 136, 140, 141, 150, 156, 157, 162, 164, 179, 183, 221, 247, 251, 287, 292, 346, 358, 360, 374, 375, 455, 471, 513, 539, 540, 626, 669, 679, 694, 696, 760, 837, 882, 887, 898, 907, 911, 953, 959, 966, 967, 981, 982, 1025, 1030, 1065, 1085, 1106, 1127, 1128, 1156, 1157, 1276, 1278, 1348, 1360, 1376], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 133, 135, 145, 146, 147, 148, 149, 150, 155, 156, 157, 159, 160, 161, 162, 163, 164, 175, 178, 180, 199, 206, 207, 214, 215, 218, 219, 222, 224, 225, 235, 236, 241, 250, 251, 270, 278, 286, 303, 304, 309, 311, 315, 316, 346, 358, 395, 403, 438, 443, 465, 470, 472, 483, 492, 498, 522, 524, 527, 529, 530, 531, 532, 576, 584, 585, 597, 599, 646, 649, 651, 653, 655, 657, 660, 662, 664, 707, 725, 762, 776, 777, 779, 780, 781, 795, 796, 824, 825, 827, 837, 853, 855, 858, 861, 863, 864, 866, 867, 868, 869, 877, 881, 882, 896, 898, 902, 906, 909, 916, 917, 920, 922, 953, 959, 1002, 1009, 1053, 1079, 1084, 1086, 1097, 1107, 1109, 1114, 1115, 1136, 1139, 1142, 1144, 1145, 1146, 1147, 1193, 1249, 1307, 1327, 1329, 1348, 1358, 1364, 1376, 1379], "while": [40, 63, 146, 149, 150, 160, 164, 175, 179, 189, 199, 248, 261, 310, 313, 315, 346, 421, 640, 702, 837, 859, 891, 919, 920, 953, 1027, 1228, 1284, 1348], "white": [41, 346], "whitespac": [137, 715, 716, 717, 1297, 1298, 1299, 1371], "whole": [584, 678, 679, 691, 837, 936, 953, 1273], "whose": [56, 98, 251, 270, 346, 495, 783, 837, 882, 953, 959], "why": [858, 869, 896, 909, 953], "wide": [147, 234, 261, 270, 313, 314, 346, 891, 919, 953], "width": [27, 41, 65, 145, 146, 159, 346, 349, 575, 764, 953, 1192, 1348, 1353], "wiki": 21, "wikipedia": 21, "wildcard": [142, 495, 731, 771, 772, 785, 811, 833, 837], "win_loss": [41, 346], "window": [145, 146, 159, 236, 278, 346, 435, 491, 493, 494, 585, 626, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 765, 813, 814, 837, 877, 902, 953, 1046, 1108, 1110, 1111, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1348], "window_s": [647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 813, 814, 837, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1348], "windowmappingstrategi": [626, 837], "winter": [694, 696, 706, 707, 1276, 1278], "wise": [41, 56, 147, 229, 346, 363, 364, 365, 366, 367, 368, 426, 427, 428, 496, 580, 673, 674, 675, 739, 740, 785, 811, 837, 970, 971, 972, 973, 974, 975, 1037, 1038, 1039, 1112, 1197, 1198, 1256, 1257, 1258, 1321, 1322, 1348], "wish": [206, 309, 346, 415, 416, 742, 743, 837, 853, 916, 953, 1021, 1333, 1348], "with_column": [1, 13, 59, 62, 63, 129, 140, 236, 269, 278, 308, 314, 321, 346, 355, 357, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 388, 389, 390, 391, 395, 400, 401, 403, 404, 417, 418, 420, 421, 422, 425, 430, 431, 432, 433, 434, 436, 439, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 484, 485, 487, 489, 490, 492, 499, 500, 505, 510, 512, 514, 520, 521, 522, 525, 526, 528, 529, 530, 531, 532, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 583, 584, 585, 605, 607, 609, 610, 612, 614, 616, 617, 620, 621, 622, 626, 627, 630, 631, 633, 636, 640, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 670, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 724, 725, 726, 728, 729, 730, 732, 735, 736, 741, 744, 751, 753, 755, 758, 762, 763, 764, 765, 766, 771, 772, 774, 775, 777, 778, 782, 792, 795, 796, 798, 801, 803, 806, 817, 821, 823, 825, 827, 833, 837, 858, 859, 869, 877, 879, 895, 896, 902, 909, 924, 953, 959, 1047, 1083, 1222, 1278, 1348, 1376], "with_column_nam": 159, "with_columns_seq": [346, 953], "with_context": 953, "with_field": [585, 837], "with_replac": [282, 346, 564, 667, 837, 1181, 1246, 1348], "with_row_count": [346, 953], "with_row_index": [1, 278, 322, 346, 649, 651, 653, 655, 657, 660, 662, 664, 837, 926, 953, 1247, 1348, 1353], "within": [47, 65, 75, 83, 168, 169, 170, 171, 190, 191, 193, 235, 236, 237, 251, 278, 316, 346, 514, 636, 679, 837, 877, 882, 902, 953, 1129, 1348, 1376], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 72, 78, 104, 107, 137, 140, 141, 149, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 195, 250, 252, 293, 303, 304, 308, 314, 315, 346, 349, 350, 435, 436, 516, 585, 633, 647, 649, 651, 653, 655, 657, 658, 660, 662, 664, 684, 694, 696, 708, 764, 768, 795, 796, 815, 837, 858, 859, 881, 883, 912, 920, 953, 957, 1025, 1030, 1046, 1047, 1131, 1222, 1234, 1237, 1239, 1240, 1266, 1276, 1278, 1290, 1327, 1329, 1332, 1348, 1353, 1378], "without_fil": [149, 160, 161], "wod": [717, 1299], "womp": [312, 346, 918, 953], "word": [148, 706, 707, 716, 717, 728, 1310], "work": [41, 72, 78, 145, 146, 151, 155, 157, 165, 285, 321, 346, 358, 360, 396, 420, 421, 424, 425, 495, 504, 548, 577, 584, 585, 609, 610, 612, 614, 616, 617, 626, 697, 701, 702, 710, 721, 745, 795, 837, 898, 905, 924, 953, 957, 959, 966, 967, 1003, 1026, 1027, 1032, 1035, 1121, 1165, 1194, 1279, 1283, 1284, 1292, 1303, 1334, 1348], "workaround": 346, "workbook": [41, 150, 156, 346], "workday_raas_format": 192, "worker": [898, 953], "working_with_conditional_format": [41, 346], "working_with_sparklin": [41, 346], "worksheet": [41, 150, 156, 346], "workspac": 184, "workspace_url": 184, "world": [1, 21, 684, 708, 715, 716, 717, 959, 1172, 1266, 1290, 1297, 1298, 1299, 1359, 1362], "wors": [911, 953], "worth": [548, 1165], "worthwhil": [168, 170], "would": [103, 145, 146, 159, 204, 304, 308, 346, 349, 371, 382, 443, 553, 584, 585, 596, 626, 636, 760, 762, 837, 978, 989, 1053, 1170, 1224, 1329, 1348, 1353, 1374], "wrap": [85, 137, 417, 522, 584, 837, 1022, 1348], "wrap_numer": [417, 837, 1022, 1348], "wrapper": [63, 859, 953], "writabl": [36, 38, 43, 44, 45, 46, 47, 286, 304, 346, 1329, 1348], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 144, 146, 151, 199, 210, 346, 425, 600, 603, 837, 885, 909, 953, 959, 1035, 1348], "write_avro": 346, "write_clipboard": [144, 346], "write_csv": [37, 146, 159, 346], "write_databas": 346, "write_delta": 346, "write_excel": 346, "write_iceberg": 346, "write_ipc": [151, 346], "write_ipc_stream": 346, "write_json": 346, "write_markdown_frame_to_stdout": 199, "write_ndjson": [45, 346], "write_parquet": 346, "write_t": [47, 346], "write_to_dataset": [47, 346], "writeabl": [304, 346, 1329, 1348], "writer": [40, 346], "writer_properti": [40, 346], "writerproperti": [40, 346], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 286, 346, 599, 906, 953], "ww": [1371, 1378], "www": [703, 733, 1285], "x": [28, 56, 64, 87, 106, 131, 137, 145, 146, 148, 150, 156, 159, 172, 173, 175, 203, 222, 240, 243, 245, 250, 270, 280, 281, 310, 313, 314, 346, 349, 355, 357, 359, 378, 383, 404, 430, 437, 489, 490, 505, 510, 512, 514, 536, 543, 555, 581, 583, 584, 585, 605, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 625, 631, 639, 640, 641, 645, 673, 676, 712, 735, 736, 741, 744, 751, 753, 755, 758, 759, 765, 771, 772, 774, 785, 797, 798, 801, 803, 806, 811, 816, 821, 827, 837, 881, 887, 910, 912, 919, 953, 958, 959, 990, 1029, 1041, 1117, 1201, 1228, 1229, 1256, 1259, 1294, 1327, 1331, 1332, 1348, 1353, 1360, 1361, 1364, 1370, 1376, 1378], "x00": [399, 400, 401, 402, 403, 405, 686, 1005, 1006, 1007, 1008, 1009, 1011, 1268], "x01": [403, 1009], "x05": [403, 1009], "x07": 404, "x1": 404, "x10": [403, 1009], "x80": 404, "x83": 404, "x88": 404, "x8e": 404, "x99": 404, "x_": [492, 837, 1109, 1348], "x_0": [314, 346, 491, 492, 493, 494, 837, 1108, 1109, 1110, 1111, 1348], "x_1": [314, 346, 492, 837, 1109, 1348], "x_2": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "x_i": [492, 837, 1109, 1348], "x_invers": [631, 837], "x_pow_8": 1370, "x_round": 1370, "x_round_1": 1370, "x_squar": [631, 837], "x_t": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "x_uniqu": [608, 837], "x_y": [383, 555], "xb": 404, "xb9neq": 404, "xbd": 404, "xc14": 404, "xd3": 404, "xdist": 1379, "xee": 404, "xf4v": 404, "xf9": 404, "xfb": 404, "xff": [399, 400, 401, 402, 405, 686, 1005, 1006, 1007, 1008, 1011, 1268], "xi": [692, 1274], "xl": 150, "xlog2": [607, 631, 837], "xlsb": 150, "xlsx": [41, 150, 346], "xlsx2csv": [150, 167], "xlsxwriter": [41, 167, 346], "xor": [414, 837, 1020, 1348, 1367], "xor_xi": [751, 837], "xx": [11, 57, 59, 179, 214, 293, 346, 863, 953, 959, 1364, 1371, 1378], "xxx": [218, 346, 733, 866, 953], "xy": [57, 59], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 355, 685, 692, 837, 1267, 1274, 1325, 1348], "y": [28, 56, 64, 87, 106, 131, 137, 172, 173, 175, 203, 222, 243, 245, 250, 270, 280, 281, 310, 313, 314, 346, 349, 355, 357, 359, 378, 383, 404, 472, 475, 489, 490, 510, 512, 536, 543, 555, 583, 585, 608, 610, 612, 614, 616, 617, 620, 621, 625, 639, 640, 641, 645, 720, 722, 723, 735, 744, 751, 753, 755, 758, 759, 774, 781, 797, 801, 803, 806, 816, 821, 837, 881, 910, 912, 919, 953, 958, 959, 990, 1029, 1086, 1089, 1228, 1229, 1302, 1304, 1305, 1348, 1353, 1364, 1371, 1372, 1378], "y_": [491, 492, 493, 494, 837, 1108, 1109, 1110, 1111, 1348], "y_0": [314, 346, 491, 492, 493, 494, 837, 1108, 1109, 1110, 1111, 1348], "y_1": [314, 346], "y_i": [492, 837, 1109, 1348], "y_mul": 735, "y_t": [491, 493, 494, 837, 1108, 1110, 1111, 1348], "y_uniqu": [608, 837], "ya": [710, 1292], "ya29": 161, "year": [52, 54, 236, 251, 278, 293, 316, 346, 443, 455, 456, 465, 466, 468, 470, 483, 484, 646, 649, 651, 653, 655, 657, 660, 662, 664, 762, 775, 776, 777, 778, 779, 780, 824, 825, 837, 877, 882, 902, 953, 959, 1053, 1065, 1066, 1079, 1080, 1082, 1084, 1097, 1098, 1372], "yellow": [346, 350, 399, 400, 401, 402, 405], "yield": [134, 136, 145, 146, 147, 159, 222, 224, 247, 310, 346, 505, 584, 626, 837, 953, 1107, 1114, 1348], "you": [1, 11, 15, 41, 47, 51, 56, 63, 64, 130, 132, 133, 134, 135, 136, 142, 145, 146, 147, 148, 150, 151, 154, 155, 157, 159, 163, 165, 199, 206, 224, 227, 236, 247, 248, 251, 255, 266, 270, 274, 278, 279, 280, 281, 293, 300, 303, 309, 310, 311, 313, 332, 346, 349, 415, 416, 420, 443, 462, 463, 465, 469, 472, 475, 495, 501, 522, 548, 576, 584, 585, 600, 626, 631, 638, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 672, 684, 701, 706, 707, 708, 728, 731, 742, 743, 762, 771, 776, 779, 781, 785, 795, 799, 809, 812, 816, 828, 837, 853, 859, 873, 877, 882, 898, 899, 902, 909, 912, 916, 917, 919, 928, 936, 953, 957, 959, 1021, 1026, 1053, 1076, 1077, 1083, 1086, 1089, 1114, 1136, 1165, 1201, 1220, 1226, 1266, 1283, 1288, 1289, 1290, 1310, 1327, 1333, 1348, 1353, 1358, 1363, 1379], "your": [39, 41, 55, 56, 97, 140, 145, 146, 147, 148, 150, 165, 199, 248, 250, 255, 280, 281, 284, 300, 320, 325, 332, 346, 349, 448, 492, 507, 585, 693, 720, 722, 723, 730, 799, 837, 881, 887, 904, 923, 929, 936, 953, 957, 1058, 1109, 1201, 1275, 1302, 1304, 1305, 1312, 1348, 1353, 1379], "yy": [11, 57, 59, 179, 214, 293, 346, 863, 953, 959, 1364, 1371, 1378], "yyi": [218, 346, 733, 866, 953], "yyyi": [41, 346], "yz": [57, 59], "z": [41, 64, 87, 137, 173, 222, 243, 245, 250, 280, 281, 310, 313, 314, 346, 355, 357, 359, 514, 543, 585, 610, 612, 614, 616, 617, 625, 639, 640, 641, 684, 692, 694, 696, 708, 720, 723, 753, 755, 774, 801, 803, 806, 812, 816, 821, 837, 881, 910, 912, 919, 953, 958, 959, 1117, 1228, 1229, 1266, 1274, 1276, 1278, 1290, 1302, 1305, 1348, 1360, 1364, 1376, 1378], "z_0": [314, 346], "z_1": [314, 346], "zap": 959, "zero": [29, 41, 52, 53, 54, 130, 131, 143, 145, 146, 151, 153, 157, 174, 177, 203, 226, 236, 248, 279, 293, 298, 304, 305, 346, 500, 576, 581, 668, 676, 730, 744, 837, 856, 872, 877, 953, 1034, 1117, 1193, 1259, 1312, 1323, 1329, 1330, 1348, 1370, 1376], "zero_copy_onli": [1329, 1348], "zfill": [705, 751, 837, 1287], "zip": 1379, "zip_with": [229, 346, 1348], "zone": [71, 175, 176, 179, 444, 448, 469, 492, 723, 778, 779, 780, 837, 959, 1054, 1058, 1083, 1109, 1305, 1348], "zoneinfo": [71, 959], "zoom": [41, 346], "zstd": [40, 43, 44, 47, 49, 51, 346, 953], "zz": [179, 214, 293, 346, 863, 953, 1364, 1371, 1378], "zzz": 733, "\u03bc": [137, 207, 236, 248, 278, 280, 281, 300, 316, 346, 444, 445, 447, 448, 449, 450, 452, 454, 457, 459, 460, 462, 463, 464, 465, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 646, 649, 651, 653, 655, 657, 660, 662, 664, 720, 723, 778, 779, 780, 781, 787, 837, 855, 877, 902, 953, 959, 1054, 1055, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1069, 1070, 1074, 1076, 1077, 1078, 1079, 1083, 1084, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1302, 1305, 1371], "\u0441\u0438\u043d\u0438\u0439": 1371, "\u0967\u096f\u096f\u096f": 959, "\u0968\u0966\u096d\u096d": 959, "\u4eac\u90fd": 959, "\u5927\u962a": 959, "\u6771\u4eac": [420, 421, 701, 702, 959, 1026, 1027, 1283, 1284], "\u90fd\u5e02": 959, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [703, 1285], "\uff54\uff45\uff53\uff54": 1371, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1371, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1371, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1371, "\ud835\udf0b": 1370}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1364, 1377], "IF": 1368, "__array__": [201, 961], "__arrow_c_stream__": [202, 962], "__dataframe__": 203, "__getitem__": [204, 963], "__iter__": 324, "ab": [354, 964, 1370], "aco": 1373, "acosd": 1373, "add": 355, "add_business_dai": [443, 1053], "agg": [325, 929], "agg_group": 356, "aggreg": [200, 353, 851, 960, 1365], "alia": [357, 965], "alias": [1365, 1370, 1371], "align_fram": 56, "all": [326, 358, 374, 539, 752, 930, 966, 981, 1156, 1377], "all_horizont": 753, "and_": 359, "ani": [360, 375, 540, 754, 967, 982, 1157], "any_horizont": 755, "api": [1, 57, 58, 59, 60, 849, 1376], "append": [361, 968], "approx_n_uniqu": [205, 362, 756, 852, 969], "arang": 757, "arcco": [363, 970], "arccosh": [364, 971], "arcsin": [365, 972], "arcsinh": [366, 973], "arctan": [367, 974], "arctan2": 758, "arctan2d": 759, "arctanh": [368, 975], "arg_max": [369, 376, 541, 976, 983, 1158], "arg_min": [370, 377, 542, 977, 984, 1159], "arg_sort": [371, 978], "arg_sort_bi": 760, "arg_tru": [372, 979], "arg_uniqu": [373, 980], "arg_wher": 761, "arr": [374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004], "arrai": [65, 829, 1340, 1366], "array_agg": 1366, "array_contain": 1366, "array_get": 1366, "array_length": 1366, "array_low": 1366, "array_mean": 1366, "array_revers": 1366, "array_sum": 1366, "array_to_str": 1366, "array_uniqu": 1366, "array_upp": 1366, "asin": 1373, "asind": 1373, "assert": 1379, "assert_frame_equ": 168, "assert_frame_not_equ": 169, "assert_series_equ": 170, "assert_series_not_equ": 171, "atan": 1373, "atan2": 1373, "atan2d": 1373, "atand": 1373, "attribut": [341, 948, 1341], "avail": 1, "avg": 1365, "avro": 850, "backward_fil": 398, "base_utc_offset": [444, 1054], "batched_read": 139, "batchedcsvread": 139, "bin": [399, 400, 401, 402, 403, 404, 405, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "binari": [66, 830, 843, 1342], "bit_and": 1367, "bit_count": 1367, "bit_length": 1371, "bit_or": 1367, "bit_xor": 1367, "bitwis": 1367, "bitwise_and": [406, 1012], "bitwise_count_on": [407, 1013], "bitwise_count_zero": [408, 1014], "bitwise_leading_on": [409, 1015], "bitwise_leading_zero": [410, 1016], "bitwise_or": [411, 1017], "bitwise_trailing_on": [412, 1018], "bitwise_trailing_zero": [413, 1019], "bitwise_xor": [414, 1020], "boolean": [67, 831, 1343], "bottom_k": [206, 415, 853, 1021], "bottom_k_bi": 416, "build_info": 61, "business_day_count": 762, "cach": 854, "cancel": 945, "cast": [207, 417, 855, 1022, 1374], "cast_time_unit": [445, 1055], "cat": [418, 419, 420, 421, 422, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "catalog": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "cataloginfo": 190, "categor": 68, "categori": [832, 1344], "categoricalremappingwarn": 99, "cbrt": [423, 1031, 1370], "ceil": [424, 1032, 1370], "centuri": [446, 1056], "chronoformatwarn": 100, "chunk_length": 1033, "claus": 1364, "clear": [208, 856, 1034], "clip": [425, 1035], "clipboard": 850, "clone": [209, 857, 1036], "cloud": 850, "co": [426, 1037, 1373], "coalesc": [763, 1368], "col": 833, "collect": 858, "collect_al": 62, "collect_all_async": 63, "collect_async": 859, "collect_schema": [210, 860], "column": [172, 173, 211, 834, 861], "columninfo": 191, "columnnotfounderror": 101, "combin": [447, 1057], "comparison": [843, 1352], "comput": [342, 835, 1345], "computeerror": 102, "concat": [64, 543, 682, 1160, 1264, 1371], "concat_arr": 764, "concat_list": 765, "concat_str": 766, "concat_w": 1371, "condit": 1368, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 199], "conjunct": 843, "contain": [378, 399, 544, 683, 985, 1005, 1161, 1265], "contains_ani": [684, 1266], "context": 199, "convers": 848, "convert_time_zon": [448, 1058], "corr": [212, 767], "cosd": 1373, "cosh": [427, 1038], "cot": [428, 1039, 1373], "cotd": 1373, "count": [213, 327, 429, 768, 862, 931, 1040, 1365], "count_match": [379, 545, 685, 986, 1162, 1267], "cov": 769, "creat": 1378, "create_list_strategi": 174, "credenti": 850, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [139, 850], "cum_count": [430, 770, 1041], "cum_fold": 771, "cum_max": [431, 1042], "cum_min": [432, 1043], "cum_prod": [433, 1044], "cum_reduc": 772, "cum_sum": [434, 773, 1045], "cum_sum_horizont": 774, "cumulative_ev": [435, 1046], "customufuncwarn": 103, "cut": [436, 1047], "dai": [451, 1061], "data": 351, "databas": 850, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 175, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 346], "dataorientationwarn": 104, "dataset": 850, "datasourceformat": 192, "datatyp": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 351], "date": [70, 449, 775, 1059, 1371], "date_part": 1372, "date_rang": [776, 777], "datetim": [71, 450, 778, 1060], "datetime_rang": [779, 780], "decim": 72, "decod": [400, 686, 1006, 1268], "decor": 199, "defer": 95, "degre": [437, 1373], "delet": 1378, "delta": 850, "describ": [214, 863, 1048], "descript": [343, 949, 1346], "deseri": [215, 438, 864], "diff": [439, 546, 1049, 1163], "disable_string_cach": 96, "distinct": 1364, "div": 1370, "document": 1376, "dot": [440, 1050], "drop": [216, 865, 1378], "drop_in_plac": 217, "drop_nan": [218, 441, 866, 1051], "drop_nul": [219, 442, 547, 867, 1052, 1164], "dst_offset": [452, 1062], "dt": [443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101], "dtype": [176, 220, 868, 1102], "duplicateerror": 105, "durat": [73, 781], "element": 782, "enable_string_cach": 97, "encod": [401, 687, 1007, 1269], "ends_with": [402, 418, 688, 1008, 1023, 1270, 1371], "engine_config": 928, "entropi": [488, 1103], "enum": 74, "epoch": [453, 1063], "eq": [489, 589, 1104], "eq_miss": [490, 1105], "equal": [221, 1106], "error": 352, "escape_regex": [98, 689, 1271], "estimated_s": [222, 1107], "eval": [548, 1165], "ewm_mean": [491, 1108], "ewm_mean_bi": [492, 1109], "ewm_std": [493, 1110], "ewm_var": [494, 1111], "exampl": [1, 959, 1379], "excel": 850, "except": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 352, 1377], "exclud": [495, 783], "execut": 1357, "execute_glob": 1358, "exp": [496, 1112, 1370], "explain": [869, 1378], "explain_al": 129, "explod": [223, 380, 497, 549, 690, 870, 987, 1113, 1166, 1272], "export": [344, 1347], "expr": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751], "express": [837, 957, 1376], "extend": [1, 224, 1114], "extend_const": [498, 1115], "extract": [691, 1273, 1372], "extract_al": [692, 1274], "extract_group": [693, 1275], "extract_mani": [694, 1276], "feather": 850, "fetch": 946, "fetch_block": 947, "field": [75, 731, 1313, 1314], "fill_nan": [225, 499, 871, 1116], "fill_nul": [226, 500, 872, 1117], "filter": [227, 501, 873, 1118], "find": [695, 1277], "find_mani": [696, 1278], "first": [328, 381, 502, 550, 784, 874, 932, 988, 1119, 1167, 1365], "flag": [228, 1120], "flatten": 503, "float32": 76, "float64": 77, "floor": [504, 1121, 1370], "floordiv": 505, "fold": [229, 785], "format": 786, "forward_fil": 506, "frame": 1376, "from": 1364, "from_arrow": 130, "from_datafram": 131, "from_dict": [132, 133], "from_epoch": 787, "from_json": 507, "from_numpi": 134, "from_panda": 135, "from_record": 136, "from_repr": 137, "function": [1, 836, 848, 959, 1369], "gather": [508, 551, 1122, 1168], "gather_everi": [230, 509, 552, 875, 1123, 1169], "ge": [510, 1124], "get": [382, 511, 553, 989, 1170], "get_categori": [419, 1024], "get_chunk": 1125, "get_column": [231, 233], "get_column_index": 232, "get_index_typ": 138, "get_polars_schema": 195, "get_table_info": 185, "glimps": 234, "global": 1376, "gpuengin": [928, 950], "greatest": 1368, "group": [788, 1364], "group_bi": [235, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 876, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944], "group_by_dynam": [236, 877], "groupbi": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 951], "gt": [512, 1126], "has_multiple_output": 590, "has_nul": [513, 1127], "has_valid": 1128, "hash": [514, 1129], "hash_row": 237, "have": 1364, "head": [238, 329, 515, 554, 697, 789, 878, 933, 1130, 1171, 1279], "height": 239, "helper": 1379, "hist": [516, 1131], "hour": [454, 1064], "hstack": 240, "iceberg": 850, "ifnul": 1368, "implod": [517, 790, 1132], "import": 959, "in_process": [945, 946, 947], "index": 0, "index_of": [518, 1133], "initcap": 1371, "inprocessqueri": [945, 946, 947, 952], "input": 850, "insert_column": 241, "inspect": [519, 879], "instanc": 199, "int128": 78, "int16": 79, "int32": 80, "int64": 81, "int8": 82, "int_rang": [791, 792], "interfac": 1375, "interpol": [242, 520, 880, 1134], "interpolate_bi": [521, 1135], "intersect": 1377, "introduct": 1376, "invalidoperationerror": 106, "io": [139, 140, 957], "ipc": 850, "is_between": [522, 1136], "is_column": 591, "is_column_select": 592, "is_dupl": [243, 523, 1137], "is_empti": [244, 1138], "is_finit": [524, 1139], "is_first_distinct": [525, 1140], "is_in": [526, 1141], "is_infinit": [527, 1142], "is_last_distinct": [528, 1143], "is_leap_year": [455, 1065], "is_liter": 593, "is_loc": 1025, "is_nan": [529, 1144], "is_not_nan": [530, 1145], "is_not_nul": [531, 1146], "is_nul": [532, 1147], "is_regex_project": 594, "is_sort": 1148, "is_uniqu": [245, 533, 1149], "iso_year": [456, 1066], "item": [246, 1150], "iter_column": 247, "iter_row": 248, "iter_slic": 249, "join": [250, 383, 555, 698, 881, 990, 1172, 1280, 1364], "join_asof": [251, 882], "join_wher": [252, 883], "json": 850, "json_decod": [699, 1281], "json_encod": [732, 1315], "json_norm": 141, "json_path_match": [700, 1282], "keep": 609, "kurtosi": [534, 1151], "lake": 850, "last": [330, 384, 535, 556, 793, 884, 934, 991, 1152, 1173, 1365], "lazi": [253, 885], "lazyfram": [48, 49, 50, 51, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 953], "lazygroupbi": [929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944], "le": [536, 1153], "least": 1368, "left": 1371, "len": [331, 537, 557, 794, 935, 1154, 1174], "len_byt": [420, 701, 1026, 1283], "len_char": [421, 702, 1027, 1284], "length": 1371, "limit": [254, 538, 886, 1155, 1364], "linear_spac": [795, 796], "list": [83, 177, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 838, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1349], "list_catalog": 186, "list_namespac": 187, "list_tabl": 188, "lit": 797, "ln": 1370, "load": [2, 199], "load_from_fil": 3, "load_profil": 178, "log": [579, 1196, 1370], "log10": [580, 1197, 1370], "log1p": [581, 1198, 1370], "log2": 1370, "lower": 1371, "lower_bound": [582, 1199], "lt": [583, 1200], "ltrim": 1371, "manag": 199, "manipul": [348, 841, 955, 1351], "map": 610, "map_batch": [584, 798, 887], "map_el": [585, 1201], "map_field": 611, "map_group": [332, 799, 936], "map_row": 255, "mapwithoutreturndtypewarn": 107, "math": 1370, "max": [256, 333, 385, 558, 586, 800, 888, 937, 992, 1067, 1175, 1202, 1365], "max_horizont": [257, 801], "mean": [258, 334, 559, 587, 802, 889, 938, 1068, 1176, 1203], "mean_horizont": [259, 803], "median": [260, 335, 386, 560, 588, 804, 890, 939, 993, 1069, 1177, 1204, 1365], "melt": [261, 891], "merge_sort": [262, 892], "meta": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 839], "metadata": 956, "method": 1376, "microsecond": [457, 1070], "millennium": [458, 1071], "millisecond": [459, 1072], "min": [263, 336, 387, 561, 604, 805, 893, 940, 994, 1073, 1178, 1205, 1365], "min_horizont": [264, 806], "minut": [460, 1074], "miscellan": [347, 840, 848, 954, 1350], "mod": [605, 1370], "mode": [606, 1206], "moduleupgraderequirederror": 108, "month": [461, 1075], "month_end": [462, 1076], "month_start": [463, 1077], "mul": 607, "multipl": [199, 848], "n_chunk": [265, 1207], "n_uniqu": [266, 337, 388, 562, 608, 807, 941, 995, 1179, 1208], "name": [609, 610, 611, 612, 613, 614, 615, 616, 617, 834, 842, 1209, 1377], "namespaceinfo": 193, "nan_max": [618, 1210], "nan_min": [619, 1211], "nanosecond": [464, 1078], "ne": [595, 620, 1212], "ne_miss": [621, 1213], "neg": 622, "nest": 351, "new": 1, "new_from_index": 1214, "next_batch": 139, "nodataerror": 109, "normal": [703, 1285, 1371], "norowsreturnederror": 110, "not_": [623, 1215], "nth": 808, "null": 84, "null_count": [267, 624, 894, 1216], "nullif": 1368, "numer": [351, 843, 1352], "object": 85, "octet_length": 1371, "od": 850, "offset": 1364, "offset_bi": [465, 1079], "ones": 809, "oper": [843, 959, 1352, 1377, 1378], "option": 199, "or_": 625, "order": 1364, "ordinal_dai": [466, 1080], "other": 351, "outofboundserror": 111, "output": 850, "output_nam": 596, "over": 626, "pad_end": [704, 1286], "pad_start": [705, 1287], "panic": 352, "panicexcept": 112, "parametercollisionerror": 113, "parametr": [172, 173, 174, 175, 176, 177, 178, 179, 180, 1379], "parquet": 850, "partit": 850, "partition_bi": 268, "partitionbykei": 52, "partitionmaxs": 53, "partitionpart": 54, "pct_chang": [627, 1217], "peak_max": [628, 1218], "peak_min": [629, 1219], "performancewarn": 114, "pi": 1370, "pipe": [269, 630, 895], "pivot": 270, "plot": [349, 1353], "plugin": [140, 142, 957], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1379], "polarserror": 115, "polarsinefficientmapwarn": 116, "polarswarn": 117, "pop": 597, "pow": [631, 1220, 1370], "prefix": 612, "prefix_field": 613, "product": [271, 632, 1221], "profil": [896, 1379], "provid": 1, "pyarrow": 850, "python": [849, 1376], "qcut": [633, 1222], "quantil": [272, 338, 634, 810, 897, 942, 1223], "quantile_cont": 1365, "quantile_disc": 1365, "quarter": [467, 1081], "queri": [848, 1376], "radian": [635, 1373], "random": 848, "rank": [636, 1224], "read_avro": 143, "read_clipboard": 144, "read_csv": 145, "read_csv_batch": 146, "read_databas": 147, "read_database_uri": 148, "read_delta": 149, "read_excel": 150, "read_ipc": 151, "read_ipc_schema": 152, "read_ipc_stream": 153, "read_json": 154, "read_ndjson": 155, "read_od": 156, "read_parquet": 157, "read_parquet_schema": 158, "rechunk": [273, 637, 1225], "reduc": 811, "refer": 849, "regexp_lik": 1371, "regist": 1359, "register_dataframe_namespac": 57, "register_expr_namespac": 58, "register_glob": 1360, "register_io_sourc": 140, "register_lazyframe_namespac": 59, "register_mani": 1361, "register_plugin_funct": 142, "register_series_namespac": 60, "registr": 1, "reinterpret": [403, 638, 1009, 1226], "remot": 898, "remov": [274, 899], "renam": [275, 900, 1227], "rename_field": [733, 1316], "repeat": 812, "repeat_bi": 639, "replac": [468, 640, 706, 1082, 1228, 1288, 1371], "replace_al": [707, 1289], "replace_column": 276, "replace_mani": [708, 1290], "replace_strict": [641, 1229], "replace_time_zon": [469, 1083], "reshap": [642, 1230], "restore_default": 4, "revers": [277, 389, 563, 643, 709, 901, 996, 1180, 1231, 1291, 1371], "right": 1371, "rle": [644, 1232], "rle_id": [645, 1233], "roll": [278, 646, 902], "rolling_corr": 813, "rolling_cov": 814, "rolling_map": [647, 1234], "rolling_max": [648, 1235], "rolling_max_bi": 649, "rolling_mean": [650, 1236], "rolling_mean_bi": 651, "rolling_median": [652, 1237], "rolling_median_bi": 653, "rolling_min": [654, 1238], "rolling_min_bi": 655, "rolling_quantil": [656, 1239], "rolling_quantile_bi": 657, "rolling_skew": [658, 1240], "rolling_std": [659, 1241], "rolling_std_bi": 660, "rolling_sum": [661, 1242], "rolling_sum_bi": 662, "rolling_var": [663, 1243], "rolling_var_bi": 664, "root_nam": 598, "round": [470, 665, 1084, 1244, 1370], "round_sig_fig": [666, 1245], "row": [279, 280], "rows_by_kei": 281, "rowserror": 118, "rtrim": 1371, "sampl": [282, 564, 667, 1181, 1246], "save": [5, 199], "save_to_fil": 6, "scan_csv": 159, "scan_delta": 160, "scan_iceberg": 161, "scan_ipc": 162, "scan_ndjson": 163, "scan_parquet": 164, "scan_pyarrow_dataset": 165, "scan_tabl": 189, "scatter": 1247, "schema": [283, 903, 958, 1317], "schemaerror": 121, "schemafieldnotfounderror": 122, "search_sort": [668, 1248], "second": [471, 1085], "select": [284, 348, 815, 841, 904, 955, 1351, 1364], "select_seq": [285, 905], "selector": 959, "seri": [179, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1348], "serial": [286, 347, 599, 906, 954], "set": [959, 1249, 1377], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [565, 1182], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [566, 1183], "set_profil": 180, "set_random_se": 166, "set_sort": [287, 669, 907, 1250], "set_streaming_chunk_s": 15, "set_symmetric_differ": [567, 1184], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [568, 1185], "set_verbos": 30, "shape": [288, 1251], "shapeerror": 123, "shift": [289, 390, 569, 670, 908, 997, 1186, 1252], "show": 1378, "show_graph": [600, 909], "show_vers": 167, "shrink_dtyp": [671, 1253], "shrink_to_fit": [290, 1254], "shuffl": [672, 1255], "sign": [673, 1256, 1370], "sin": [674, 1257, 1373], "sind": 1373, "sinh": [675, 1258], "sink_csv": 48, "sink_ipc": 49, "sink_ndjson": 50, "sink_parquet": 51, "size": [404, 1010], "skew": [676, 1259], "slice": [291, 570, 677, 710, 910, 1187, 1260, 1292], "sort": [292, 391, 571, 678, 911, 998, 1188, 1261], "sort_bi": 679, "split": [711, 1293], "split_exact": [712, 1294], "splitn": [713, 1295], "sql": [293, 816, 912, 1364, 1369, 1375, 1376], "sql_expr": 817, "sqlcontext": [1357, 1358, 1359, 1360, 1361, 1362, 1363, 1376], "sqlinterfaceerror": 119, "sqlsyntaxerror": 120, "sqrt": [680, 1262, 1370], "starts_with": [405, 422, 714, 1011, 1028, 1296, 1371], "state": [31, 199], "std": [294, 392, 572, 681, 818, 913, 999, 1189, 1263], "stddev": 1365, "str": [682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312], "strategi": 1379, "strftime": [472, 1086, 1372], "string": [86, 351, 844, 1354, 1371], "stringcach": [55, 848], "stringcachemismatcherror": 124, "strip_char": [715, 1297], "strip_chars_end": [716, 1298], "strip_chars_start": [717, 1299], "strip_prefix": [718, 1300], "strip_suffix": [719, 1301], "strpo": 1371, "strptime": [720, 1302, 1371], "struct": [87, 731, 732, 733, 734, 735, 819, 845, 1313, 1314, 1315, 1316, 1317, 1318, 1355], "structfieldnotfounderror": 125, "style": 350, "sub": 736, "substr": 1371, "suffix": 614, "suffix_field": 615, "sum": [295, 339, 393, 573, 737, 820, 914, 943, 1000, 1190, 1319, 1365], "sum_horizont": [296, 821], "tabl": [1362, 1378], "tableinfo": [194, 195], "tabletyp": 196, "tail": [297, 340, 574, 721, 738, 822, 915, 944, 1191, 1303, 1320], "tan": [739, 1321, 1373], "tand": 1373, "tanh": [740, 1322], "tempor": [351, 846, 1356, 1372], "test": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 1379], "thread_pool_s": 181, "threadpool_s": 182, "time": [88, 473, 823, 1087], "time_rang": [824, 825], "timestamp": [474, 1088, 1371], "to_arrai": [575, 1192], "to_arrow": [298, 1323], "to_dat": [722, 1304], "to_datetim": [723, 1305], "to_decim": [724, 1306], "to_dict": [299, 300], "to_dummi": [301, 1324], "to_fram": 1325, "to_init_repr": [302, 1326], "to_integ": [725, 1307], "to_jax": [303, 1327], "to_list": [394, 1001, 1328], "to_loc": 1029, "to_lowercas": [616, 726, 1308], "to_numpi": [304, 1329], "to_panda": [305, 1330], "to_phys": [741, 1331], "to_seri": 306, "to_str": [475, 1089], "to_struct": [307, 395, 576, 1002, 1193], "to_tim": [727, 1309], "to_titlecas": [728, 1310], "to_torch": [308, 1332], "to_uppercas": [617, 729, 1311], "toomanyrowsreturnederror": 126, "top_k": [309, 742, 916, 1333], "top_k_bi": 743, "total_dai": [476, 1090], "total_hour": [477, 1091], "total_microsecond": [478, 1092], "total_millisecond": [479, 1093], "total_minut": [480, 1094], "total_nanosecond": [481, 1095], "total_second": [482, 1096], "transpos": 310, "tree_format": 601, "trigonometri": 1373, "truediv": 744, "truncat": [483, 1097, 1378], "try_cast": 1374, "type": [351, 1374], "uint16": 89, "uint32": 90, "uint64": 91, "uint8": 92, "undo_alias": 602, "union": 1377, "uniqu": [311, 396, 577, 745, 917, 1003, 1194, 1334], "unique_count": [746, 1335], "uniti": [190, 191, 192, 193, 194, 195, 196, 198], "unknown": 93, "unnest": [312, 734, 918, 1318, 1366, 1378], "unpivot": [313, 919], "unregist": 1363, "unstablewarn": 127, "unstack": 314, "unsuitablesqlerror": 128, "updat": [315, 920], "upper": 1371, "upper_bound": [747, 1336], "upsampl": 316, "us": 199, "uses_lexical_ord": 1030, "using_string_cach": 183, "utf8": 94, "value_count": [748, 1337], "var": [317, 397, 578, 749, 826, 921, 1004, 1195, 1338], "varianc": 1365, "vstack": 318, "warn": 352, "week": [484, 1098], "weekdai": [485, 1099], "when": 827, "where": [750, 1364], "width": [319, 922], "window": 847, "with_column": [320, 923], "with_columns_seq": [321, 924], "with_context": 925, "with_field": 735, "with_row_count": [322, 926], "with_row_index": [323, 927], "with_time_unit": [486, 1100], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 603], "write_ndjson": 46, "write_parquet": 47, "xor": 751, "year": [487, 1101], "zero": 828, "zfill": [730, 1312], "zip_with": 1339}})